
Tone With STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003d74  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000200  08003e34  08003e34  00013e34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004034  08004034  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08004034  08004034  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004034  08004034  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004034  08004034  00014034  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004038  08004038  00014038  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800403c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000138  2000000c  08004048  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000144  08004048  00020144  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e571  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001e90  00000000  00000000  0002e5a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c68  00000000  00000000  00030438  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b90  00000000  00000000  000310a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00012189  00000000  00000000  00031c30  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b9c6  00000000  00000000  00043db9  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0006d8a0  00000000  00000000  0004f77f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000bd01f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002c38  00000000  00000000  000bd09c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003e1c 	.word	0x08003e1c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08003e1c 	.word	0x08003e1c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80003f8:	4b07      	ldr	r3, [pc, #28]	; (8000418 <HAL_Init+0x24>)
 80003fa:	681a      	ldr	r2, [r3, #0]
 80003fc:	4b06      	ldr	r3, [pc, #24]	; (8000418 <HAL_Init+0x24>)
 80003fe:	2110      	movs	r1, #16
 8000400:	430a      	orrs	r2, r1
 8000402:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000404:	2000      	movs	r0, #0
 8000406:	f000 f809 	bl	800041c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800040a:	f003 fb2f 	bl	8003a6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800040e:	2300      	movs	r3, #0
}
 8000410:	0018      	movs	r0, r3
 8000412:	46bd      	mov	sp, r7
 8000414:	bd80      	pop	{r7, pc}
 8000416:	46c0      	nop			; (mov r8, r8)
 8000418:	40022000 	.word	0x40022000

0800041c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800041c:	b590      	push	{r4, r7, lr}
 800041e:	b083      	sub	sp, #12
 8000420:	af00      	add	r7, sp, #0
 8000422:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000424:	4b14      	ldr	r3, [pc, #80]	; (8000478 <HAL_InitTick+0x5c>)
 8000426:	681c      	ldr	r4, [r3, #0]
 8000428:	4b14      	ldr	r3, [pc, #80]	; (800047c <HAL_InitTick+0x60>)
 800042a:	781b      	ldrb	r3, [r3, #0]
 800042c:	0019      	movs	r1, r3
 800042e:	23fa      	movs	r3, #250	; 0xfa
 8000430:	0098      	lsls	r0, r3, #2
 8000432:	f7ff fe69 	bl	8000108 <__udivsi3>
 8000436:	0003      	movs	r3, r0
 8000438:	0019      	movs	r1, r3
 800043a:	0020      	movs	r0, r4
 800043c:	f7ff fe64 	bl	8000108 <__udivsi3>
 8000440:	0003      	movs	r3, r0
 8000442:	0018      	movs	r0, r3
 8000444:	f000 f92d 	bl	80006a2 <HAL_SYSTICK_Config>
 8000448:	1e03      	subs	r3, r0, #0
 800044a:	d001      	beq.n	8000450 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800044c:	2301      	movs	r3, #1
 800044e:	e00f      	b.n	8000470 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	2b03      	cmp	r3, #3
 8000454:	d80b      	bhi.n	800046e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000456:	6879      	ldr	r1, [r7, #4]
 8000458:	2301      	movs	r3, #1
 800045a:	425b      	negs	r3, r3
 800045c:	2200      	movs	r2, #0
 800045e:	0018      	movs	r0, r3
 8000460:	f000 f8fa 	bl	8000658 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000464:	4b06      	ldr	r3, [pc, #24]	; (8000480 <HAL_InitTick+0x64>)
 8000466:	687a      	ldr	r2, [r7, #4]
 8000468:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800046a:	2300      	movs	r3, #0
 800046c:	e000      	b.n	8000470 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800046e:	2301      	movs	r3, #1
}
 8000470:	0018      	movs	r0, r3
 8000472:	46bd      	mov	sp, r7
 8000474:	b003      	add	sp, #12
 8000476:	bd90      	pop	{r4, r7, pc}
 8000478:	20000008 	.word	0x20000008
 800047c:	20000004 	.word	0x20000004
 8000480:	20000000 	.word	0x20000000

08000484 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000488:	4b05      	ldr	r3, [pc, #20]	; (80004a0 <HAL_IncTick+0x1c>)
 800048a:	781b      	ldrb	r3, [r3, #0]
 800048c:	001a      	movs	r2, r3
 800048e:	4b05      	ldr	r3, [pc, #20]	; (80004a4 <HAL_IncTick+0x20>)
 8000490:	681b      	ldr	r3, [r3, #0]
 8000492:	18d2      	adds	r2, r2, r3
 8000494:	4b03      	ldr	r3, [pc, #12]	; (80004a4 <HAL_IncTick+0x20>)
 8000496:	601a      	str	r2, [r3, #0]
}
 8000498:	46c0      	nop			; (mov r8, r8)
 800049a:	46bd      	mov	sp, r7
 800049c:	bd80      	pop	{r7, pc}
 800049e:	46c0      	nop			; (mov r8, r8)
 80004a0:	20000004 	.word	0x20000004
 80004a4:	20000028 	.word	0x20000028

080004a8 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	af00      	add	r7, sp, #0
  return uwTick;
 80004ac:	4b02      	ldr	r3, [pc, #8]	; (80004b8 <HAL_GetTick+0x10>)
 80004ae:	681b      	ldr	r3, [r3, #0]
}
 80004b0:	0018      	movs	r0, r3
 80004b2:	46bd      	mov	sp, r7
 80004b4:	bd80      	pop	{r7, pc}
 80004b6:	46c0      	nop			; (mov r8, r8)
 80004b8:	20000028 	.word	0x20000028

080004bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	b084      	sub	sp, #16
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80004c4:	f7ff fff0 	bl	80004a8 <HAL_GetTick>
 80004c8:	0003      	movs	r3, r0
 80004ca:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80004d0:	68fb      	ldr	r3, [r7, #12]
 80004d2:	3301      	adds	r3, #1
 80004d4:	d005      	beq.n	80004e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80004d6:	4b09      	ldr	r3, [pc, #36]	; (80004fc <HAL_Delay+0x40>)
 80004d8:	781b      	ldrb	r3, [r3, #0]
 80004da:	001a      	movs	r2, r3
 80004dc:	68fb      	ldr	r3, [r7, #12]
 80004de:	189b      	adds	r3, r3, r2
 80004e0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80004e2:	46c0      	nop			; (mov r8, r8)
 80004e4:	f7ff ffe0 	bl	80004a8 <HAL_GetTick>
 80004e8:	0002      	movs	r2, r0
 80004ea:	68bb      	ldr	r3, [r7, #8]
 80004ec:	1ad3      	subs	r3, r2, r3
 80004ee:	68fa      	ldr	r2, [r7, #12]
 80004f0:	429a      	cmp	r2, r3
 80004f2:	d8f7      	bhi.n	80004e4 <HAL_Delay+0x28>
  {
  }
}
 80004f4:	46c0      	nop			; (mov r8, r8)
 80004f6:	46bd      	mov	sp, r7
 80004f8:	b004      	add	sp, #16
 80004fa:	bd80      	pop	{r7, pc}
 80004fc:	20000004 	.word	0x20000004

08000500 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b082      	sub	sp, #8
 8000504:	af00      	add	r7, sp, #0
 8000506:	0002      	movs	r2, r0
 8000508:	1dfb      	adds	r3, r7, #7
 800050a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800050c:	1dfb      	adds	r3, r7, #7
 800050e:	781b      	ldrb	r3, [r3, #0]
 8000510:	2b7f      	cmp	r3, #127	; 0x7f
 8000512:	d809      	bhi.n	8000528 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000514:	1dfb      	adds	r3, r7, #7
 8000516:	781b      	ldrb	r3, [r3, #0]
 8000518:	001a      	movs	r2, r3
 800051a:	231f      	movs	r3, #31
 800051c:	401a      	ands	r2, r3
 800051e:	4b04      	ldr	r3, [pc, #16]	; (8000530 <__NVIC_EnableIRQ+0x30>)
 8000520:	2101      	movs	r1, #1
 8000522:	4091      	lsls	r1, r2
 8000524:	000a      	movs	r2, r1
 8000526:	601a      	str	r2, [r3, #0]
  }
}
 8000528:	46c0      	nop			; (mov r8, r8)
 800052a:	46bd      	mov	sp, r7
 800052c:	b002      	add	sp, #8
 800052e:	bd80      	pop	{r7, pc}
 8000530:	e000e100 	.word	0xe000e100

08000534 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000534:	b590      	push	{r4, r7, lr}
 8000536:	b083      	sub	sp, #12
 8000538:	af00      	add	r7, sp, #0
 800053a:	0002      	movs	r2, r0
 800053c:	6039      	str	r1, [r7, #0]
 800053e:	1dfb      	adds	r3, r7, #7
 8000540:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000542:	1dfb      	adds	r3, r7, #7
 8000544:	781b      	ldrb	r3, [r3, #0]
 8000546:	2b7f      	cmp	r3, #127	; 0x7f
 8000548:	d828      	bhi.n	800059c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800054a:	4a2f      	ldr	r2, [pc, #188]	; (8000608 <__NVIC_SetPriority+0xd4>)
 800054c:	1dfb      	adds	r3, r7, #7
 800054e:	781b      	ldrb	r3, [r3, #0]
 8000550:	b25b      	sxtb	r3, r3
 8000552:	089b      	lsrs	r3, r3, #2
 8000554:	33c0      	adds	r3, #192	; 0xc0
 8000556:	009b      	lsls	r3, r3, #2
 8000558:	589b      	ldr	r3, [r3, r2]
 800055a:	1dfa      	adds	r2, r7, #7
 800055c:	7812      	ldrb	r2, [r2, #0]
 800055e:	0011      	movs	r1, r2
 8000560:	2203      	movs	r2, #3
 8000562:	400a      	ands	r2, r1
 8000564:	00d2      	lsls	r2, r2, #3
 8000566:	21ff      	movs	r1, #255	; 0xff
 8000568:	4091      	lsls	r1, r2
 800056a:	000a      	movs	r2, r1
 800056c:	43d2      	mvns	r2, r2
 800056e:	401a      	ands	r2, r3
 8000570:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000572:	683b      	ldr	r3, [r7, #0]
 8000574:	019b      	lsls	r3, r3, #6
 8000576:	22ff      	movs	r2, #255	; 0xff
 8000578:	401a      	ands	r2, r3
 800057a:	1dfb      	adds	r3, r7, #7
 800057c:	781b      	ldrb	r3, [r3, #0]
 800057e:	0018      	movs	r0, r3
 8000580:	2303      	movs	r3, #3
 8000582:	4003      	ands	r3, r0
 8000584:	00db      	lsls	r3, r3, #3
 8000586:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000588:	481f      	ldr	r0, [pc, #124]	; (8000608 <__NVIC_SetPriority+0xd4>)
 800058a:	1dfb      	adds	r3, r7, #7
 800058c:	781b      	ldrb	r3, [r3, #0]
 800058e:	b25b      	sxtb	r3, r3
 8000590:	089b      	lsrs	r3, r3, #2
 8000592:	430a      	orrs	r2, r1
 8000594:	33c0      	adds	r3, #192	; 0xc0
 8000596:	009b      	lsls	r3, r3, #2
 8000598:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800059a:	e031      	b.n	8000600 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800059c:	4a1b      	ldr	r2, [pc, #108]	; (800060c <__NVIC_SetPriority+0xd8>)
 800059e:	1dfb      	adds	r3, r7, #7
 80005a0:	781b      	ldrb	r3, [r3, #0]
 80005a2:	0019      	movs	r1, r3
 80005a4:	230f      	movs	r3, #15
 80005a6:	400b      	ands	r3, r1
 80005a8:	3b08      	subs	r3, #8
 80005aa:	089b      	lsrs	r3, r3, #2
 80005ac:	3306      	adds	r3, #6
 80005ae:	009b      	lsls	r3, r3, #2
 80005b0:	18d3      	adds	r3, r2, r3
 80005b2:	3304      	adds	r3, #4
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	1dfa      	adds	r2, r7, #7
 80005b8:	7812      	ldrb	r2, [r2, #0]
 80005ba:	0011      	movs	r1, r2
 80005bc:	2203      	movs	r2, #3
 80005be:	400a      	ands	r2, r1
 80005c0:	00d2      	lsls	r2, r2, #3
 80005c2:	21ff      	movs	r1, #255	; 0xff
 80005c4:	4091      	lsls	r1, r2
 80005c6:	000a      	movs	r2, r1
 80005c8:	43d2      	mvns	r2, r2
 80005ca:	401a      	ands	r2, r3
 80005cc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80005ce:	683b      	ldr	r3, [r7, #0]
 80005d0:	019b      	lsls	r3, r3, #6
 80005d2:	22ff      	movs	r2, #255	; 0xff
 80005d4:	401a      	ands	r2, r3
 80005d6:	1dfb      	adds	r3, r7, #7
 80005d8:	781b      	ldrb	r3, [r3, #0]
 80005da:	0018      	movs	r0, r3
 80005dc:	2303      	movs	r3, #3
 80005de:	4003      	ands	r3, r0
 80005e0:	00db      	lsls	r3, r3, #3
 80005e2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80005e4:	4809      	ldr	r0, [pc, #36]	; (800060c <__NVIC_SetPriority+0xd8>)
 80005e6:	1dfb      	adds	r3, r7, #7
 80005e8:	781b      	ldrb	r3, [r3, #0]
 80005ea:	001c      	movs	r4, r3
 80005ec:	230f      	movs	r3, #15
 80005ee:	4023      	ands	r3, r4
 80005f0:	3b08      	subs	r3, #8
 80005f2:	089b      	lsrs	r3, r3, #2
 80005f4:	430a      	orrs	r2, r1
 80005f6:	3306      	adds	r3, #6
 80005f8:	009b      	lsls	r3, r3, #2
 80005fa:	18c3      	adds	r3, r0, r3
 80005fc:	3304      	adds	r3, #4
 80005fe:	601a      	str	r2, [r3, #0]
}
 8000600:	46c0      	nop			; (mov r8, r8)
 8000602:	46bd      	mov	sp, r7
 8000604:	b003      	add	sp, #12
 8000606:	bd90      	pop	{r4, r7, pc}
 8000608:	e000e100 	.word	0xe000e100
 800060c:	e000ed00 	.word	0xe000ed00

08000610 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b082      	sub	sp, #8
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	3b01      	subs	r3, #1
 800061c:	4a0c      	ldr	r2, [pc, #48]	; (8000650 <SysTick_Config+0x40>)
 800061e:	4293      	cmp	r3, r2
 8000620:	d901      	bls.n	8000626 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000622:	2301      	movs	r3, #1
 8000624:	e010      	b.n	8000648 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000626:	4b0b      	ldr	r3, [pc, #44]	; (8000654 <SysTick_Config+0x44>)
 8000628:	687a      	ldr	r2, [r7, #4]
 800062a:	3a01      	subs	r2, #1
 800062c:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800062e:	2301      	movs	r3, #1
 8000630:	425b      	negs	r3, r3
 8000632:	2103      	movs	r1, #3
 8000634:	0018      	movs	r0, r3
 8000636:	f7ff ff7d 	bl	8000534 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800063a:	4b06      	ldr	r3, [pc, #24]	; (8000654 <SysTick_Config+0x44>)
 800063c:	2200      	movs	r2, #0
 800063e:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000640:	4b04      	ldr	r3, [pc, #16]	; (8000654 <SysTick_Config+0x44>)
 8000642:	2207      	movs	r2, #7
 8000644:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000646:	2300      	movs	r3, #0
}
 8000648:	0018      	movs	r0, r3
 800064a:	46bd      	mov	sp, r7
 800064c:	b002      	add	sp, #8
 800064e:	bd80      	pop	{r7, pc}
 8000650:	00ffffff 	.word	0x00ffffff
 8000654:	e000e010 	.word	0xe000e010

08000658 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000658:	b580      	push	{r7, lr}
 800065a:	b084      	sub	sp, #16
 800065c:	af00      	add	r7, sp, #0
 800065e:	60b9      	str	r1, [r7, #8]
 8000660:	607a      	str	r2, [r7, #4]
 8000662:	210f      	movs	r1, #15
 8000664:	187b      	adds	r3, r7, r1
 8000666:	1c02      	adds	r2, r0, #0
 8000668:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800066a:	68ba      	ldr	r2, [r7, #8]
 800066c:	187b      	adds	r3, r7, r1
 800066e:	781b      	ldrb	r3, [r3, #0]
 8000670:	b25b      	sxtb	r3, r3
 8000672:	0011      	movs	r1, r2
 8000674:	0018      	movs	r0, r3
 8000676:	f7ff ff5d 	bl	8000534 <__NVIC_SetPriority>
}
 800067a:	46c0      	nop			; (mov r8, r8)
 800067c:	46bd      	mov	sp, r7
 800067e:	b004      	add	sp, #16
 8000680:	bd80      	pop	{r7, pc}

08000682 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000682:	b580      	push	{r7, lr}
 8000684:	b082      	sub	sp, #8
 8000686:	af00      	add	r7, sp, #0
 8000688:	0002      	movs	r2, r0
 800068a:	1dfb      	adds	r3, r7, #7
 800068c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800068e:	1dfb      	adds	r3, r7, #7
 8000690:	781b      	ldrb	r3, [r3, #0]
 8000692:	b25b      	sxtb	r3, r3
 8000694:	0018      	movs	r0, r3
 8000696:	f7ff ff33 	bl	8000500 <__NVIC_EnableIRQ>
}
 800069a:	46c0      	nop			; (mov r8, r8)
 800069c:	46bd      	mov	sp, r7
 800069e:	b002      	add	sp, #8
 80006a0:	bd80      	pop	{r7, pc}

080006a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80006a2:	b580      	push	{r7, lr}
 80006a4:	b082      	sub	sp, #8
 80006a6:	af00      	add	r7, sp, #0
 80006a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	0018      	movs	r0, r3
 80006ae:	f7ff ffaf 	bl	8000610 <SysTick_Config>
 80006b2:	0003      	movs	r3, r0
}
 80006b4:	0018      	movs	r0, r3
 80006b6:	46bd      	mov	sp, r7
 80006b8:	b002      	add	sp, #8
 80006ba:	bd80      	pop	{r7, pc}

080006bc <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b082      	sub	sp, #8
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	2221      	movs	r2, #33	; 0x21
 80006c8:	5c9b      	ldrb	r3, [r3, r2]
 80006ca:	b2db      	uxtb	r3, r3
 80006cc:	2b02      	cmp	r3, #2
 80006ce:	d008      	beq.n	80006e2 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	2204      	movs	r2, #4
 80006d4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	2220      	movs	r2, #32
 80006da:	2100      	movs	r1, #0
 80006dc:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 80006de:	2301      	movs	r3, #1
 80006e0:	e020      	b.n	8000724 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	681a      	ldr	r2, [r3, #0]
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	210e      	movs	r1, #14
 80006ee:	438a      	bics	r2, r1
 80006f0:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	681a      	ldr	r2, [r3, #0]
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	2101      	movs	r1, #1
 80006fe:	438a      	bics	r2, r1
 8000700:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800070a:	2101      	movs	r1, #1
 800070c:	4091      	lsls	r1, r2
 800070e:	000a      	movs	r2, r1
 8000710:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	2221      	movs	r2, #33	; 0x21
 8000716:	2101      	movs	r1, #1
 8000718:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	2220      	movs	r2, #32
 800071e:	2100      	movs	r1, #0
 8000720:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8000722:	2300      	movs	r3, #0
}
 8000724:	0018      	movs	r0, r3
 8000726:	46bd      	mov	sp, r7
 8000728:	b002      	add	sp, #8
 800072a:	bd80      	pop	{r7, pc}

0800072c <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800072c:	b580      	push	{r7, lr}
 800072e:	b084      	sub	sp, #16
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000734:	230f      	movs	r3, #15
 8000736:	18fb      	adds	r3, r7, r3
 8000738:	2200      	movs	r2, #0
 800073a:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	2221      	movs	r2, #33	; 0x21
 8000740:	5c9b      	ldrb	r3, [r3, r2]
 8000742:	b2db      	uxtb	r3, r3
 8000744:	2b02      	cmp	r3, #2
 8000746:	d007      	beq.n	8000758 <HAL_DMA_Abort_IT+0x2c>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	2204      	movs	r2, #4
 800074c:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800074e:	230f      	movs	r3, #15
 8000750:	18fb      	adds	r3, r7, r3
 8000752:	2201      	movs	r2, #1
 8000754:	701a      	strb	r2, [r3, #0]
 8000756:	e028      	b.n	80007aa <HAL_DMA_Abort_IT+0x7e>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	681a      	ldr	r2, [r3, #0]
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	210e      	movs	r1, #14
 8000764:	438a      	bics	r2, r1
 8000766:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	681a      	ldr	r2, [r3, #0]
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	2101      	movs	r1, #1
 8000774:	438a      	bics	r2, r1
 8000776:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000780:	2101      	movs	r1, #1
 8000782:	4091      	lsls	r1, r2
 8000784:	000a      	movs	r2, r1
 8000786:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	2221      	movs	r2, #33	; 0x21
 800078c:	2101      	movs	r1, #1
 800078e:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	2220      	movs	r2, #32
 8000794:	2100      	movs	r1, #0
 8000796:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800079c:	2b00      	cmp	r3, #0
 800079e:	d004      	beq.n	80007aa <HAL_DMA_Abort_IT+0x7e>
    {
      hdma->XferAbortCallback(hdma);
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80007a4:	687a      	ldr	r2, [r7, #4]
 80007a6:	0010      	movs	r0, r2
 80007a8:	4798      	blx	r3
    } 
  }
  return status;
 80007aa:	230f      	movs	r3, #15
 80007ac:	18fb      	adds	r3, r7, r3
 80007ae:	781b      	ldrb	r3, [r3, #0]
}
 80007b0:	0018      	movs	r0, r3
 80007b2:	46bd      	mov	sp, r7
 80007b4:	b004      	add	sp, #16
 80007b6:	bd80      	pop	{r7, pc}

080007b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b086      	sub	sp, #24
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
 80007c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80007c2:	2300      	movs	r3, #0
 80007c4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80007c6:	e14f      	b.n	8000a68 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80007c8:	683b      	ldr	r3, [r7, #0]
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	2101      	movs	r1, #1
 80007ce:	697a      	ldr	r2, [r7, #20]
 80007d0:	4091      	lsls	r1, r2
 80007d2:	000a      	movs	r2, r1
 80007d4:	4013      	ands	r3, r2
 80007d6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80007d8:	68fb      	ldr	r3, [r7, #12]
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d100      	bne.n	80007e0 <HAL_GPIO_Init+0x28>
 80007de:	e140      	b.n	8000a62 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80007e0:	683b      	ldr	r3, [r7, #0]
 80007e2:	685b      	ldr	r3, [r3, #4]
 80007e4:	2203      	movs	r2, #3
 80007e6:	4013      	ands	r3, r2
 80007e8:	2b01      	cmp	r3, #1
 80007ea:	d005      	beq.n	80007f8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80007ec:	683b      	ldr	r3, [r7, #0]
 80007ee:	685b      	ldr	r3, [r3, #4]
 80007f0:	2203      	movs	r2, #3
 80007f2:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80007f4:	2b02      	cmp	r3, #2
 80007f6:	d130      	bne.n	800085a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	689b      	ldr	r3, [r3, #8]
 80007fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80007fe:	697b      	ldr	r3, [r7, #20]
 8000800:	005b      	lsls	r3, r3, #1
 8000802:	2203      	movs	r2, #3
 8000804:	409a      	lsls	r2, r3
 8000806:	0013      	movs	r3, r2
 8000808:	43da      	mvns	r2, r3
 800080a:	693b      	ldr	r3, [r7, #16]
 800080c:	4013      	ands	r3, r2
 800080e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000810:	683b      	ldr	r3, [r7, #0]
 8000812:	68da      	ldr	r2, [r3, #12]
 8000814:	697b      	ldr	r3, [r7, #20]
 8000816:	005b      	lsls	r3, r3, #1
 8000818:	409a      	lsls	r2, r3
 800081a:	0013      	movs	r3, r2
 800081c:	693a      	ldr	r2, [r7, #16]
 800081e:	4313      	orrs	r3, r2
 8000820:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	693a      	ldr	r2, [r7, #16]
 8000826:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	685b      	ldr	r3, [r3, #4]
 800082c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800082e:	2201      	movs	r2, #1
 8000830:	697b      	ldr	r3, [r7, #20]
 8000832:	409a      	lsls	r2, r3
 8000834:	0013      	movs	r3, r2
 8000836:	43da      	mvns	r2, r3
 8000838:	693b      	ldr	r3, [r7, #16]
 800083a:	4013      	ands	r3, r2
 800083c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800083e:	683b      	ldr	r3, [r7, #0]
 8000840:	685b      	ldr	r3, [r3, #4]
 8000842:	091b      	lsrs	r3, r3, #4
 8000844:	2201      	movs	r2, #1
 8000846:	401a      	ands	r2, r3
 8000848:	697b      	ldr	r3, [r7, #20]
 800084a:	409a      	lsls	r2, r3
 800084c:	0013      	movs	r3, r2
 800084e:	693a      	ldr	r2, [r7, #16]
 8000850:	4313      	orrs	r3, r2
 8000852:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	693a      	ldr	r2, [r7, #16]
 8000858:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800085a:	683b      	ldr	r3, [r7, #0]
 800085c:	685b      	ldr	r3, [r3, #4]
 800085e:	2203      	movs	r2, #3
 8000860:	4013      	ands	r3, r2
 8000862:	2b03      	cmp	r3, #3
 8000864:	d017      	beq.n	8000896 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	68db      	ldr	r3, [r3, #12]
 800086a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800086c:	697b      	ldr	r3, [r7, #20]
 800086e:	005b      	lsls	r3, r3, #1
 8000870:	2203      	movs	r2, #3
 8000872:	409a      	lsls	r2, r3
 8000874:	0013      	movs	r3, r2
 8000876:	43da      	mvns	r2, r3
 8000878:	693b      	ldr	r3, [r7, #16]
 800087a:	4013      	ands	r3, r2
 800087c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800087e:	683b      	ldr	r3, [r7, #0]
 8000880:	689a      	ldr	r2, [r3, #8]
 8000882:	697b      	ldr	r3, [r7, #20]
 8000884:	005b      	lsls	r3, r3, #1
 8000886:	409a      	lsls	r2, r3
 8000888:	0013      	movs	r3, r2
 800088a:	693a      	ldr	r2, [r7, #16]
 800088c:	4313      	orrs	r3, r2
 800088e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	693a      	ldr	r2, [r7, #16]
 8000894:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000896:	683b      	ldr	r3, [r7, #0]
 8000898:	685b      	ldr	r3, [r3, #4]
 800089a:	2203      	movs	r2, #3
 800089c:	4013      	ands	r3, r2
 800089e:	2b02      	cmp	r3, #2
 80008a0:	d123      	bne.n	80008ea <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80008a2:	697b      	ldr	r3, [r7, #20]
 80008a4:	08da      	lsrs	r2, r3, #3
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	3208      	adds	r2, #8
 80008aa:	0092      	lsls	r2, r2, #2
 80008ac:	58d3      	ldr	r3, [r2, r3]
 80008ae:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80008b0:	697b      	ldr	r3, [r7, #20]
 80008b2:	2207      	movs	r2, #7
 80008b4:	4013      	ands	r3, r2
 80008b6:	009b      	lsls	r3, r3, #2
 80008b8:	220f      	movs	r2, #15
 80008ba:	409a      	lsls	r2, r3
 80008bc:	0013      	movs	r3, r2
 80008be:	43da      	mvns	r2, r3
 80008c0:	693b      	ldr	r3, [r7, #16]
 80008c2:	4013      	ands	r3, r2
 80008c4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80008c6:	683b      	ldr	r3, [r7, #0]
 80008c8:	691a      	ldr	r2, [r3, #16]
 80008ca:	697b      	ldr	r3, [r7, #20]
 80008cc:	2107      	movs	r1, #7
 80008ce:	400b      	ands	r3, r1
 80008d0:	009b      	lsls	r3, r3, #2
 80008d2:	409a      	lsls	r2, r3
 80008d4:	0013      	movs	r3, r2
 80008d6:	693a      	ldr	r2, [r7, #16]
 80008d8:	4313      	orrs	r3, r2
 80008da:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80008dc:	697b      	ldr	r3, [r7, #20]
 80008de:	08da      	lsrs	r2, r3, #3
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	3208      	adds	r2, #8
 80008e4:	0092      	lsls	r2, r2, #2
 80008e6:	6939      	ldr	r1, [r7, #16]
 80008e8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80008f0:	697b      	ldr	r3, [r7, #20]
 80008f2:	005b      	lsls	r3, r3, #1
 80008f4:	2203      	movs	r2, #3
 80008f6:	409a      	lsls	r2, r3
 80008f8:	0013      	movs	r3, r2
 80008fa:	43da      	mvns	r2, r3
 80008fc:	693b      	ldr	r3, [r7, #16]
 80008fe:	4013      	ands	r3, r2
 8000900:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000902:	683b      	ldr	r3, [r7, #0]
 8000904:	685b      	ldr	r3, [r3, #4]
 8000906:	2203      	movs	r2, #3
 8000908:	401a      	ands	r2, r3
 800090a:	697b      	ldr	r3, [r7, #20]
 800090c:	005b      	lsls	r3, r3, #1
 800090e:	409a      	lsls	r2, r3
 8000910:	0013      	movs	r3, r2
 8000912:	693a      	ldr	r2, [r7, #16]
 8000914:	4313      	orrs	r3, r2
 8000916:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	693a      	ldr	r2, [r7, #16]
 800091c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800091e:	683b      	ldr	r3, [r7, #0]
 8000920:	685a      	ldr	r2, [r3, #4]
 8000922:	23c0      	movs	r3, #192	; 0xc0
 8000924:	029b      	lsls	r3, r3, #10
 8000926:	4013      	ands	r3, r2
 8000928:	d100      	bne.n	800092c <HAL_GPIO_Init+0x174>
 800092a:	e09a      	b.n	8000a62 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800092c:	4b54      	ldr	r3, [pc, #336]	; (8000a80 <HAL_GPIO_Init+0x2c8>)
 800092e:	699a      	ldr	r2, [r3, #24]
 8000930:	4b53      	ldr	r3, [pc, #332]	; (8000a80 <HAL_GPIO_Init+0x2c8>)
 8000932:	2101      	movs	r1, #1
 8000934:	430a      	orrs	r2, r1
 8000936:	619a      	str	r2, [r3, #24]
 8000938:	4b51      	ldr	r3, [pc, #324]	; (8000a80 <HAL_GPIO_Init+0x2c8>)
 800093a:	699b      	ldr	r3, [r3, #24]
 800093c:	2201      	movs	r2, #1
 800093e:	4013      	ands	r3, r2
 8000940:	60bb      	str	r3, [r7, #8]
 8000942:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000944:	4a4f      	ldr	r2, [pc, #316]	; (8000a84 <HAL_GPIO_Init+0x2cc>)
 8000946:	697b      	ldr	r3, [r7, #20]
 8000948:	089b      	lsrs	r3, r3, #2
 800094a:	3302      	adds	r3, #2
 800094c:	009b      	lsls	r3, r3, #2
 800094e:	589b      	ldr	r3, [r3, r2]
 8000950:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000952:	697b      	ldr	r3, [r7, #20]
 8000954:	2203      	movs	r2, #3
 8000956:	4013      	ands	r3, r2
 8000958:	009b      	lsls	r3, r3, #2
 800095a:	220f      	movs	r2, #15
 800095c:	409a      	lsls	r2, r3
 800095e:	0013      	movs	r3, r2
 8000960:	43da      	mvns	r2, r3
 8000962:	693b      	ldr	r3, [r7, #16]
 8000964:	4013      	ands	r3, r2
 8000966:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000968:	687a      	ldr	r2, [r7, #4]
 800096a:	2390      	movs	r3, #144	; 0x90
 800096c:	05db      	lsls	r3, r3, #23
 800096e:	429a      	cmp	r2, r3
 8000970:	d013      	beq.n	800099a <HAL_GPIO_Init+0x1e2>
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	4a44      	ldr	r2, [pc, #272]	; (8000a88 <HAL_GPIO_Init+0x2d0>)
 8000976:	4293      	cmp	r3, r2
 8000978:	d00d      	beq.n	8000996 <HAL_GPIO_Init+0x1de>
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	4a43      	ldr	r2, [pc, #268]	; (8000a8c <HAL_GPIO_Init+0x2d4>)
 800097e:	4293      	cmp	r3, r2
 8000980:	d007      	beq.n	8000992 <HAL_GPIO_Init+0x1da>
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	4a42      	ldr	r2, [pc, #264]	; (8000a90 <HAL_GPIO_Init+0x2d8>)
 8000986:	4293      	cmp	r3, r2
 8000988:	d101      	bne.n	800098e <HAL_GPIO_Init+0x1d6>
 800098a:	2303      	movs	r3, #3
 800098c:	e006      	b.n	800099c <HAL_GPIO_Init+0x1e4>
 800098e:	2305      	movs	r3, #5
 8000990:	e004      	b.n	800099c <HAL_GPIO_Init+0x1e4>
 8000992:	2302      	movs	r3, #2
 8000994:	e002      	b.n	800099c <HAL_GPIO_Init+0x1e4>
 8000996:	2301      	movs	r3, #1
 8000998:	e000      	b.n	800099c <HAL_GPIO_Init+0x1e4>
 800099a:	2300      	movs	r3, #0
 800099c:	697a      	ldr	r2, [r7, #20]
 800099e:	2103      	movs	r1, #3
 80009a0:	400a      	ands	r2, r1
 80009a2:	0092      	lsls	r2, r2, #2
 80009a4:	4093      	lsls	r3, r2
 80009a6:	693a      	ldr	r2, [r7, #16]
 80009a8:	4313      	orrs	r3, r2
 80009aa:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80009ac:	4935      	ldr	r1, [pc, #212]	; (8000a84 <HAL_GPIO_Init+0x2cc>)
 80009ae:	697b      	ldr	r3, [r7, #20]
 80009b0:	089b      	lsrs	r3, r3, #2
 80009b2:	3302      	adds	r3, #2
 80009b4:	009b      	lsls	r3, r3, #2
 80009b6:	693a      	ldr	r2, [r7, #16]
 80009b8:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80009ba:	4b36      	ldr	r3, [pc, #216]	; (8000a94 <HAL_GPIO_Init+0x2dc>)
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80009c0:	68fb      	ldr	r3, [r7, #12]
 80009c2:	43da      	mvns	r2, r3
 80009c4:	693b      	ldr	r3, [r7, #16]
 80009c6:	4013      	ands	r3, r2
 80009c8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80009ca:	683b      	ldr	r3, [r7, #0]
 80009cc:	685a      	ldr	r2, [r3, #4]
 80009ce:	2380      	movs	r3, #128	; 0x80
 80009d0:	025b      	lsls	r3, r3, #9
 80009d2:	4013      	ands	r3, r2
 80009d4:	d003      	beq.n	80009de <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 80009d6:	693a      	ldr	r2, [r7, #16]
 80009d8:	68fb      	ldr	r3, [r7, #12]
 80009da:	4313      	orrs	r3, r2
 80009dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80009de:	4b2d      	ldr	r3, [pc, #180]	; (8000a94 <HAL_GPIO_Init+0x2dc>)
 80009e0:	693a      	ldr	r2, [r7, #16]
 80009e2:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80009e4:	4b2b      	ldr	r3, [pc, #172]	; (8000a94 <HAL_GPIO_Init+0x2dc>)
 80009e6:	685b      	ldr	r3, [r3, #4]
 80009e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80009ea:	68fb      	ldr	r3, [r7, #12]
 80009ec:	43da      	mvns	r2, r3
 80009ee:	693b      	ldr	r3, [r7, #16]
 80009f0:	4013      	ands	r3, r2
 80009f2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80009f4:	683b      	ldr	r3, [r7, #0]
 80009f6:	685a      	ldr	r2, [r3, #4]
 80009f8:	2380      	movs	r3, #128	; 0x80
 80009fa:	029b      	lsls	r3, r3, #10
 80009fc:	4013      	ands	r3, r2
 80009fe:	d003      	beq.n	8000a08 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8000a00:	693a      	ldr	r2, [r7, #16]
 8000a02:	68fb      	ldr	r3, [r7, #12]
 8000a04:	4313      	orrs	r3, r2
 8000a06:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000a08:	4b22      	ldr	r3, [pc, #136]	; (8000a94 <HAL_GPIO_Init+0x2dc>)
 8000a0a:	693a      	ldr	r2, [r7, #16]
 8000a0c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000a0e:	4b21      	ldr	r3, [pc, #132]	; (8000a94 <HAL_GPIO_Init+0x2dc>)
 8000a10:	689b      	ldr	r3, [r3, #8]
 8000a12:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a14:	68fb      	ldr	r3, [r7, #12]
 8000a16:	43da      	mvns	r2, r3
 8000a18:	693b      	ldr	r3, [r7, #16]
 8000a1a:	4013      	ands	r3, r2
 8000a1c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000a1e:	683b      	ldr	r3, [r7, #0]
 8000a20:	685a      	ldr	r2, [r3, #4]
 8000a22:	2380      	movs	r3, #128	; 0x80
 8000a24:	035b      	lsls	r3, r3, #13
 8000a26:	4013      	ands	r3, r2
 8000a28:	d003      	beq.n	8000a32 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8000a2a:	693a      	ldr	r2, [r7, #16]
 8000a2c:	68fb      	ldr	r3, [r7, #12]
 8000a2e:	4313      	orrs	r3, r2
 8000a30:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000a32:	4b18      	ldr	r3, [pc, #96]	; (8000a94 <HAL_GPIO_Init+0x2dc>)
 8000a34:	693a      	ldr	r2, [r7, #16]
 8000a36:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000a38:	4b16      	ldr	r3, [pc, #88]	; (8000a94 <HAL_GPIO_Init+0x2dc>)
 8000a3a:	68db      	ldr	r3, [r3, #12]
 8000a3c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a3e:	68fb      	ldr	r3, [r7, #12]
 8000a40:	43da      	mvns	r2, r3
 8000a42:	693b      	ldr	r3, [r7, #16]
 8000a44:	4013      	ands	r3, r2
 8000a46:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000a48:	683b      	ldr	r3, [r7, #0]
 8000a4a:	685a      	ldr	r2, [r3, #4]
 8000a4c:	2380      	movs	r3, #128	; 0x80
 8000a4e:	039b      	lsls	r3, r3, #14
 8000a50:	4013      	ands	r3, r2
 8000a52:	d003      	beq.n	8000a5c <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8000a54:	693a      	ldr	r2, [r7, #16]
 8000a56:	68fb      	ldr	r3, [r7, #12]
 8000a58:	4313      	orrs	r3, r2
 8000a5a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000a5c:	4b0d      	ldr	r3, [pc, #52]	; (8000a94 <HAL_GPIO_Init+0x2dc>)
 8000a5e:	693a      	ldr	r2, [r7, #16]
 8000a60:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8000a62:	697b      	ldr	r3, [r7, #20]
 8000a64:	3301      	adds	r3, #1
 8000a66:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a68:	683b      	ldr	r3, [r7, #0]
 8000a6a:	681a      	ldr	r2, [r3, #0]
 8000a6c:	697b      	ldr	r3, [r7, #20]
 8000a6e:	40da      	lsrs	r2, r3
 8000a70:	1e13      	subs	r3, r2, #0
 8000a72:	d000      	beq.n	8000a76 <HAL_GPIO_Init+0x2be>
 8000a74:	e6a8      	b.n	80007c8 <HAL_GPIO_Init+0x10>
  } 
}
 8000a76:	46c0      	nop			; (mov r8, r8)
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	b006      	add	sp, #24
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	46c0      	nop			; (mov r8, r8)
 8000a80:	40021000 	.word	0x40021000
 8000a84:	40010000 	.word	0x40010000
 8000a88:	48000400 	.word	0x48000400
 8000a8c:	48000800 	.word	0x48000800
 8000a90:	48000c00 	.word	0x48000c00
 8000a94:	40010400 	.word	0x40010400

08000a98 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b088      	sub	sp, #32
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d101      	bne.n	8000aaa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000aa6:	2301      	movs	r3, #1
 8000aa8:	e303      	b.n	80010b2 <HAL_RCC_OscConfig+0x61a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	2201      	movs	r2, #1
 8000ab0:	4013      	ands	r3, r2
 8000ab2:	d100      	bne.n	8000ab6 <HAL_RCC_OscConfig+0x1e>
 8000ab4:	e08d      	b.n	8000bd2 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000ab6:	4bc4      	ldr	r3, [pc, #784]	; (8000dc8 <HAL_RCC_OscConfig+0x330>)
 8000ab8:	685b      	ldr	r3, [r3, #4]
 8000aba:	220c      	movs	r2, #12
 8000abc:	4013      	ands	r3, r2
 8000abe:	2b04      	cmp	r3, #4
 8000ac0:	d00e      	beq.n	8000ae0 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000ac2:	4bc1      	ldr	r3, [pc, #772]	; (8000dc8 <HAL_RCC_OscConfig+0x330>)
 8000ac4:	685b      	ldr	r3, [r3, #4]
 8000ac6:	220c      	movs	r2, #12
 8000ac8:	4013      	ands	r3, r2
 8000aca:	2b08      	cmp	r3, #8
 8000acc:	d116      	bne.n	8000afc <HAL_RCC_OscConfig+0x64>
 8000ace:	4bbe      	ldr	r3, [pc, #760]	; (8000dc8 <HAL_RCC_OscConfig+0x330>)
 8000ad0:	685a      	ldr	r2, [r3, #4]
 8000ad2:	2380      	movs	r3, #128	; 0x80
 8000ad4:	025b      	lsls	r3, r3, #9
 8000ad6:	401a      	ands	r2, r3
 8000ad8:	2380      	movs	r3, #128	; 0x80
 8000ada:	025b      	lsls	r3, r3, #9
 8000adc:	429a      	cmp	r2, r3
 8000ade:	d10d      	bne.n	8000afc <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ae0:	4bb9      	ldr	r3, [pc, #740]	; (8000dc8 <HAL_RCC_OscConfig+0x330>)
 8000ae2:	681a      	ldr	r2, [r3, #0]
 8000ae4:	2380      	movs	r3, #128	; 0x80
 8000ae6:	029b      	lsls	r3, r3, #10
 8000ae8:	4013      	ands	r3, r2
 8000aea:	d100      	bne.n	8000aee <HAL_RCC_OscConfig+0x56>
 8000aec:	e070      	b.n	8000bd0 <HAL_RCC_OscConfig+0x138>
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	685b      	ldr	r3, [r3, #4]
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d000      	beq.n	8000af8 <HAL_RCC_OscConfig+0x60>
 8000af6:	e06b      	b.n	8000bd0 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8000af8:	2301      	movs	r3, #1
 8000afa:	e2da      	b.n	80010b2 <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	685b      	ldr	r3, [r3, #4]
 8000b00:	2b01      	cmp	r3, #1
 8000b02:	d107      	bne.n	8000b14 <HAL_RCC_OscConfig+0x7c>
 8000b04:	4bb0      	ldr	r3, [pc, #704]	; (8000dc8 <HAL_RCC_OscConfig+0x330>)
 8000b06:	681a      	ldr	r2, [r3, #0]
 8000b08:	4baf      	ldr	r3, [pc, #700]	; (8000dc8 <HAL_RCC_OscConfig+0x330>)
 8000b0a:	2180      	movs	r1, #128	; 0x80
 8000b0c:	0249      	lsls	r1, r1, #9
 8000b0e:	430a      	orrs	r2, r1
 8000b10:	601a      	str	r2, [r3, #0]
 8000b12:	e02f      	b.n	8000b74 <HAL_RCC_OscConfig+0xdc>
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	685b      	ldr	r3, [r3, #4]
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d10c      	bne.n	8000b36 <HAL_RCC_OscConfig+0x9e>
 8000b1c:	4baa      	ldr	r3, [pc, #680]	; (8000dc8 <HAL_RCC_OscConfig+0x330>)
 8000b1e:	681a      	ldr	r2, [r3, #0]
 8000b20:	4ba9      	ldr	r3, [pc, #676]	; (8000dc8 <HAL_RCC_OscConfig+0x330>)
 8000b22:	49aa      	ldr	r1, [pc, #680]	; (8000dcc <HAL_RCC_OscConfig+0x334>)
 8000b24:	400a      	ands	r2, r1
 8000b26:	601a      	str	r2, [r3, #0]
 8000b28:	4ba7      	ldr	r3, [pc, #668]	; (8000dc8 <HAL_RCC_OscConfig+0x330>)
 8000b2a:	681a      	ldr	r2, [r3, #0]
 8000b2c:	4ba6      	ldr	r3, [pc, #664]	; (8000dc8 <HAL_RCC_OscConfig+0x330>)
 8000b2e:	49a8      	ldr	r1, [pc, #672]	; (8000dd0 <HAL_RCC_OscConfig+0x338>)
 8000b30:	400a      	ands	r2, r1
 8000b32:	601a      	str	r2, [r3, #0]
 8000b34:	e01e      	b.n	8000b74 <HAL_RCC_OscConfig+0xdc>
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	685b      	ldr	r3, [r3, #4]
 8000b3a:	2b05      	cmp	r3, #5
 8000b3c:	d10e      	bne.n	8000b5c <HAL_RCC_OscConfig+0xc4>
 8000b3e:	4ba2      	ldr	r3, [pc, #648]	; (8000dc8 <HAL_RCC_OscConfig+0x330>)
 8000b40:	681a      	ldr	r2, [r3, #0]
 8000b42:	4ba1      	ldr	r3, [pc, #644]	; (8000dc8 <HAL_RCC_OscConfig+0x330>)
 8000b44:	2180      	movs	r1, #128	; 0x80
 8000b46:	02c9      	lsls	r1, r1, #11
 8000b48:	430a      	orrs	r2, r1
 8000b4a:	601a      	str	r2, [r3, #0]
 8000b4c:	4b9e      	ldr	r3, [pc, #632]	; (8000dc8 <HAL_RCC_OscConfig+0x330>)
 8000b4e:	681a      	ldr	r2, [r3, #0]
 8000b50:	4b9d      	ldr	r3, [pc, #628]	; (8000dc8 <HAL_RCC_OscConfig+0x330>)
 8000b52:	2180      	movs	r1, #128	; 0x80
 8000b54:	0249      	lsls	r1, r1, #9
 8000b56:	430a      	orrs	r2, r1
 8000b58:	601a      	str	r2, [r3, #0]
 8000b5a:	e00b      	b.n	8000b74 <HAL_RCC_OscConfig+0xdc>
 8000b5c:	4b9a      	ldr	r3, [pc, #616]	; (8000dc8 <HAL_RCC_OscConfig+0x330>)
 8000b5e:	681a      	ldr	r2, [r3, #0]
 8000b60:	4b99      	ldr	r3, [pc, #612]	; (8000dc8 <HAL_RCC_OscConfig+0x330>)
 8000b62:	499a      	ldr	r1, [pc, #616]	; (8000dcc <HAL_RCC_OscConfig+0x334>)
 8000b64:	400a      	ands	r2, r1
 8000b66:	601a      	str	r2, [r3, #0]
 8000b68:	4b97      	ldr	r3, [pc, #604]	; (8000dc8 <HAL_RCC_OscConfig+0x330>)
 8000b6a:	681a      	ldr	r2, [r3, #0]
 8000b6c:	4b96      	ldr	r3, [pc, #600]	; (8000dc8 <HAL_RCC_OscConfig+0x330>)
 8000b6e:	4998      	ldr	r1, [pc, #608]	; (8000dd0 <HAL_RCC_OscConfig+0x338>)
 8000b70:	400a      	ands	r2, r1
 8000b72:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	685b      	ldr	r3, [r3, #4]
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d014      	beq.n	8000ba6 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b7c:	f7ff fc94 	bl	80004a8 <HAL_GetTick>
 8000b80:	0003      	movs	r3, r0
 8000b82:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000b84:	e008      	b.n	8000b98 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000b86:	f7ff fc8f 	bl	80004a8 <HAL_GetTick>
 8000b8a:	0002      	movs	r2, r0
 8000b8c:	69bb      	ldr	r3, [r7, #24]
 8000b8e:	1ad3      	subs	r3, r2, r3
 8000b90:	2b64      	cmp	r3, #100	; 0x64
 8000b92:	d901      	bls.n	8000b98 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8000b94:	2303      	movs	r3, #3
 8000b96:	e28c      	b.n	80010b2 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000b98:	4b8b      	ldr	r3, [pc, #556]	; (8000dc8 <HAL_RCC_OscConfig+0x330>)
 8000b9a:	681a      	ldr	r2, [r3, #0]
 8000b9c:	2380      	movs	r3, #128	; 0x80
 8000b9e:	029b      	lsls	r3, r3, #10
 8000ba0:	4013      	ands	r3, r2
 8000ba2:	d0f0      	beq.n	8000b86 <HAL_RCC_OscConfig+0xee>
 8000ba4:	e015      	b.n	8000bd2 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ba6:	f7ff fc7f 	bl	80004a8 <HAL_GetTick>
 8000baa:	0003      	movs	r3, r0
 8000bac:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000bae:	e008      	b.n	8000bc2 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000bb0:	f7ff fc7a 	bl	80004a8 <HAL_GetTick>
 8000bb4:	0002      	movs	r2, r0
 8000bb6:	69bb      	ldr	r3, [r7, #24]
 8000bb8:	1ad3      	subs	r3, r2, r3
 8000bba:	2b64      	cmp	r3, #100	; 0x64
 8000bbc:	d901      	bls.n	8000bc2 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8000bbe:	2303      	movs	r3, #3
 8000bc0:	e277      	b.n	80010b2 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000bc2:	4b81      	ldr	r3, [pc, #516]	; (8000dc8 <HAL_RCC_OscConfig+0x330>)
 8000bc4:	681a      	ldr	r2, [r3, #0]
 8000bc6:	2380      	movs	r3, #128	; 0x80
 8000bc8:	029b      	lsls	r3, r3, #10
 8000bca:	4013      	ands	r3, r2
 8000bcc:	d1f0      	bne.n	8000bb0 <HAL_RCC_OscConfig+0x118>
 8000bce:	e000      	b.n	8000bd2 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000bd0:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	2202      	movs	r2, #2
 8000bd8:	4013      	ands	r3, r2
 8000bda:	d100      	bne.n	8000bde <HAL_RCC_OscConfig+0x146>
 8000bdc:	e069      	b.n	8000cb2 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000bde:	4b7a      	ldr	r3, [pc, #488]	; (8000dc8 <HAL_RCC_OscConfig+0x330>)
 8000be0:	685b      	ldr	r3, [r3, #4]
 8000be2:	220c      	movs	r2, #12
 8000be4:	4013      	ands	r3, r2
 8000be6:	d00b      	beq.n	8000c00 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000be8:	4b77      	ldr	r3, [pc, #476]	; (8000dc8 <HAL_RCC_OscConfig+0x330>)
 8000bea:	685b      	ldr	r3, [r3, #4]
 8000bec:	220c      	movs	r2, #12
 8000bee:	4013      	ands	r3, r2
 8000bf0:	2b08      	cmp	r3, #8
 8000bf2:	d11c      	bne.n	8000c2e <HAL_RCC_OscConfig+0x196>
 8000bf4:	4b74      	ldr	r3, [pc, #464]	; (8000dc8 <HAL_RCC_OscConfig+0x330>)
 8000bf6:	685a      	ldr	r2, [r3, #4]
 8000bf8:	2380      	movs	r3, #128	; 0x80
 8000bfa:	025b      	lsls	r3, r3, #9
 8000bfc:	4013      	ands	r3, r2
 8000bfe:	d116      	bne.n	8000c2e <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c00:	4b71      	ldr	r3, [pc, #452]	; (8000dc8 <HAL_RCC_OscConfig+0x330>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	2202      	movs	r2, #2
 8000c06:	4013      	ands	r3, r2
 8000c08:	d005      	beq.n	8000c16 <HAL_RCC_OscConfig+0x17e>
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	68db      	ldr	r3, [r3, #12]
 8000c0e:	2b01      	cmp	r3, #1
 8000c10:	d001      	beq.n	8000c16 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8000c12:	2301      	movs	r3, #1
 8000c14:	e24d      	b.n	80010b2 <HAL_RCC_OscConfig+0x61a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c16:	4b6c      	ldr	r3, [pc, #432]	; (8000dc8 <HAL_RCC_OscConfig+0x330>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	22f8      	movs	r2, #248	; 0xf8
 8000c1c:	4393      	bics	r3, r2
 8000c1e:	0019      	movs	r1, r3
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	691b      	ldr	r3, [r3, #16]
 8000c24:	00da      	lsls	r2, r3, #3
 8000c26:	4b68      	ldr	r3, [pc, #416]	; (8000dc8 <HAL_RCC_OscConfig+0x330>)
 8000c28:	430a      	orrs	r2, r1
 8000c2a:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c2c:	e041      	b.n	8000cb2 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	68db      	ldr	r3, [r3, #12]
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d024      	beq.n	8000c80 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000c36:	4b64      	ldr	r3, [pc, #400]	; (8000dc8 <HAL_RCC_OscConfig+0x330>)
 8000c38:	681a      	ldr	r2, [r3, #0]
 8000c3a:	4b63      	ldr	r3, [pc, #396]	; (8000dc8 <HAL_RCC_OscConfig+0x330>)
 8000c3c:	2101      	movs	r1, #1
 8000c3e:	430a      	orrs	r2, r1
 8000c40:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c42:	f7ff fc31 	bl	80004a8 <HAL_GetTick>
 8000c46:	0003      	movs	r3, r0
 8000c48:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c4a:	e008      	b.n	8000c5e <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000c4c:	f7ff fc2c 	bl	80004a8 <HAL_GetTick>
 8000c50:	0002      	movs	r2, r0
 8000c52:	69bb      	ldr	r3, [r7, #24]
 8000c54:	1ad3      	subs	r3, r2, r3
 8000c56:	2b02      	cmp	r3, #2
 8000c58:	d901      	bls.n	8000c5e <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8000c5a:	2303      	movs	r3, #3
 8000c5c:	e229      	b.n	80010b2 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c5e:	4b5a      	ldr	r3, [pc, #360]	; (8000dc8 <HAL_RCC_OscConfig+0x330>)
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	2202      	movs	r2, #2
 8000c64:	4013      	ands	r3, r2
 8000c66:	d0f1      	beq.n	8000c4c <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c68:	4b57      	ldr	r3, [pc, #348]	; (8000dc8 <HAL_RCC_OscConfig+0x330>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	22f8      	movs	r2, #248	; 0xf8
 8000c6e:	4393      	bics	r3, r2
 8000c70:	0019      	movs	r1, r3
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	691b      	ldr	r3, [r3, #16]
 8000c76:	00da      	lsls	r2, r3, #3
 8000c78:	4b53      	ldr	r3, [pc, #332]	; (8000dc8 <HAL_RCC_OscConfig+0x330>)
 8000c7a:	430a      	orrs	r2, r1
 8000c7c:	601a      	str	r2, [r3, #0]
 8000c7e:	e018      	b.n	8000cb2 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000c80:	4b51      	ldr	r3, [pc, #324]	; (8000dc8 <HAL_RCC_OscConfig+0x330>)
 8000c82:	681a      	ldr	r2, [r3, #0]
 8000c84:	4b50      	ldr	r3, [pc, #320]	; (8000dc8 <HAL_RCC_OscConfig+0x330>)
 8000c86:	2101      	movs	r1, #1
 8000c88:	438a      	bics	r2, r1
 8000c8a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c8c:	f7ff fc0c 	bl	80004a8 <HAL_GetTick>
 8000c90:	0003      	movs	r3, r0
 8000c92:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000c94:	e008      	b.n	8000ca8 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000c96:	f7ff fc07 	bl	80004a8 <HAL_GetTick>
 8000c9a:	0002      	movs	r2, r0
 8000c9c:	69bb      	ldr	r3, [r7, #24]
 8000c9e:	1ad3      	subs	r3, r2, r3
 8000ca0:	2b02      	cmp	r3, #2
 8000ca2:	d901      	bls.n	8000ca8 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8000ca4:	2303      	movs	r3, #3
 8000ca6:	e204      	b.n	80010b2 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ca8:	4b47      	ldr	r3, [pc, #284]	; (8000dc8 <HAL_RCC_OscConfig+0x330>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	2202      	movs	r2, #2
 8000cae:	4013      	ands	r3, r2
 8000cb0:	d1f1      	bne.n	8000c96 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	2208      	movs	r2, #8
 8000cb8:	4013      	ands	r3, r2
 8000cba:	d036      	beq.n	8000d2a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	69db      	ldr	r3, [r3, #28]
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d019      	beq.n	8000cf8 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000cc4:	4b40      	ldr	r3, [pc, #256]	; (8000dc8 <HAL_RCC_OscConfig+0x330>)
 8000cc6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000cc8:	4b3f      	ldr	r3, [pc, #252]	; (8000dc8 <HAL_RCC_OscConfig+0x330>)
 8000cca:	2101      	movs	r1, #1
 8000ccc:	430a      	orrs	r2, r1
 8000cce:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000cd0:	f7ff fbea 	bl	80004a8 <HAL_GetTick>
 8000cd4:	0003      	movs	r3, r0
 8000cd6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000cd8:	e008      	b.n	8000cec <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000cda:	f7ff fbe5 	bl	80004a8 <HAL_GetTick>
 8000cde:	0002      	movs	r2, r0
 8000ce0:	69bb      	ldr	r3, [r7, #24]
 8000ce2:	1ad3      	subs	r3, r2, r3
 8000ce4:	2b02      	cmp	r3, #2
 8000ce6:	d901      	bls.n	8000cec <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8000ce8:	2303      	movs	r3, #3
 8000cea:	e1e2      	b.n	80010b2 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000cec:	4b36      	ldr	r3, [pc, #216]	; (8000dc8 <HAL_RCC_OscConfig+0x330>)
 8000cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cf0:	2202      	movs	r2, #2
 8000cf2:	4013      	ands	r3, r2
 8000cf4:	d0f1      	beq.n	8000cda <HAL_RCC_OscConfig+0x242>
 8000cf6:	e018      	b.n	8000d2a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000cf8:	4b33      	ldr	r3, [pc, #204]	; (8000dc8 <HAL_RCC_OscConfig+0x330>)
 8000cfa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000cfc:	4b32      	ldr	r3, [pc, #200]	; (8000dc8 <HAL_RCC_OscConfig+0x330>)
 8000cfe:	2101      	movs	r1, #1
 8000d00:	438a      	bics	r2, r1
 8000d02:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d04:	f7ff fbd0 	bl	80004a8 <HAL_GetTick>
 8000d08:	0003      	movs	r3, r0
 8000d0a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000d0c:	e008      	b.n	8000d20 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000d0e:	f7ff fbcb 	bl	80004a8 <HAL_GetTick>
 8000d12:	0002      	movs	r2, r0
 8000d14:	69bb      	ldr	r3, [r7, #24]
 8000d16:	1ad3      	subs	r3, r2, r3
 8000d18:	2b02      	cmp	r3, #2
 8000d1a:	d901      	bls.n	8000d20 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8000d1c:	2303      	movs	r3, #3
 8000d1e:	e1c8      	b.n	80010b2 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000d20:	4b29      	ldr	r3, [pc, #164]	; (8000dc8 <HAL_RCC_OscConfig+0x330>)
 8000d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d24:	2202      	movs	r2, #2
 8000d26:	4013      	ands	r3, r2
 8000d28:	d1f1      	bne.n	8000d0e <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	2204      	movs	r2, #4
 8000d30:	4013      	ands	r3, r2
 8000d32:	d100      	bne.n	8000d36 <HAL_RCC_OscConfig+0x29e>
 8000d34:	e0b6      	b.n	8000ea4 <HAL_RCC_OscConfig+0x40c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000d36:	231f      	movs	r3, #31
 8000d38:	18fb      	adds	r3, r7, r3
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000d3e:	4b22      	ldr	r3, [pc, #136]	; (8000dc8 <HAL_RCC_OscConfig+0x330>)
 8000d40:	69da      	ldr	r2, [r3, #28]
 8000d42:	2380      	movs	r3, #128	; 0x80
 8000d44:	055b      	lsls	r3, r3, #21
 8000d46:	4013      	ands	r3, r2
 8000d48:	d111      	bne.n	8000d6e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000d4a:	4b1f      	ldr	r3, [pc, #124]	; (8000dc8 <HAL_RCC_OscConfig+0x330>)
 8000d4c:	69da      	ldr	r2, [r3, #28]
 8000d4e:	4b1e      	ldr	r3, [pc, #120]	; (8000dc8 <HAL_RCC_OscConfig+0x330>)
 8000d50:	2180      	movs	r1, #128	; 0x80
 8000d52:	0549      	lsls	r1, r1, #21
 8000d54:	430a      	orrs	r2, r1
 8000d56:	61da      	str	r2, [r3, #28]
 8000d58:	4b1b      	ldr	r3, [pc, #108]	; (8000dc8 <HAL_RCC_OscConfig+0x330>)
 8000d5a:	69da      	ldr	r2, [r3, #28]
 8000d5c:	2380      	movs	r3, #128	; 0x80
 8000d5e:	055b      	lsls	r3, r3, #21
 8000d60:	4013      	ands	r3, r2
 8000d62:	60fb      	str	r3, [r7, #12]
 8000d64:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8000d66:	231f      	movs	r3, #31
 8000d68:	18fb      	adds	r3, r7, r3
 8000d6a:	2201      	movs	r2, #1
 8000d6c:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d6e:	4b19      	ldr	r3, [pc, #100]	; (8000dd4 <HAL_RCC_OscConfig+0x33c>)
 8000d70:	681a      	ldr	r2, [r3, #0]
 8000d72:	2380      	movs	r3, #128	; 0x80
 8000d74:	005b      	lsls	r3, r3, #1
 8000d76:	4013      	ands	r3, r2
 8000d78:	d11a      	bne.n	8000db0 <HAL_RCC_OscConfig+0x318>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000d7a:	4b16      	ldr	r3, [pc, #88]	; (8000dd4 <HAL_RCC_OscConfig+0x33c>)
 8000d7c:	681a      	ldr	r2, [r3, #0]
 8000d7e:	4b15      	ldr	r3, [pc, #84]	; (8000dd4 <HAL_RCC_OscConfig+0x33c>)
 8000d80:	2180      	movs	r1, #128	; 0x80
 8000d82:	0049      	lsls	r1, r1, #1
 8000d84:	430a      	orrs	r2, r1
 8000d86:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000d88:	f7ff fb8e 	bl	80004a8 <HAL_GetTick>
 8000d8c:	0003      	movs	r3, r0
 8000d8e:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d90:	e008      	b.n	8000da4 <HAL_RCC_OscConfig+0x30c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000d92:	f7ff fb89 	bl	80004a8 <HAL_GetTick>
 8000d96:	0002      	movs	r2, r0
 8000d98:	69bb      	ldr	r3, [r7, #24]
 8000d9a:	1ad3      	subs	r3, r2, r3
 8000d9c:	2b64      	cmp	r3, #100	; 0x64
 8000d9e:	d901      	bls.n	8000da4 <HAL_RCC_OscConfig+0x30c>
        {
          return HAL_TIMEOUT;
 8000da0:	2303      	movs	r3, #3
 8000da2:	e186      	b.n	80010b2 <HAL_RCC_OscConfig+0x61a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000da4:	4b0b      	ldr	r3, [pc, #44]	; (8000dd4 <HAL_RCC_OscConfig+0x33c>)
 8000da6:	681a      	ldr	r2, [r3, #0]
 8000da8:	2380      	movs	r3, #128	; 0x80
 8000daa:	005b      	lsls	r3, r3, #1
 8000dac:	4013      	ands	r3, r2
 8000dae:	d0f0      	beq.n	8000d92 <HAL_RCC_OscConfig+0x2fa>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	689b      	ldr	r3, [r3, #8]
 8000db4:	2b01      	cmp	r3, #1
 8000db6:	d10f      	bne.n	8000dd8 <HAL_RCC_OscConfig+0x340>
 8000db8:	4b03      	ldr	r3, [pc, #12]	; (8000dc8 <HAL_RCC_OscConfig+0x330>)
 8000dba:	6a1a      	ldr	r2, [r3, #32]
 8000dbc:	4b02      	ldr	r3, [pc, #8]	; (8000dc8 <HAL_RCC_OscConfig+0x330>)
 8000dbe:	2101      	movs	r1, #1
 8000dc0:	430a      	orrs	r2, r1
 8000dc2:	621a      	str	r2, [r3, #32]
 8000dc4:	e036      	b.n	8000e34 <HAL_RCC_OscConfig+0x39c>
 8000dc6:	46c0      	nop			; (mov r8, r8)
 8000dc8:	40021000 	.word	0x40021000
 8000dcc:	fffeffff 	.word	0xfffeffff
 8000dd0:	fffbffff 	.word	0xfffbffff
 8000dd4:	40007000 	.word	0x40007000
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	689b      	ldr	r3, [r3, #8]
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d10c      	bne.n	8000dfa <HAL_RCC_OscConfig+0x362>
 8000de0:	4bb6      	ldr	r3, [pc, #728]	; (80010bc <HAL_RCC_OscConfig+0x624>)
 8000de2:	6a1a      	ldr	r2, [r3, #32]
 8000de4:	4bb5      	ldr	r3, [pc, #724]	; (80010bc <HAL_RCC_OscConfig+0x624>)
 8000de6:	2101      	movs	r1, #1
 8000de8:	438a      	bics	r2, r1
 8000dea:	621a      	str	r2, [r3, #32]
 8000dec:	4bb3      	ldr	r3, [pc, #716]	; (80010bc <HAL_RCC_OscConfig+0x624>)
 8000dee:	6a1a      	ldr	r2, [r3, #32]
 8000df0:	4bb2      	ldr	r3, [pc, #712]	; (80010bc <HAL_RCC_OscConfig+0x624>)
 8000df2:	2104      	movs	r1, #4
 8000df4:	438a      	bics	r2, r1
 8000df6:	621a      	str	r2, [r3, #32]
 8000df8:	e01c      	b.n	8000e34 <HAL_RCC_OscConfig+0x39c>
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	689b      	ldr	r3, [r3, #8]
 8000dfe:	2b05      	cmp	r3, #5
 8000e00:	d10c      	bne.n	8000e1c <HAL_RCC_OscConfig+0x384>
 8000e02:	4bae      	ldr	r3, [pc, #696]	; (80010bc <HAL_RCC_OscConfig+0x624>)
 8000e04:	6a1a      	ldr	r2, [r3, #32]
 8000e06:	4bad      	ldr	r3, [pc, #692]	; (80010bc <HAL_RCC_OscConfig+0x624>)
 8000e08:	2104      	movs	r1, #4
 8000e0a:	430a      	orrs	r2, r1
 8000e0c:	621a      	str	r2, [r3, #32]
 8000e0e:	4bab      	ldr	r3, [pc, #684]	; (80010bc <HAL_RCC_OscConfig+0x624>)
 8000e10:	6a1a      	ldr	r2, [r3, #32]
 8000e12:	4baa      	ldr	r3, [pc, #680]	; (80010bc <HAL_RCC_OscConfig+0x624>)
 8000e14:	2101      	movs	r1, #1
 8000e16:	430a      	orrs	r2, r1
 8000e18:	621a      	str	r2, [r3, #32]
 8000e1a:	e00b      	b.n	8000e34 <HAL_RCC_OscConfig+0x39c>
 8000e1c:	4ba7      	ldr	r3, [pc, #668]	; (80010bc <HAL_RCC_OscConfig+0x624>)
 8000e1e:	6a1a      	ldr	r2, [r3, #32]
 8000e20:	4ba6      	ldr	r3, [pc, #664]	; (80010bc <HAL_RCC_OscConfig+0x624>)
 8000e22:	2101      	movs	r1, #1
 8000e24:	438a      	bics	r2, r1
 8000e26:	621a      	str	r2, [r3, #32]
 8000e28:	4ba4      	ldr	r3, [pc, #656]	; (80010bc <HAL_RCC_OscConfig+0x624>)
 8000e2a:	6a1a      	ldr	r2, [r3, #32]
 8000e2c:	4ba3      	ldr	r3, [pc, #652]	; (80010bc <HAL_RCC_OscConfig+0x624>)
 8000e2e:	2104      	movs	r1, #4
 8000e30:	438a      	bics	r2, r1
 8000e32:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	689b      	ldr	r3, [r3, #8]
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d014      	beq.n	8000e66 <HAL_RCC_OscConfig+0x3ce>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e3c:	f7ff fb34 	bl	80004a8 <HAL_GetTick>
 8000e40:	0003      	movs	r3, r0
 8000e42:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e44:	e009      	b.n	8000e5a <HAL_RCC_OscConfig+0x3c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000e46:	f7ff fb2f 	bl	80004a8 <HAL_GetTick>
 8000e4a:	0002      	movs	r2, r0
 8000e4c:	69bb      	ldr	r3, [r7, #24]
 8000e4e:	1ad3      	subs	r3, r2, r3
 8000e50:	4a9b      	ldr	r2, [pc, #620]	; (80010c0 <HAL_RCC_OscConfig+0x628>)
 8000e52:	4293      	cmp	r3, r2
 8000e54:	d901      	bls.n	8000e5a <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8000e56:	2303      	movs	r3, #3
 8000e58:	e12b      	b.n	80010b2 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e5a:	4b98      	ldr	r3, [pc, #608]	; (80010bc <HAL_RCC_OscConfig+0x624>)
 8000e5c:	6a1b      	ldr	r3, [r3, #32]
 8000e5e:	2202      	movs	r2, #2
 8000e60:	4013      	ands	r3, r2
 8000e62:	d0f0      	beq.n	8000e46 <HAL_RCC_OscConfig+0x3ae>
 8000e64:	e013      	b.n	8000e8e <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e66:	f7ff fb1f 	bl	80004a8 <HAL_GetTick>
 8000e6a:	0003      	movs	r3, r0
 8000e6c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000e6e:	e009      	b.n	8000e84 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000e70:	f7ff fb1a 	bl	80004a8 <HAL_GetTick>
 8000e74:	0002      	movs	r2, r0
 8000e76:	69bb      	ldr	r3, [r7, #24]
 8000e78:	1ad3      	subs	r3, r2, r3
 8000e7a:	4a91      	ldr	r2, [pc, #580]	; (80010c0 <HAL_RCC_OscConfig+0x628>)
 8000e7c:	4293      	cmp	r3, r2
 8000e7e:	d901      	bls.n	8000e84 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8000e80:	2303      	movs	r3, #3
 8000e82:	e116      	b.n	80010b2 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000e84:	4b8d      	ldr	r3, [pc, #564]	; (80010bc <HAL_RCC_OscConfig+0x624>)
 8000e86:	6a1b      	ldr	r3, [r3, #32]
 8000e88:	2202      	movs	r2, #2
 8000e8a:	4013      	ands	r3, r2
 8000e8c:	d1f0      	bne.n	8000e70 <HAL_RCC_OscConfig+0x3d8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8000e8e:	231f      	movs	r3, #31
 8000e90:	18fb      	adds	r3, r7, r3
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	2b01      	cmp	r3, #1
 8000e96:	d105      	bne.n	8000ea4 <HAL_RCC_OscConfig+0x40c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000e98:	4b88      	ldr	r3, [pc, #544]	; (80010bc <HAL_RCC_OscConfig+0x624>)
 8000e9a:	69da      	ldr	r2, [r3, #28]
 8000e9c:	4b87      	ldr	r3, [pc, #540]	; (80010bc <HAL_RCC_OscConfig+0x624>)
 8000e9e:	4989      	ldr	r1, [pc, #548]	; (80010c4 <HAL_RCC_OscConfig+0x62c>)
 8000ea0:	400a      	ands	r2, r1
 8000ea2:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	2210      	movs	r2, #16
 8000eaa:	4013      	ands	r3, r2
 8000eac:	d063      	beq.n	8000f76 <HAL_RCC_OscConfig+0x4de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	695b      	ldr	r3, [r3, #20]
 8000eb2:	2b01      	cmp	r3, #1
 8000eb4:	d12a      	bne.n	8000f0c <HAL_RCC_OscConfig+0x474>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8000eb6:	4b81      	ldr	r3, [pc, #516]	; (80010bc <HAL_RCC_OscConfig+0x624>)
 8000eb8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000eba:	4b80      	ldr	r3, [pc, #512]	; (80010bc <HAL_RCC_OscConfig+0x624>)
 8000ebc:	2104      	movs	r1, #4
 8000ebe:	430a      	orrs	r2, r1
 8000ec0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8000ec2:	4b7e      	ldr	r3, [pc, #504]	; (80010bc <HAL_RCC_OscConfig+0x624>)
 8000ec4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000ec6:	4b7d      	ldr	r3, [pc, #500]	; (80010bc <HAL_RCC_OscConfig+0x624>)
 8000ec8:	2101      	movs	r1, #1
 8000eca:	430a      	orrs	r2, r1
 8000ecc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ece:	f7ff faeb 	bl	80004a8 <HAL_GetTick>
 8000ed2:	0003      	movs	r3, r0
 8000ed4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000ed6:	e008      	b.n	8000eea <HAL_RCC_OscConfig+0x452>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000ed8:	f7ff fae6 	bl	80004a8 <HAL_GetTick>
 8000edc:	0002      	movs	r2, r0
 8000ede:	69bb      	ldr	r3, [r7, #24]
 8000ee0:	1ad3      	subs	r3, r2, r3
 8000ee2:	2b02      	cmp	r3, #2
 8000ee4:	d901      	bls.n	8000eea <HAL_RCC_OscConfig+0x452>
        {
          return HAL_TIMEOUT;
 8000ee6:	2303      	movs	r3, #3
 8000ee8:	e0e3      	b.n	80010b2 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000eea:	4b74      	ldr	r3, [pc, #464]	; (80010bc <HAL_RCC_OscConfig+0x624>)
 8000eec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000eee:	2202      	movs	r2, #2
 8000ef0:	4013      	ands	r3, r2
 8000ef2:	d0f1      	beq.n	8000ed8 <HAL_RCC_OscConfig+0x440>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8000ef4:	4b71      	ldr	r3, [pc, #452]	; (80010bc <HAL_RCC_OscConfig+0x624>)
 8000ef6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ef8:	22f8      	movs	r2, #248	; 0xf8
 8000efa:	4393      	bics	r3, r2
 8000efc:	0019      	movs	r1, r3
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	699b      	ldr	r3, [r3, #24]
 8000f02:	00da      	lsls	r2, r3, #3
 8000f04:	4b6d      	ldr	r3, [pc, #436]	; (80010bc <HAL_RCC_OscConfig+0x624>)
 8000f06:	430a      	orrs	r2, r1
 8000f08:	635a      	str	r2, [r3, #52]	; 0x34
 8000f0a:	e034      	b.n	8000f76 <HAL_RCC_OscConfig+0x4de>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	695b      	ldr	r3, [r3, #20]
 8000f10:	3305      	adds	r3, #5
 8000f12:	d111      	bne.n	8000f38 <HAL_RCC_OscConfig+0x4a0>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8000f14:	4b69      	ldr	r3, [pc, #420]	; (80010bc <HAL_RCC_OscConfig+0x624>)
 8000f16:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000f18:	4b68      	ldr	r3, [pc, #416]	; (80010bc <HAL_RCC_OscConfig+0x624>)
 8000f1a:	2104      	movs	r1, #4
 8000f1c:	438a      	bics	r2, r1
 8000f1e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8000f20:	4b66      	ldr	r3, [pc, #408]	; (80010bc <HAL_RCC_OscConfig+0x624>)
 8000f22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f24:	22f8      	movs	r2, #248	; 0xf8
 8000f26:	4393      	bics	r3, r2
 8000f28:	0019      	movs	r1, r3
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	699b      	ldr	r3, [r3, #24]
 8000f2e:	00da      	lsls	r2, r3, #3
 8000f30:	4b62      	ldr	r3, [pc, #392]	; (80010bc <HAL_RCC_OscConfig+0x624>)
 8000f32:	430a      	orrs	r2, r1
 8000f34:	635a      	str	r2, [r3, #52]	; 0x34
 8000f36:	e01e      	b.n	8000f76 <HAL_RCC_OscConfig+0x4de>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8000f38:	4b60      	ldr	r3, [pc, #384]	; (80010bc <HAL_RCC_OscConfig+0x624>)
 8000f3a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000f3c:	4b5f      	ldr	r3, [pc, #380]	; (80010bc <HAL_RCC_OscConfig+0x624>)
 8000f3e:	2104      	movs	r1, #4
 8000f40:	430a      	orrs	r2, r1
 8000f42:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8000f44:	4b5d      	ldr	r3, [pc, #372]	; (80010bc <HAL_RCC_OscConfig+0x624>)
 8000f46:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000f48:	4b5c      	ldr	r3, [pc, #368]	; (80010bc <HAL_RCC_OscConfig+0x624>)
 8000f4a:	2101      	movs	r1, #1
 8000f4c:	438a      	bics	r2, r1
 8000f4e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f50:	f7ff faaa 	bl	80004a8 <HAL_GetTick>
 8000f54:	0003      	movs	r3, r0
 8000f56:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8000f58:	e008      	b.n	8000f6c <HAL_RCC_OscConfig+0x4d4>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000f5a:	f7ff faa5 	bl	80004a8 <HAL_GetTick>
 8000f5e:	0002      	movs	r2, r0
 8000f60:	69bb      	ldr	r3, [r7, #24]
 8000f62:	1ad3      	subs	r3, r2, r3
 8000f64:	2b02      	cmp	r3, #2
 8000f66:	d901      	bls.n	8000f6c <HAL_RCC_OscConfig+0x4d4>
        {
          return HAL_TIMEOUT;
 8000f68:	2303      	movs	r3, #3
 8000f6a:	e0a2      	b.n	80010b2 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8000f6c:	4b53      	ldr	r3, [pc, #332]	; (80010bc <HAL_RCC_OscConfig+0x624>)
 8000f6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f70:	2202      	movs	r2, #2
 8000f72:	4013      	ands	r3, r2
 8000f74:	d1f1      	bne.n	8000f5a <HAL_RCC_OscConfig+0x4c2>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	6a1b      	ldr	r3, [r3, #32]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d100      	bne.n	8000f80 <HAL_RCC_OscConfig+0x4e8>
 8000f7e:	e097      	b.n	80010b0 <HAL_RCC_OscConfig+0x618>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000f80:	4b4e      	ldr	r3, [pc, #312]	; (80010bc <HAL_RCC_OscConfig+0x624>)
 8000f82:	685b      	ldr	r3, [r3, #4]
 8000f84:	220c      	movs	r2, #12
 8000f86:	4013      	ands	r3, r2
 8000f88:	2b08      	cmp	r3, #8
 8000f8a:	d100      	bne.n	8000f8e <HAL_RCC_OscConfig+0x4f6>
 8000f8c:	e06b      	b.n	8001066 <HAL_RCC_OscConfig+0x5ce>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	6a1b      	ldr	r3, [r3, #32]
 8000f92:	2b02      	cmp	r3, #2
 8000f94:	d14c      	bne.n	8001030 <HAL_RCC_OscConfig+0x598>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000f96:	4b49      	ldr	r3, [pc, #292]	; (80010bc <HAL_RCC_OscConfig+0x624>)
 8000f98:	681a      	ldr	r2, [r3, #0]
 8000f9a:	4b48      	ldr	r3, [pc, #288]	; (80010bc <HAL_RCC_OscConfig+0x624>)
 8000f9c:	494a      	ldr	r1, [pc, #296]	; (80010c8 <HAL_RCC_OscConfig+0x630>)
 8000f9e:	400a      	ands	r2, r1
 8000fa0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fa2:	f7ff fa81 	bl	80004a8 <HAL_GetTick>
 8000fa6:	0003      	movs	r3, r0
 8000fa8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000faa:	e008      	b.n	8000fbe <HAL_RCC_OscConfig+0x526>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000fac:	f7ff fa7c 	bl	80004a8 <HAL_GetTick>
 8000fb0:	0002      	movs	r2, r0
 8000fb2:	69bb      	ldr	r3, [r7, #24]
 8000fb4:	1ad3      	subs	r3, r2, r3
 8000fb6:	2b02      	cmp	r3, #2
 8000fb8:	d901      	bls.n	8000fbe <HAL_RCC_OscConfig+0x526>
          {
            return HAL_TIMEOUT;
 8000fba:	2303      	movs	r3, #3
 8000fbc:	e079      	b.n	80010b2 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000fbe:	4b3f      	ldr	r3, [pc, #252]	; (80010bc <HAL_RCC_OscConfig+0x624>)
 8000fc0:	681a      	ldr	r2, [r3, #0]
 8000fc2:	2380      	movs	r3, #128	; 0x80
 8000fc4:	049b      	lsls	r3, r3, #18
 8000fc6:	4013      	ands	r3, r2
 8000fc8:	d1f0      	bne.n	8000fac <HAL_RCC_OscConfig+0x514>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000fca:	4b3c      	ldr	r3, [pc, #240]	; (80010bc <HAL_RCC_OscConfig+0x624>)
 8000fcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fce:	220f      	movs	r2, #15
 8000fd0:	4393      	bics	r3, r2
 8000fd2:	0019      	movs	r1, r3
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000fd8:	4b38      	ldr	r3, [pc, #224]	; (80010bc <HAL_RCC_OscConfig+0x624>)
 8000fda:	430a      	orrs	r2, r1
 8000fdc:	62da      	str	r2, [r3, #44]	; 0x2c
 8000fde:	4b37      	ldr	r3, [pc, #220]	; (80010bc <HAL_RCC_OscConfig+0x624>)
 8000fe0:	685b      	ldr	r3, [r3, #4]
 8000fe2:	4a3a      	ldr	r2, [pc, #232]	; (80010cc <HAL_RCC_OscConfig+0x634>)
 8000fe4:	4013      	ands	r3, r2
 8000fe6:	0019      	movs	r1, r3
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ff0:	431a      	orrs	r2, r3
 8000ff2:	4b32      	ldr	r3, [pc, #200]	; (80010bc <HAL_RCC_OscConfig+0x624>)
 8000ff4:	430a      	orrs	r2, r1
 8000ff6:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000ff8:	4b30      	ldr	r3, [pc, #192]	; (80010bc <HAL_RCC_OscConfig+0x624>)
 8000ffa:	681a      	ldr	r2, [r3, #0]
 8000ffc:	4b2f      	ldr	r3, [pc, #188]	; (80010bc <HAL_RCC_OscConfig+0x624>)
 8000ffe:	2180      	movs	r1, #128	; 0x80
 8001000:	0449      	lsls	r1, r1, #17
 8001002:	430a      	orrs	r2, r1
 8001004:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001006:	f7ff fa4f 	bl	80004a8 <HAL_GetTick>
 800100a:	0003      	movs	r3, r0
 800100c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800100e:	e008      	b.n	8001022 <HAL_RCC_OscConfig+0x58a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001010:	f7ff fa4a 	bl	80004a8 <HAL_GetTick>
 8001014:	0002      	movs	r2, r0
 8001016:	69bb      	ldr	r3, [r7, #24]
 8001018:	1ad3      	subs	r3, r2, r3
 800101a:	2b02      	cmp	r3, #2
 800101c:	d901      	bls.n	8001022 <HAL_RCC_OscConfig+0x58a>
          {
            return HAL_TIMEOUT;
 800101e:	2303      	movs	r3, #3
 8001020:	e047      	b.n	80010b2 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001022:	4b26      	ldr	r3, [pc, #152]	; (80010bc <HAL_RCC_OscConfig+0x624>)
 8001024:	681a      	ldr	r2, [r3, #0]
 8001026:	2380      	movs	r3, #128	; 0x80
 8001028:	049b      	lsls	r3, r3, #18
 800102a:	4013      	ands	r3, r2
 800102c:	d0f0      	beq.n	8001010 <HAL_RCC_OscConfig+0x578>
 800102e:	e03f      	b.n	80010b0 <HAL_RCC_OscConfig+0x618>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001030:	4b22      	ldr	r3, [pc, #136]	; (80010bc <HAL_RCC_OscConfig+0x624>)
 8001032:	681a      	ldr	r2, [r3, #0]
 8001034:	4b21      	ldr	r3, [pc, #132]	; (80010bc <HAL_RCC_OscConfig+0x624>)
 8001036:	4924      	ldr	r1, [pc, #144]	; (80010c8 <HAL_RCC_OscConfig+0x630>)
 8001038:	400a      	ands	r2, r1
 800103a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800103c:	f7ff fa34 	bl	80004a8 <HAL_GetTick>
 8001040:	0003      	movs	r3, r0
 8001042:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001044:	e008      	b.n	8001058 <HAL_RCC_OscConfig+0x5c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001046:	f7ff fa2f 	bl	80004a8 <HAL_GetTick>
 800104a:	0002      	movs	r2, r0
 800104c:	69bb      	ldr	r3, [r7, #24]
 800104e:	1ad3      	subs	r3, r2, r3
 8001050:	2b02      	cmp	r3, #2
 8001052:	d901      	bls.n	8001058 <HAL_RCC_OscConfig+0x5c0>
          {
            return HAL_TIMEOUT;
 8001054:	2303      	movs	r3, #3
 8001056:	e02c      	b.n	80010b2 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001058:	4b18      	ldr	r3, [pc, #96]	; (80010bc <HAL_RCC_OscConfig+0x624>)
 800105a:	681a      	ldr	r2, [r3, #0]
 800105c:	2380      	movs	r3, #128	; 0x80
 800105e:	049b      	lsls	r3, r3, #18
 8001060:	4013      	ands	r3, r2
 8001062:	d1f0      	bne.n	8001046 <HAL_RCC_OscConfig+0x5ae>
 8001064:	e024      	b.n	80010b0 <HAL_RCC_OscConfig+0x618>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	6a1b      	ldr	r3, [r3, #32]
 800106a:	2b01      	cmp	r3, #1
 800106c:	d101      	bne.n	8001072 <HAL_RCC_OscConfig+0x5da>
      {
        return HAL_ERROR;
 800106e:	2301      	movs	r3, #1
 8001070:	e01f      	b.n	80010b2 <HAL_RCC_OscConfig+0x61a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001072:	4b12      	ldr	r3, [pc, #72]	; (80010bc <HAL_RCC_OscConfig+0x624>)
 8001074:	685b      	ldr	r3, [r3, #4]
 8001076:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001078:	4b10      	ldr	r3, [pc, #64]	; (80010bc <HAL_RCC_OscConfig+0x624>)
 800107a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800107c:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800107e:	697a      	ldr	r2, [r7, #20]
 8001080:	2380      	movs	r3, #128	; 0x80
 8001082:	025b      	lsls	r3, r3, #9
 8001084:	401a      	ands	r2, r3
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800108a:	429a      	cmp	r2, r3
 800108c:	d10e      	bne.n	80010ac <HAL_RCC_OscConfig+0x614>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800108e:	693b      	ldr	r3, [r7, #16]
 8001090:	220f      	movs	r2, #15
 8001092:	401a      	ands	r2, r3
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001098:	429a      	cmp	r2, r3
 800109a:	d107      	bne.n	80010ac <HAL_RCC_OscConfig+0x614>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800109c:	697a      	ldr	r2, [r7, #20]
 800109e:	23f0      	movs	r3, #240	; 0xf0
 80010a0:	039b      	lsls	r3, r3, #14
 80010a2:	401a      	ands	r2, r3
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80010a8:	429a      	cmp	r2, r3
 80010aa:	d001      	beq.n	80010b0 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_ERROR;
 80010ac:	2301      	movs	r3, #1
 80010ae:	e000      	b.n	80010b2 <HAL_RCC_OscConfig+0x61a>
        }
      }
    }
  }

  return HAL_OK;
 80010b0:	2300      	movs	r3, #0
}
 80010b2:	0018      	movs	r0, r3
 80010b4:	46bd      	mov	sp, r7
 80010b6:	b008      	add	sp, #32
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	46c0      	nop			; (mov r8, r8)
 80010bc:	40021000 	.word	0x40021000
 80010c0:	00001388 	.word	0x00001388
 80010c4:	efffffff 	.word	0xefffffff
 80010c8:	feffffff 	.word	0xfeffffff
 80010cc:	ffc2ffff 	.word	0xffc2ffff

080010d0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b084      	sub	sp, #16
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
 80010d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d101      	bne.n	80010e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80010e0:	2301      	movs	r3, #1
 80010e2:	e0b3      	b.n	800124c <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80010e4:	4b5b      	ldr	r3, [pc, #364]	; (8001254 <HAL_RCC_ClockConfig+0x184>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	2201      	movs	r2, #1
 80010ea:	4013      	ands	r3, r2
 80010ec:	683a      	ldr	r2, [r7, #0]
 80010ee:	429a      	cmp	r2, r3
 80010f0:	d911      	bls.n	8001116 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010f2:	4b58      	ldr	r3, [pc, #352]	; (8001254 <HAL_RCC_ClockConfig+0x184>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	2201      	movs	r2, #1
 80010f8:	4393      	bics	r3, r2
 80010fa:	0019      	movs	r1, r3
 80010fc:	4b55      	ldr	r3, [pc, #340]	; (8001254 <HAL_RCC_ClockConfig+0x184>)
 80010fe:	683a      	ldr	r2, [r7, #0]
 8001100:	430a      	orrs	r2, r1
 8001102:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001104:	4b53      	ldr	r3, [pc, #332]	; (8001254 <HAL_RCC_ClockConfig+0x184>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	2201      	movs	r2, #1
 800110a:	4013      	ands	r3, r2
 800110c:	683a      	ldr	r2, [r7, #0]
 800110e:	429a      	cmp	r2, r3
 8001110:	d001      	beq.n	8001116 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001112:	2301      	movs	r3, #1
 8001114:	e09a      	b.n	800124c <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	2202      	movs	r2, #2
 800111c:	4013      	ands	r3, r2
 800111e:	d015      	beq.n	800114c <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	2204      	movs	r2, #4
 8001126:	4013      	ands	r3, r2
 8001128:	d006      	beq.n	8001138 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800112a:	4b4b      	ldr	r3, [pc, #300]	; (8001258 <HAL_RCC_ClockConfig+0x188>)
 800112c:	685a      	ldr	r2, [r3, #4]
 800112e:	4b4a      	ldr	r3, [pc, #296]	; (8001258 <HAL_RCC_ClockConfig+0x188>)
 8001130:	21e0      	movs	r1, #224	; 0xe0
 8001132:	00c9      	lsls	r1, r1, #3
 8001134:	430a      	orrs	r2, r1
 8001136:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001138:	4b47      	ldr	r3, [pc, #284]	; (8001258 <HAL_RCC_ClockConfig+0x188>)
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	22f0      	movs	r2, #240	; 0xf0
 800113e:	4393      	bics	r3, r2
 8001140:	0019      	movs	r1, r3
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	689a      	ldr	r2, [r3, #8]
 8001146:	4b44      	ldr	r3, [pc, #272]	; (8001258 <HAL_RCC_ClockConfig+0x188>)
 8001148:	430a      	orrs	r2, r1
 800114a:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	2201      	movs	r2, #1
 8001152:	4013      	ands	r3, r2
 8001154:	d040      	beq.n	80011d8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	685b      	ldr	r3, [r3, #4]
 800115a:	2b01      	cmp	r3, #1
 800115c:	d107      	bne.n	800116e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800115e:	4b3e      	ldr	r3, [pc, #248]	; (8001258 <HAL_RCC_ClockConfig+0x188>)
 8001160:	681a      	ldr	r2, [r3, #0]
 8001162:	2380      	movs	r3, #128	; 0x80
 8001164:	029b      	lsls	r3, r3, #10
 8001166:	4013      	ands	r3, r2
 8001168:	d114      	bne.n	8001194 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800116a:	2301      	movs	r3, #1
 800116c:	e06e      	b.n	800124c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	2b02      	cmp	r3, #2
 8001174:	d107      	bne.n	8001186 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001176:	4b38      	ldr	r3, [pc, #224]	; (8001258 <HAL_RCC_ClockConfig+0x188>)
 8001178:	681a      	ldr	r2, [r3, #0]
 800117a:	2380      	movs	r3, #128	; 0x80
 800117c:	049b      	lsls	r3, r3, #18
 800117e:	4013      	ands	r3, r2
 8001180:	d108      	bne.n	8001194 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001182:	2301      	movs	r3, #1
 8001184:	e062      	b.n	800124c <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001186:	4b34      	ldr	r3, [pc, #208]	; (8001258 <HAL_RCC_ClockConfig+0x188>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	2202      	movs	r2, #2
 800118c:	4013      	ands	r3, r2
 800118e:	d101      	bne.n	8001194 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001190:	2301      	movs	r3, #1
 8001192:	e05b      	b.n	800124c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001194:	4b30      	ldr	r3, [pc, #192]	; (8001258 <HAL_RCC_ClockConfig+0x188>)
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	2203      	movs	r2, #3
 800119a:	4393      	bics	r3, r2
 800119c:	0019      	movs	r1, r3
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	685a      	ldr	r2, [r3, #4]
 80011a2:	4b2d      	ldr	r3, [pc, #180]	; (8001258 <HAL_RCC_ClockConfig+0x188>)
 80011a4:	430a      	orrs	r2, r1
 80011a6:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80011a8:	f7ff f97e 	bl	80004a8 <HAL_GetTick>
 80011ac:	0003      	movs	r3, r0
 80011ae:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80011b0:	e009      	b.n	80011c6 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80011b2:	f7ff f979 	bl	80004a8 <HAL_GetTick>
 80011b6:	0002      	movs	r2, r0
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	1ad3      	subs	r3, r2, r3
 80011bc:	4a27      	ldr	r2, [pc, #156]	; (800125c <HAL_RCC_ClockConfig+0x18c>)
 80011be:	4293      	cmp	r3, r2
 80011c0:	d901      	bls.n	80011c6 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 80011c2:	2303      	movs	r3, #3
 80011c4:	e042      	b.n	800124c <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80011c6:	4b24      	ldr	r3, [pc, #144]	; (8001258 <HAL_RCC_ClockConfig+0x188>)
 80011c8:	685b      	ldr	r3, [r3, #4]
 80011ca:	220c      	movs	r2, #12
 80011cc:	401a      	ands	r2, r3
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	009b      	lsls	r3, r3, #2
 80011d4:	429a      	cmp	r2, r3
 80011d6:	d1ec      	bne.n	80011b2 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80011d8:	4b1e      	ldr	r3, [pc, #120]	; (8001254 <HAL_RCC_ClockConfig+0x184>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	2201      	movs	r2, #1
 80011de:	4013      	ands	r3, r2
 80011e0:	683a      	ldr	r2, [r7, #0]
 80011e2:	429a      	cmp	r2, r3
 80011e4:	d211      	bcs.n	800120a <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011e6:	4b1b      	ldr	r3, [pc, #108]	; (8001254 <HAL_RCC_ClockConfig+0x184>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	2201      	movs	r2, #1
 80011ec:	4393      	bics	r3, r2
 80011ee:	0019      	movs	r1, r3
 80011f0:	4b18      	ldr	r3, [pc, #96]	; (8001254 <HAL_RCC_ClockConfig+0x184>)
 80011f2:	683a      	ldr	r2, [r7, #0]
 80011f4:	430a      	orrs	r2, r1
 80011f6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80011f8:	4b16      	ldr	r3, [pc, #88]	; (8001254 <HAL_RCC_ClockConfig+0x184>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	2201      	movs	r2, #1
 80011fe:	4013      	ands	r3, r2
 8001200:	683a      	ldr	r2, [r7, #0]
 8001202:	429a      	cmp	r2, r3
 8001204:	d001      	beq.n	800120a <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8001206:	2301      	movs	r3, #1
 8001208:	e020      	b.n	800124c <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	2204      	movs	r2, #4
 8001210:	4013      	ands	r3, r2
 8001212:	d009      	beq.n	8001228 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001214:	4b10      	ldr	r3, [pc, #64]	; (8001258 <HAL_RCC_ClockConfig+0x188>)
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	4a11      	ldr	r2, [pc, #68]	; (8001260 <HAL_RCC_ClockConfig+0x190>)
 800121a:	4013      	ands	r3, r2
 800121c:	0019      	movs	r1, r3
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	68da      	ldr	r2, [r3, #12]
 8001222:	4b0d      	ldr	r3, [pc, #52]	; (8001258 <HAL_RCC_ClockConfig+0x188>)
 8001224:	430a      	orrs	r2, r1
 8001226:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001228:	f000 f82e 	bl	8001288 <HAL_RCC_GetSysClockFreq>
 800122c:	0001      	movs	r1, r0
 800122e:	4b0a      	ldr	r3, [pc, #40]	; (8001258 <HAL_RCC_ClockConfig+0x188>)
 8001230:	685b      	ldr	r3, [r3, #4]
 8001232:	091b      	lsrs	r3, r3, #4
 8001234:	220f      	movs	r2, #15
 8001236:	4013      	ands	r3, r2
 8001238:	4a0a      	ldr	r2, [pc, #40]	; (8001264 <HAL_RCC_ClockConfig+0x194>)
 800123a:	5cd3      	ldrb	r3, [r2, r3]
 800123c:	000a      	movs	r2, r1
 800123e:	40da      	lsrs	r2, r3
 8001240:	4b09      	ldr	r3, [pc, #36]	; (8001268 <HAL_RCC_ClockConfig+0x198>)
 8001242:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001244:	2000      	movs	r0, #0
 8001246:	f7ff f8e9 	bl	800041c <HAL_InitTick>
  
  return HAL_OK;
 800124a:	2300      	movs	r3, #0
}
 800124c:	0018      	movs	r0, r3
 800124e:	46bd      	mov	sp, r7
 8001250:	b004      	add	sp, #16
 8001252:	bd80      	pop	{r7, pc}
 8001254:	40022000 	.word	0x40022000
 8001258:	40021000 	.word	0x40021000
 800125c:	00001388 	.word	0x00001388
 8001260:	fffff8ff 	.word	0xfffff8ff
 8001264:	0800401c 	.word	0x0800401c
 8001268:	20000008 	.word	0x20000008

0800126c <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to 
  *         the Cortex-M0 NMI (Non-Maskable Interrupt) exception vector.  
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSON) ;
 8001270:	4b04      	ldr	r3, [pc, #16]	; (8001284 <HAL_RCC_EnableCSS+0x18>)
 8001272:	681a      	ldr	r2, [r3, #0]
 8001274:	4b03      	ldr	r3, [pc, #12]	; (8001284 <HAL_RCC_EnableCSS+0x18>)
 8001276:	2180      	movs	r1, #128	; 0x80
 8001278:	0309      	lsls	r1, r1, #12
 800127a:	430a      	orrs	r2, r1
 800127c:	601a      	str	r2, [r3, #0]
}
 800127e:	46c0      	nop			; (mov r8, r8)
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}
 8001284:	40021000 	.word	0x40021000

08001288 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001288:	b590      	push	{r4, r7, lr}
 800128a:	b08f      	sub	sp, #60	; 0x3c
 800128c:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800128e:	2314      	movs	r3, #20
 8001290:	18fb      	adds	r3, r7, r3
 8001292:	4a2b      	ldr	r2, [pc, #172]	; (8001340 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001294:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001296:	c313      	stmia	r3!, {r0, r1, r4}
 8001298:	6812      	ldr	r2, [r2, #0]
 800129a:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 800129c:	1d3b      	adds	r3, r7, #4
 800129e:	4a29      	ldr	r2, [pc, #164]	; (8001344 <HAL_RCC_GetSysClockFreq+0xbc>)
 80012a0:	ca13      	ldmia	r2!, {r0, r1, r4}
 80012a2:	c313      	stmia	r3!, {r0, r1, r4}
 80012a4:	6812      	ldr	r2, [r2, #0]
 80012a6:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80012a8:	2300      	movs	r3, #0
 80012aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80012ac:	2300      	movs	r3, #0
 80012ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80012b0:	2300      	movs	r3, #0
 80012b2:	637b      	str	r3, [r7, #52]	; 0x34
 80012b4:	2300      	movs	r3, #0
 80012b6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 80012b8:	2300      	movs	r3, #0
 80012ba:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 80012bc:	4b22      	ldr	r3, [pc, #136]	; (8001348 <HAL_RCC_GetSysClockFreq+0xc0>)
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80012c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012c4:	220c      	movs	r2, #12
 80012c6:	4013      	ands	r3, r2
 80012c8:	2b04      	cmp	r3, #4
 80012ca:	d002      	beq.n	80012d2 <HAL_RCC_GetSysClockFreq+0x4a>
 80012cc:	2b08      	cmp	r3, #8
 80012ce:	d003      	beq.n	80012d8 <HAL_RCC_GetSysClockFreq+0x50>
 80012d0:	e02d      	b.n	800132e <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80012d2:	4b1e      	ldr	r3, [pc, #120]	; (800134c <HAL_RCC_GetSysClockFreq+0xc4>)
 80012d4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80012d6:	e02d      	b.n	8001334 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80012d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012da:	0c9b      	lsrs	r3, r3, #18
 80012dc:	220f      	movs	r2, #15
 80012de:	4013      	ands	r3, r2
 80012e0:	2214      	movs	r2, #20
 80012e2:	18ba      	adds	r2, r7, r2
 80012e4:	5cd3      	ldrb	r3, [r2, r3]
 80012e6:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80012e8:	4b17      	ldr	r3, [pc, #92]	; (8001348 <HAL_RCC_GetSysClockFreq+0xc0>)
 80012ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012ec:	220f      	movs	r2, #15
 80012ee:	4013      	ands	r3, r2
 80012f0:	1d3a      	adds	r2, r7, #4
 80012f2:	5cd3      	ldrb	r3, [r2, r3]
 80012f4:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80012f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80012f8:	2380      	movs	r3, #128	; 0x80
 80012fa:	025b      	lsls	r3, r3, #9
 80012fc:	4013      	ands	r3, r2
 80012fe:	d009      	beq.n	8001314 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001300:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001302:	4812      	ldr	r0, [pc, #72]	; (800134c <HAL_RCC_GetSysClockFreq+0xc4>)
 8001304:	f7fe ff00 	bl	8000108 <__udivsi3>
 8001308:	0003      	movs	r3, r0
 800130a:	001a      	movs	r2, r3
 800130c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800130e:	4353      	muls	r3, r2
 8001310:	637b      	str	r3, [r7, #52]	; 0x34
 8001312:	e009      	b.n	8001328 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001314:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001316:	000a      	movs	r2, r1
 8001318:	0152      	lsls	r2, r2, #5
 800131a:	1a52      	subs	r2, r2, r1
 800131c:	0193      	lsls	r3, r2, #6
 800131e:	1a9b      	subs	r3, r3, r2
 8001320:	00db      	lsls	r3, r3, #3
 8001322:	185b      	adds	r3, r3, r1
 8001324:	021b      	lsls	r3, r3, #8
 8001326:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8001328:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800132a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800132c:	e002      	b.n	8001334 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800132e:	4b07      	ldr	r3, [pc, #28]	; (800134c <HAL_RCC_GetSysClockFreq+0xc4>)
 8001330:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001332:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001334:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001336:	0018      	movs	r0, r3
 8001338:	46bd      	mov	sp, r7
 800133a:	b00f      	add	sp, #60	; 0x3c
 800133c:	bd90      	pop	{r4, r7, pc}
 800133e:	46c0      	nop			; (mov r8, r8)
 8001340:	08003e34 	.word	0x08003e34
 8001344:	08003e44 	.word	0x08003e44
 8001348:	40021000 	.word	0x40021000
 800134c:	007a1200 	.word	0x007a1200

08001350 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001354:	4b02      	ldr	r3, [pc, #8]	; (8001360 <HAL_RCC_GetHCLKFreq+0x10>)
 8001356:	681b      	ldr	r3, [r3, #0]
}
 8001358:	0018      	movs	r0, r3
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
 800135e:	46c0      	nop			; (mov r8, r8)
 8001360:	20000008 	.word	0x20000008

08001364 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001368:	f7ff fff2 	bl	8001350 <HAL_RCC_GetHCLKFreq>
 800136c:	0001      	movs	r1, r0
 800136e:	4b06      	ldr	r3, [pc, #24]	; (8001388 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001370:	685b      	ldr	r3, [r3, #4]
 8001372:	0a1b      	lsrs	r3, r3, #8
 8001374:	2207      	movs	r2, #7
 8001376:	4013      	ands	r3, r2
 8001378:	4a04      	ldr	r2, [pc, #16]	; (800138c <HAL_RCC_GetPCLK1Freq+0x28>)
 800137a:	5cd3      	ldrb	r3, [r2, r3]
 800137c:	40d9      	lsrs	r1, r3
 800137e:	000b      	movs	r3, r1
}    
 8001380:	0018      	movs	r0, r3
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
 8001386:	46c0      	nop			; (mov r8, r8)
 8001388:	40021000 	.word	0x40021000
 800138c:	0800402c 	.word	0x0800402c

08001390 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b086      	sub	sp, #24
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001398:	2300      	movs	r3, #0
 800139a:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 800139c:	2300      	movs	r3, #0
 800139e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681a      	ldr	r2, [r3, #0]
 80013a4:	2380      	movs	r3, #128	; 0x80
 80013a6:	025b      	lsls	r3, r3, #9
 80013a8:	4013      	ands	r3, r2
 80013aa:	d100      	bne.n	80013ae <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80013ac:	e08f      	b.n	80014ce <HAL_RCCEx_PeriphCLKConfig+0x13e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 80013ae:	2317      	movs	r3, #23
 80013b0:	18fb      	adds	r3, r7, r3
 80013b2:	2200      	movs	r2, #0
 80013b4:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80013b6:	4b5f      	ldr	r3, [pc, #380]	; (8001534 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80013b8:	69da      	ldr	r2, [r3, #28]
 80013ba:	2380      	movs	r3, #128	; 0x80
 80013bc:	055b      	lsls	r3, r3, #21
 80013be:	4013      	ands	r3, r2
 80013c0:	d111      	bne.n	80013e6 <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80013c2:	4b5c      	ldr	r3, [pc, #368]	; (8001534 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80013c4:	69da      	ldr	r2, [r3, #28]
 80013c6:	4b5b      	ldr	r3, [pc, #364]	; (8001534 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80013c8:	2180      	movs	r1, #128	; 0x80
 80013ca:	0549      	lsls	r1, r1, #21
 80013cc:	430a      	orrs	r2, r1
 80013ce:	61da      	str	r2, [r3, #28]
 80013d0:	4b58      	ldr	r3, [pc, #352]	; (8001534 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80013d2:	69da      	ldr	r2, [r3, #28]
 80013d4:	2380      	movs	r3, #128	; 0x80
 80013d6:	055b      	lsls	r3, r3, #21
 80013d8:	4013      	ands	r3, r2
 80013da:	60bb      	str	r3, [r7, #8]
 80013dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80013de:	2317      	movs	r3, #23
 80013e0:	18fb      	adds	r3, r7, r3
 80013e2:	2201      	movs	r2, #1
 80013e4:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013e6:	4b54      	ldr	r3, [pc, #336]	; (8001538 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80013e8:	681a      	ldr	r2, [r3, #0]
 80013ea:	2380      	movs	r3, #128	; 0x80
 80013ec:	005b      	lsls	r3, r3, #1
 80013ee:	4013      	ands	r3, r2
 80013f0:	d11a      	bne.n	8001428 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80013f2:	4b51      	ldr	r3, [pc, #324]	; (8001538 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80013f4:	681a      	ldr	r2, [r3, #0]
 80013f6:	4b50      	ldr	r3, [pc, #320]	; (8001538 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80013f8:	2180      	movs	r1, #128	; 0x80
 80013fa:	0049      	lsls	r1, r1, #1
 80013fc:	430a      	orrs	r2, r1
 80013fe:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001400:	f7ff f852 	bl	80004a8 <HAL_GetTick>
 8001404:	0003      	movs	r3, r0
 8001406:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001408:	e008      	b.n	800141c <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800140a:	f7ff f84d 	bl	80004a8 <HAL_GetTick>
 800140e:	0002      	movs	r2, r0
 8001410:	693b      	ldr	r3, [r7, #16]
 8001412:	1ad3      	subs	r3, r2, r3
 8001414:	2b64      	cmp	r3, #100	; 0x64
 8001416:	d901      	bls.n	800141c <HAL_RCCEx_PeriphCLKConfig+0x8c>
        {
          return HAL_TIMEOUT;
 8001418:	2303      	movs	r3, #3
 800141a:	e087      	b.n	800152c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800141c:	4b46      	ldr	r3, [pc, #280]	; (8001538 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800141e:	681a      	ldr	r2, [r3, #0]
 8001420:	2380      	movs	r3, #128	; 0x80
 8001422:	005b      	lsls	r3, r3, #1
 8001424:	4013      	ands	r3, r2
 8001426:	d0f0      	beq.n	800140a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001428:	4b42      	ldr	r3, [pc, #264]	; (8001534 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800142a:	6a1a      	ldr	r2, [r3, #32]
 800142c:	23c0      	movs	r3, #192	; 0xc0
 800142e:	009b      	lsls	r3, r3, #2
 8001430:	4013      	ands	r3, r2
 8001432:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	2b00      	cmp	r3, #0
 8001438:	d034      	beq.n	80014a4 <HAL_RCCEx_PeriphCLKConfig+0x114>
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	685a      	ldr	r2, [r3, #4]
 800143e:	23c0      	movs	r3, #192	; 0xc0
 8001440:	009b      	lsls	r3, r3, #2
 8001442:	4013      	ands	r3, r2
 8001444:	68fa      	ldr	r2, [r7, #12]
 8001446:	429a      	cmp	r2, r3
 8001448:	d02c      	beq.n	80014a4 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800144a:	4b3a      	ldr	r3, [pc, #232]	; (8001534 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800144c:	6a1b      	ldr	r3, [r3, #32]
 800144e:	4a3b      	ldr	r2, [pc, #236]	; (800153c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001450:	4013      	ands	r3, r2
 8001452:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001454:	4b37      	ldr	r3, [pc, #220]	; (8001534 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001456:	6a1a      	ldr	r2, [r3, #32]
 8001458:	4b36      	ldr	r3, [pc, #216]	; (8001534 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800145a:	2180      	movs	r1, #128	; 0x80
 800145c:	0249      	lsls	r1, r1, #9
 800145e:	430a      	orrs	r2, r1
 8001460:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001462:	4b34      	ldr	r3, [pc, #208]	; (8001534 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001464:	6a1a      	ldr	r2, [r3, #32]
 8001466:	4b33      	ldr	r3, [pc, #204]	; (8001534 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001468:	4935      	ldr	r1, [pc, #212]	; (8001540 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800146a:	400a      	ands	r2, r1
 800146c:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800146e:	4b31      	ldr	r3, [pc, #196]	; (8001534 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001470:	68fa      	ldr	r2, [r7, #12]
 8001472:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	2201      	movs	r2, #1
 8001478:	4013      	ands	r3, r2
 800147a:	d013      	beq.n	80014a4 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800147c:	f7ff f814 	bl	80004a8 <HAL_GetTick>
 8001480:	0003      	movs	r3, r0
 8001482:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001484:	e009      	b.n	800149a <HAL_RCCEx_PeriphCLKConfig+0x10a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001486:	f7ff f80f 	bl	80004a8 <HAL_GetTick>
 800148a:	0002      	movs	r2, r0
 800148c:	693b      	ldr	r3, [r7, #16]
 800148e:	1ad3      	subs	r3, r2, r3
 8001490:	4a2c      	ldr	r2, [pc, #176]	; (8001544 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8001492:	4293      	cmp	r3, r2
 8001494:	d901      	bls.n	800149a <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            return HAL_TIMEOUT;
 8001496:	2303      	movs	r3, #3
 8001498:	e048      	b.n	800152c <HAL_RCCEx_PeriphCLKConfig+0x19c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800149a:	4b26      	ldr	r3, [pc, #152]	; (8001534 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800149c:	6a1b      	ldr	r3, [r3, #32]
 800149e:	2202      	movs	r2, #2
 80014a0:	4013      	ands	r3, r2
 80014a2:	d0f0      	beq.n	8001486 <HAL_RCCEx_PeriphCLKConfig+0xf6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80014a4:	4b23      	ldr	r3, [pc, #140]	; (8001534 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80014a6:	6a1b      	ldr	r3, [r3, #32]
 80014a8:	4a24      	ldr	r2, [pc, #144]	; (800153c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80014aa:	4013      	ands	r3, r2
 80014ac:	0019      	movs	r1, r3
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	685a      	ldr	r2, [r3, #4]
 80014b2:	4b20      	ldr	r3, [pc, #128]	; (8001534 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80014b4:	430a      	orrs	r2, r1
 80014b6:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80014b8:	2317      	movs	r3, #23
 80014ba:	18fb      	adds	r3, r7, r3
 80014bc:	781b      	ldrb	r3, [r3, #0]
 80014be:	2b01      	cmp	r3, #1
 80014c0:	d105      	bne.n	80014ce <HAL_RCCEx_PeriphCLKConfig+0x13e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80014c2:	4b1c      	ldr	r3, [pc, #112]	; (8001534 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80014c4:	69da      	ldr	r2, [r3, #28]
 80014c6:	4b1b      	ldr	r3, [pc, #108]	; (8001534 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80014c8:	491f      	ldr	r1, [pc, #124]	; (8001548 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80014ca:	400a      	ands	r2, r1
 80014cc:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	2201      	movs	r2, #1
 80014d4:	4013      	ands	r3, r2
 80014d6:	d009      	beq.n	80014ec <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80014d8:	4b16      	ldr	r3, [pc, #88]	; (8001534 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80014da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014dc:	2203      	movs	r2, #3
 80014de:	4393      	bics	r3, r2
 80014e0:	0019      	movs	r1, r3
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	689a      	ldr	r2, [r3, #8]
 80014e6:	4b13      	ldr	r3, [pc, #76]	; (8001534 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80014e8:	430a      	orrs	r2, r1
 80014ea:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	2220      	movs	r2, #32
 80014f2:	4013      	ands	r3, r2
 80014f4:	d009      	beq.n	800150a <HAL_RCCEx_PeriphCLKConfig+0x17a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80014f6:	4b0f      	ldr	r3, [pc, #60]	; (8001534 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80014f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fa:	2210      	movs	r2, #16
 80014fc:	4393      	bics	r3, r2
 80014fe:	0019      	movs	r1, r3
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	68da      	ldr	r2, [r3, #12]
 8001504:	4b0b      	ldr	r3, [pc, #44]	; (8001534 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001506:	430a      	orrs	r2, r1
 8001508:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681a      	ldr	r2, [r3, #0]
 800150e:	2380      	movs	r3, #128	; 0x80
 8001510:	00db      	lsls	r3, r3, #3
 8001512:	4013      	ands	r3, r2
 8001514:	d009      	beq.n	800152a <HAL_RCCEx_PeriphCLKConfig+0x19a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001516:	4b07      	ldr	r3, [pc, #28]	; (8001534 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151a:	2240      	movs	r2, #64	; 0x40
 800151c:	4393      	bics	r3, r2
 800151e:	0019      	movs	r1, r3
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	691a      	ldr	r2, [r3, #16]
 8001524:	4b03      	ldr	r3, [pc, #12]	; (8001534 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001526:	430a      	orrs	r2, r1
 8001528:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 800152a:	2300      	movs	r3, #0
}
 800152c:	0018      	movs	r0, r3
 800152e:	46bd      	mov	sp, r7
 8001530:	b006      	add	sp, #24
 8001532:	bd80      	pop	{r7, pc}
 8001534:	40021000 	.word	0x40021000
 8001538:	40007000 	.word	0x40007000
 800153c:	fffffcff 	.word	0xfffffcff
 8001540:	fffeffff 	.word	0xfffeffff
 8001544:	00001388 	.word	0x00001388
 8001548:	efffffff 	.word	0xefffffff

0800154c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b082      	sub	sp, #8
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d101      	bne.n	800155e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800155a:	2301      	movs	r3, #1
 800155c:	e042      	b.n	80015e4 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	223d      	movs	r2, #61	; 0x3d
 8001562:	5c9b      	ldrb	r3, [r3, r2]
 8001564:	b2db      	uxtb	r3, r3
 8001566:	2b00      	cmp	r3, #0
 8001568:	d107      	bne.n	800157a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	223c      	movs	r2, #60	; 0x3c
 800156e:	2100      	movs	r1, #0
 8001570:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	0018      	movs	r0, r3
 8001576:	f002 fa9d 	bl	8003ab4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	223d      	movs	r2, #61	; 0x3d
 800157e:	2102      	movs	r1, #2
 8001580:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681a      	ldr	r2, [r3, #0]
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	3304      	adds	r3, #4
 800158a:	0019      	movs	r1, r3
 800158c:	0010      	movs	r0, r2
 800158e:	f000 fb15 	bl	8001bbc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	2246      	movs	r2, #70	; 0x46
 8001596:	2101      	movs	r1, #1
 8001598:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	223e      	movs	r2, #62	; 0x3e
 800159e:	2101      	movs	r1, #1
 80015a0:	5499      	strb	r1, [r3, r2]
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	223f      	movs	r2, #63	; 0x3f
 80015a6:	2101      	movs	r1, #1
 80015a8:	5499      	strb	r1, [r3, r2]
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	2240      	movs	r2, #64	; 0x40
 80015ae:	2101      	movs	r1, #1
 80015b0:	5499      	strb	r1, [r3, r2]
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	2241      	movs	r2, #65	; 0x41
 80015b6:	2101      	movs	r1, #1
 80015b8:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	2242      	movs	r2, #66	; 0x42
 80015be:	2101      	movs	r1, #1
 80015c0:	5499      	strb	r1, [r3, r2]
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	2243      	movs	r2, #67	; 0x43
 80015c6:	2101      	movs	r1, #1
 80015c8:	5499      	strb	r1, [r3, r2]
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	2244      	movs	r2, #68	; 0x44
 80015ce:	2101      	movs	r1, #1
 80015d0:	5499      	strb	r1, [r3, r2]
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	2245      	movs	r2, #69	; 0x45
 80015d6:	2101      	movs	r1, #1
 80015d8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	223d      	movs	r2, #61	; 0x3d
 80015de:	2101      	movs	r1, #1
 80015e0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80015e2:	2300      	movs	r3, #0
}
 80015e4:	0018      	movs	r0, r3
 80015e6:	46bd      	mov	sp, r7
 80015e8:	b002      	add	sp, #8
 80015ea:	bd80      	pop	{r7, pc}

080015ec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b084      	sub	sp, #16
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	223d      	movs	r2, #61	; 0x3d
 80015f8:	5c9b      	ldrb	r3, [r3, r2]
 80015fa:	b2db      	uxtb	r3, r3
 80015fc:	2b01      	cmp	r3, #1
 80015fe:	d001      	beq.n	8001604 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001600:	2301      	movs	r3, #1
 8001602:	e03b      	b.n	800167c <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	223d      	movs	r2, #61	; 0x3d
 8001608:	2102      	movs	r1, #2
 800160a:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	68da      	ldr	r2, [r3, #12]
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	2101      	movs	r1, #1
 8001618:	430a      	orrs	r2, r1
 800161a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4a18      	ldr	r2, [pc, #96]	; (8001684 <HAL_TIM_Base_Start_IT+0x98>)
 8001622:	4293      	cmp	r3, r2
 8001624:	d00f      	beq.n	8001646 <HAL_TIM_Base_Start_IT+0x5a>
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681a      	ldr	r2, [r3, #0]
 800162a:	2380      	movs	r3, #128	; 0x80
 800162c:	05db      	lsls	r3, r3, #23
 800162e:	429a      	cmp	r2, r3
 8001630:	d009      	beq.n	8001646 <HAL_TIM_Base_Start_IT+0x5a>
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	4a14      	ldr	r2, [pc, #80]	; (8001688 <HAL_TIM_Base_Start_IT+0x9c>)
 8001638:	4293      	cmp	r3, r2
 800163a:	d004      	beq.n	8001646 <HAL_TIM_Base_Start_IT+0x5a>
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4a12      	ldr	r2, [pc, #72]	; (800168c <HAL_TIM_Base_Start_IT+0xa0>)
 8001642:	4293      	cmp	r3, r2
 8001644:	d111      	bne.n	800166a <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	689b      	ldr	r3, [r3, #8]
 800164c:	2207      	movs	r2, #7
 800164e:	4013      	ands	r3, r2
 8001650:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	2b06      	cmp	r3, #6
 8001656:	d010      	beq.n	800167a <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	681a      	ldr	r2, [r3, #0]
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	2101      	movs	r1, #1
 8001664:	430a      	orrs	r2, r1
 8001666:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001668:	e007      	b.n	800167a <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	681a      	ldr	r2, [r3, #0]
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	2101      	movs	r1, #1
 8001676:	430a      	orrs	r2, r1
 8001678:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800167a:	2300      	movs	r3, #0
}
 800167c:	0018      	movs	r0, r3
 800167e:	46bd      	mov	sp, r7
 8001680:	b004      	add	sp, #16
 8001682:	bd80      	pop	{r7, pc}
 8001684:	40012c00 	.word	0x40012c00
 8001688:	40000400 	.word	0x40000400
 800168c:	40014000 	.word	0x40014000

08001690 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b082      	sub	sp, #8
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d101      	bne.n	80016a2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800169e:	2301      	movs	r3, #1
 80016a0:	e042      	b.n	8001728 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	223d      	movs	r2, #61	; 0x3d
 80016a6:	5c9b      	ldrb	r3, [r3, r2]
 80016a8:	b2db      	uxtb	r3, r3
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d107      	bne.n	80016be <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	223c      	movs	r2, #60	; 0x3c
 80016b2:	2100      	movs	r1, #0
 80016b4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	0018      	movs	r0, r3
 80016ba:	f000 f839 	bl	8001730 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	223d      	movs	r2, #61	; 0x3d
 80016c2:	2102      	movs	r1, #2
 80016c4:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681a      	ldr	r2, [r3, #0]
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	3304      	adds	r3, #4
 80016ce:	0019      	movs	r1, r3
 80016d0:	0010      	movs	r0, r2
 80016d2:	f000 fa73 	bl	8001bbc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	2246      	movs	r2, #70	; 0x46
 80016da:	2101      	movs	r1, #1
 80016dc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	223e      	movs	r2, #62	; 0x3e
 80016e2:	2101      	movs	r1, #1
 80016e4:	5499      	strb	r1, [r3, r2]
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	223f      	movs	r2, #63	; 0x3f
 80016ea:	2101      	movs	r1, #1
 80016ec:	5499      	strb	r1, [r3, r2]
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	2240      	movs	r2, #64	; 0x40
 80016f2:	2101      	movs	r1, #1
 80016f4:	5499      	strb	r1, [r3, r2]
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	2241      	movs	r2, #65	; 0x41
 80016fa:	2101      	movs	r1, #1
 80016fc:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	2242      	movs	r2, #66	; 0x42
 8001702:	2101      	movs	r1, #1
 8001704:	5499      	strb	r1, [r3, r2]
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	2243      	movs	r2, #67	; 0x43
 800170a:	2101      	movs	r1, #1
 800170c:	5499      	strb	r1, [r3, r2]
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	2244      	movs	r2, #68	; 0x44
 8001712:	2101      	movs	r1, #1
 8001714:	5499      	strb	r1, [r3, r2]
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	2245      	movs	r2, #69	; 0x45
 800171a:	2101      	movs	r1, #1
 800171c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	223d      	movs	r2, #61	; 0x3d
 8001722:	2101      	movs	r1, #1
 8001724:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001726:	2300      	movs	r3, #0
}
 8001728:	0018      	movs	r0, r3
 800172a:	46bd      	mov	sp, r7
 800172c:	b002      	add	sp, #8
 800172e:	bd80      	pop	{r7, pc}

08001730 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b082      	sub	sp, #8
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001738:	46c0      	nop			; (mov r8, r8)
 800173a:	46bd      	mov	sp, r7
 800173c:	b002      	add	sp, #8
 800173e:	bd80      	pop	{r7, pc}

08001740 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b084      	sub	sp, #16
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
 8001748:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	2b00      	cmp	r3, #0
 800174e:	d108      	bne.n	8001762 <HAL_TIM_PWM_Start+0x22>
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	223e      	movs	r2, #62	; 0x3e
 8001754:	5c9b      	ldrb	r3, [r3, r2]
 8001756:	b2db      	uxtb	r3, r3
 8001758:	3b01      	subs	r3, #1
 800175a:	1e5a      	subs	r2, r3, #1
 800175c:	4193      	sbcs	r3, r2
 800175e:	b2db      	uxtb	r3, r3
 8001760:	e01f      	b.n	80017a2 <HAL_TIM_PWM_Start+0x62>
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	2b04      	cmp	r3, #4
 8001766:	d108      	bne.n	800177a <HAL_TIM_PWM_Start+0x3a>
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	223f      	movs	r2, #63	; 0x3f
 800176c:	5c9b      	ldrb	r3, [r3, r2]
 800176e:	b2db      	uxtb	r3, r3
 8001770:	3b01      	subs	r3, #1
 8001772:	1e5a      	subs	r2, r3, #1
 8001774:	4193      	sbcs	r3, r2
 8001776:	b2db      	uxtb	r3, r3
 8001778:	e013      	b.n	80017a2 <HAL_TIM_PWM_Start+0x62>
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	2b08      	cmp	r3, #8
 800177e:	d108      	bne.n	8001792 <HAL_TIM_PWM_Start+0x52>
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	2240      	movs	r2, #64	; 0x40
 8001784:	5c9b      	ldrb	r3, [r3, r2]
 8001786:	b2db      	uxtb	r3, r3
 8001788:	3b01      	subs	r3, #1
 800178a:	1e5a      	subs	r2, r3, #1
 800178c:	4193      	sbcs	r3, r2
 800178e:	b2db      	uxtb	r3, r3
 8001790:	e007      	b.n	80017a2 <HAL_TIM_PWM_Start+0x62>
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	2241      	movs	r2, #65	; 0x41
 8001796:	5c9b      	ldrb	r3, [r3, r2]
 8001798:	b2db      	uxtb	r3, r3
 800179a:	3b01      	subs	r3, #1
 800179c:	1e5a      	subs	r2, r3, #1
 800179e:	4193      	sbcs	r3, r2
 80017a0:	b2db      	uxtb	r3, r3
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d001      	beq.n	80017aa <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 80017a6:	2301      	movs	r3, #1
 80017a8:	e074      	b.n	8001894 <HAL_TIM_PWM_Start+0x154>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d104      	bne.n	80017ba <HAL_TIM_PWM_Start+0x7a>
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	223e      	movs	r2, #62	; 0x3e
 80017b4:	2102      	movs	r1, #2
 80017b6:	5499      	strb	r1, [r3, r2]
 80017b8:	e013      	b.n	80017e2 <HAL_TIM_PWM_Start+0xa2>
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	2b04      	cmp	r3, #4
 80017be:	d104      	bne.n	80017ca <HAL_TIM_PWM_Start+0x8a>
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	223f      	movs	r2, #63	; 0x3f
 80017c4:	2102      	movs	r1, #2
 80017c6:	5499      	strb	r1, [r3, r2]
 80017c8:	e00b      	b.n	80017e2 <HAL_TIM_PWM_Start+0xa2>
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	2b08      	cmp	r3, #8
 80017ce:	d104      	bne.n	80017da <HAL_TIM_PWM_Start+0x9a>
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	2240      	movs	r2, #64	; 0x40
 80017d4:	2102      	movs	r1, #2
 80017d6:	5499      	strb	r1, [r3, r2]
 80017d8:	e003      	b.n	80017e2 <HAL_TIM_PWM_Start+0xa2>
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	2241      	movs	r2, #65	; 0x41
 80017de:	2102      	movs	r1, #2
 80017e0:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	6839      	ldr	r1, [r7, #0]
 80017e8:	2201      	movs	r2, #1
 80017ea:	0018      	movs	r0, r3
 80017ec:	f000 fcfc 	bl	80021e8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4a29      	ldr	r2, [pc, #164]	; (800189c <HAL_TIM_PWM_Start+0x15c>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d00e      	beq.n	8001818 <HAL_TIM_PWM_Start+0xd8>
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4a28      	ldr	r2, [pc, #160]	; (80018a0 <HAL_TIM_PWM_Start+0x160>)
 8001800:	4293      	cmp	r3, r2
 8001802:	d009      	beq.n	8001818 <HAL_TIM_PWM_Start+0xd8>
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4a26      	ldr	r2, [pc, #152]	; (80018a4 <HAL_TIM_PWM_Start+0x164>)
 800180a:	4293      	cmp	r3, r2
 800180c:	d004      	beq.n	8001818 <HAL_TIM_PWM_Start+0xd8>
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4a25      	ldr	r2, [pc, #148]	; (80018a8 <HAL_TIM_PWM_Start+0x168>)
 8001814:	4293      	cmp	r3, r2
 8001816:	d101      	bne.n	800181c <HAL_TIM_PWM_Start+0xdc>
 8001818:	2301      	movs	r3, #1
 800181a:	e000      	b.n	800181e <HAL_TIM_PWM_Start+0xde>
 800181c:	2300      	movs	r3, #0
 800181e:	2b00      	cmp	r3, #0
 8001820:	d008      	beq.n	8001834 <HAL_TIM_PWM_Start+0xf4>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	2180      	movs	r1, #128	; 0x80
 800182e:	0209      	lsls	r1, r1, #8
 8001830:	430a      	orrs	r2, r1
 8001832:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4a18      	ldr	r2, [pc, #96]	; (800189c <HAL_TIM_PWM_Start+0x15c>)
 800183a:	4293      	cmp	r3, r2
 800183c:	d00f      	beq.n	800185e <HAL_TIM_PWM_Start+0x11e>
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681a      	ldr	r2, [r3, #0]
 8001842:	2380      	movs	r3, #128	; 0x80
 8001844:	05db      	lsls	r3, r3, #23
 8001846:	429a      	cmp	r2, r3
 8001848:	d009      	beq.n	800185e <HAL_TIM_PWM_Start+0x11e>
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4a17      	ldr	r2, [pc, #92]	; (80018ac <HAL_TIM_PWM_Start+0x16c>)
 8001850:	4293      	cmp	r3, r2
 8001852:	d004      	beq.n	800185e <HAL_TIM_PWM_Start+0x11e>
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4a11      	ldr	r2, [pc, #68]	; (80018a0 <HAL_TIM_PWM_Start+0x160>)
 800185a:	4293      	cmp	r3, r2
 800185c:	d111      	bne.n	8001882 <HAL_TIM_PWM_Start+0x142>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	689b      	ldr	r3, [r3, #8]
 8001864:	2207      	movs	r2, #7
 8001866:	4013      	ands	r3, r2
 8001868:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	2b06      	cmp	r3, #6
 800186e:	d010      	beq.n	8001892 <HAL_TIM_PWM_Start+0x152>
    {
      __HAL_TIM_ENABLE(htim);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	681a      	ldr	r2, [r3, #0]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	2101      	movs	r1, #1
 800187c:	430a      	orrs	r2, r1
 800187e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001880:	e007      	b.n	8001892 <HAL_TIM_PWM_Start+0x152>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	681a      	ldr	r2, [r3, #0]
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	2101      	movs	r1, #1
 800188e:	430a      	orrs	r2, r1
 8001890:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001892:	2300      	movs	r3, #0
}
 8001894:	0018      	movs	r0, r3
 8001896:	46bd      	mov	sp, r7
 8001898:	b004      	add	sp, #16
 800189a:	bd80      	pop	{r7, pc}
 800189c:	40012c00 	.word	0x40012c00
 80018a0:	40014000 	.word	0x40014000
 80018a4:	40014400 	.word	0x40014400
 80018a8:	40014800 	.word	0x40014800
 80018ac:	40000400 	.word	0x40000400

080018b0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b086      	sub	sp, #24
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	60f8      	str	r0, [r7, #12]
 80018b8:	60b9      	str	r1, [r7, #8]
 80018ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80018bc:	2317      	movs	r3, #23
 80018be:	18fb      	adds	r3, r7, r3
 80018c0:	2200      	movs	r2, #0
 80018c2:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	223c      	movs	r2, #60	; 0x3c
 80018c8:	5c9b      	ldrb	r3, [r3, r2]
 80018ca:	2b01      	cmp	r3, #1
 80018cc:	d101      	bne.n	80018d2 <HAL_TIM_PWM_ConfigChannel+0x22>
 80018ce:	2302      	movs	r3, #2
 80018d0:	e0a3      	b.n	8001a1a <HAL_TIM_PWM_ConfigChannel+0x16a>
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	223c      	movs	r2, #60	; 0x3c
 80018d6:	2101      	movs	r1, #1
 80018d8:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	2b04      	cmp	r3, #4
 80018de:	d029      	beq.n	8001934 <HAL_TIM_PWM_ConfigChannel+0x84>
 80018e0:	d802      	bhi.n	80018e8 <HAL_TIM_PWM_ConfigChannel+0x38>
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d005      	beq.n	80018f2 <HAL_TIM_PWM_ConfigChannel+0x42>
 80018e6:	e08c      	b.n	8001a02 <HAL_TIM_PWM_ConfigChannel+0x152>
 80018e8:	2b08      	cmp	r3, #8
 80018ea:	d046      	beq.n	800197a <HAL_TIM_PWM_ConfigChannel+0xca>
 80018ec:	2b0c      	cmp	r3, #12
 80018ee:	d065      	beq.n	80019bc <HAL_TIM_PWM_ConfigChannel+0x10c>
 80018f0:	e087      	b.n	8001a02 <HAL_TIM_PWM_ConfigChannel+0x152>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	68ba      	ldr	r2, [r7, #8]
 80018f8:	0011      	movs	r1, r2
 80018fa:	0018      	movs	r0, r3
 80018fc:	f000 f9de 	bl	8001cbc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	699a      	ldr	r2, [r3, #24]
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	2108      	movs	r1, #8
 800190c:	430a      	orrs	r2, r1
 800190e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	699a      	ldr	r2, [r3, #24]
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	2104      	movs	r1, #4
 800191c:	438a      	bics	r2, r1
 800191e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	6999      	ldr	r1, [r3, #24]
 8001926:	68bb      	ldr	r3, [r7, #8]
 8001928:	691a      	ldr	r2, [r3, #16]
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	430a      	orrs	r2, r1
 8001930:	619a      	str	r2, [r3, #24]
      break;
 8001932:	e06b      	b.n	8001a0c <HAL_TIM_PWM_ConfigChannel+0x15c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	68ba      	ldr	r2, [r7, #8]
 800193a:	0011      	movs	r1, r2
 800193c:	0018      	movs	r0, r3
 800193e:	f000 fa45 	bl	8001dcc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	699a      	ldr	r2, [r3, #24]
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	2180      	movs	r1, #128	; 0x80
 800194e:	0109      	lsls	r1, r1, #4
 8001950:	430a      	orrs	r2, r1
 8001952:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	699a      	ldr	r2, [r3, #24]
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4931      	ldr	r1, [pc, #196]	; (8001a24 <HAL_TIM_PWM_ConfigChannel+0x174>)
 8001960:	400a      	ands	r2, r1
 8001962:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	6999      	ldr	r1, [r3, #24]
 800196a:	68bb      	ldr	r3, [r7, #8]
 800196c:	691b      	ldr	r3, [r3, #16]
 800196e:	021a      	lsls	r2, r3, #8
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	430a      	orrs	r2, r1
 8001976:	619a      	str	r2, [r3, #24]
      break;
 8001978:	e048      	b.n	8001a0c <HAL_TIM_PWM_ConfigChannel+0x15c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	68ba      	ldr	r2, [r7, #8]
 8001980:	0011      	movs	r1, r2
 8001982:	0018      	movs	r0, r3
 8001984:	f000 faa6 	bl	8001ed4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	69da      	ldr	r2, [r3, #28]
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	2108      	movs	r1, #8
 8001994:	430a      	orrs	r2, r1
 8001996:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	69da      	ldr	r2, [r3, #28]
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	2104      	movs	r1, #4
 80019a4:	438a      	bics	r2, r1
 80019a6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	69d9      	ldr	r1, [r3, #28]
 80019ae:	68bb      	ldr	r3, [r7, #8]
 80019b0:	691a      	ldr	r2, [r3, #16]
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	430a      	orrs	r2, r1
 80019b8:	61da      	str	r2, [r3, #28]
      break;
 80019ba:	e027      	b.n	8001a0c <HAL_TIM_PWM_ConfigChannel+0x15c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	68ba      	ldr	r2, [r7, #8]
 80019c2:	0011      	movs	r1, r2
 80019c4:	0018      	movs	r0, r3
 80019c6:	f000 fb0b 	bl	8001fe0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	69da      	ldr	r2, [r3, #28]
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	2180      	movs	r1, #128	; 0x80
 80019d6:	0109      	lsls	r1, r1, #4
 80019d8:	430a      	orrs	r2, r1
 80019da:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	69da      	ldr	r2, [r3, #28]
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	490f      	ldr	r1, [pc, #60]	; (8001a24 <HAL_TIM_PWM_ConfigChannel+0x174>)
 80019e8:	400a      	ands	r2, r1
 80019ea:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	69d9      	ldr	r1, [r3, #28]
 80019f2:	68bb      	ldr	r3, [r7, #8]
 80019f4:	691b      	ldr	r3, [r3, #16]
 80019f6:	021a      	lsls	r2, r3, #8
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	430a      	orrs	r2, r1
 80019fe:	61da      	str	r2, [r3, #28]
      break;
 8001a00:	e004      	b.n	8001a0c <HAL_TIM_PWM_ConfigChannel+0x15c>
    }

    default:
      status = HAL_ERROR;
 8001a02:	2317      	movs	r3, #23
 8001a04:	18fb      	adds	r3, r7, r3
 8001a06:	2201      	movs	r2, #1
 8001a08:	701a      	strb	r2, [r3, #0]
      break;
 8001a0a:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	223c      	movs	r2, #60	; 0x3c
 8001a10:	2100      	movs	r1, #0
 8001a12:	5499      	strb	r1, [r3, r2]

  return status;
 8001a14:	2317      	movs	r3, #23
 8001a16:	18fb      	adds	r3, r7, r3
 8001a18:	781b      	ldrb	r3, [r3, #0]
}
 8001a1a:	0018      	movs	r0, r3
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	b006      	add	sp, #24
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	46c0      	nop			; (mov r8, r8)
 8001a24:	fffffbff 	.word	0xfffffbff

08001a28 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b084      	sub	sp, #16
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
 8001a30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001a32:	230f      	movs	r3, #15
 8001a34:	18fb      	adds	r3, r7, r3
 8001a36:	2200      	movs	r2, #0
 8001a38:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	223c      	movs	r2, #60	; 0x3c
 8001a3e:	5c9b      	ldrb	r3, [r3, r2]
 8001a40:	2b01      	cmp	r3, #1
 8001a42:	d101      	bne.n	8001a48 <HAL_TIM_ConfigClockSource+0x20>
 8001a44:	2302      	movs	r3, #2
 8001a46:	e0b2      	b.n	8001bae <HAL_TIM_ConfigClockSource+0x186>
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	223c      	movs	r2, #60	; 0x3c
 8001a4c:	2101      	movs	r1, #1
 8001a4e:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	223d      	movs	r2, #61	; 0x3d
 8001a54:	2102      	movs	r1, #2
 8001a56:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	689b      	ldr	r3, [r3, #8]
 8001a5e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001a60:	68bb      	ldr	r3, [r7, #8]
 8001a62:	2277      	movs	r2, #119	; 0x77
 8001a64:	4393      	bics	r3, r2
 8001a66:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001a68:	68bb      	ldr	r3, [r7, #8]
 8001a6a:	4a53      	ldr	r2, [pc, #332]	; (8001bb8 <HAL_TIM_ConfigClockSource+0x190>)
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	68ba      	ldr	r2, [r7, #8]
 8001a76:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	2b40      	cmp	r3, #64	; 0x40
 8001a7e:	d100      	bne.n	8001a82 <HAL_TIM_ConfigClockSource+0x5a>
 8001a80:	e06b      	b.n	8001b5a <HAL_TIM_ConfigClockSource+0x132>
 8001a82:	d80e      	bhi.n	8001aa2 <HAL_TIM_ConfigClockSource+0x7a>
 8001a84:	2b10      	cmp	r3, #16
 8001a86:	d100      	bne.n	8001a8a <HAL_TIM_ConfigClockSource+0x62>
 8001a88:	e077      	b.n	8001b7a <HAL_TIM_ConfigClockSource+0x152>
 8001a8a:	d803      	bhi.n	8001a94 <HAL_TIM_ConfigClockSource+0x6c>
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d100      	bne.n	8001a92 <HAL_TIM_ConfigClockSource+0x6a>
 8001a90:	e073      	b.n	8001b7a <HAL_TIM_ConfigClockSource+0x152>
 8001a92:	e07b      	b.n	8001b8c <HAL_TIM_ConfigClockSource+0x164>
 8001a94:	2b20      	cmp	r3, #32
 8001a96:	d100      	bne.n	8001a9a <HAL_TIM_ConfigClockSource+0x72>
 8001a98:	e06f      	b.n	8001b7a <HAL_TIM_ConfigClockSource+0x152>
 8001a9a:	2b30      	cmp	r3, #48	; 0x30
 8001a9c:	d100      	bne.n	8001aa0 <HAL_TIM_ConfigClockSource+0x78>
 8001a9e:	e06c      	b.n	8001b7a <HAL_TIM_ConfigClockSource+0x152>
 8001aa0:	e074      	b.n	8001b8c <HAL_TIM_ConfigClockSource+0x164>
 8001aa2:	2b70      	cmp	r3, #112	; 0x70
 8001aa4:	d00e      	beq.n	8001ac4 <HAL_TIM_ConfigClockSource+0x9c>
 8001aa6:	d804      	bhi.n	8001ab2 <HAL_TIM_ConfigClockSource+0x8a>
 8001aa8:	2b50      	cmp	r3, #80	; 0x50
 8001aaa:	d036      	beq.n	8001b1a <HAL_TIM_ConfigClockSource+0xf2>
 8001aac:	2b60      	cmp	r3, #96	; 0x60
 8001aae:	d044      	beq.n	8001b3a <HAL_TIM_ConfigClockSource+0x112>
 8001ab0:	e06c      	b.n	8001b8c <HAL_TIM_ConfigClockSource+0x164>
 8001ab2:	2280      	movs	r2, #128	; 0x80
 8001ab4:	0152      	lsls	r2, r2, #5
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d06d      	beq.n	8001b96 <HAL_TIM_ConfigClockSource+0x16e>
 8001aba:	2280      	movs	r2, #128	; 0x80
 8001abc:	0192      	lsls	r2, r2, #6
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d017      	beq.n	8001af2 <HAL_TIM_ConfigClockSource+0xca>
 8001ac2:	e063      	b.n	8001b8c <HAL_TIM_ConfigClockSource+0x164>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6818      	ldr	r0, [r3, #0]
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	6899      	ldr	r1, [r3, #8]
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	685a      	ldr	r2, [r3, #4]
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	68db      	ldr	r3, [r3, #12]
 8001ad4:	f000 fb68 	bl	80021a8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	689b      	ldr	r3, [r3, #8]
 8001ade:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001ae0:	68bb      	ldr	r3, [r7, #8]
 8001ae2:	2277      	movs	r2, #119	; 0x77
 8001ae4:	4313      	orrs	r3, r2
 8001ae6:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	68ba      	ldr	r2, [r7, #8]
 8001aee:	609a      	str	r2, [r3, #8]
      break;
 8001af0:	e052      	b.n	8001b98 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6818      	ldr	r0, [r3, #0]
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	6899      	ldr	r1, [r3, #8]
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	685a      	ldr	r2, [r3, #4]
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	68db      	ldr	r3, [r3, #12]
 8001b02:	f000 fb51 	bl	80021a8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	689a      	ldr	r2, [r3, #8]
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	2180      	movs	r1, #128	; 0x80
 8001b12:	01c9      	lsls	r1, r1, #7
 8001b14:	430a      	orrs	r2, r1
 8001b16:	609a      	str	r2, [r3, #8]
      break;
 8001b18:	e03e      	b.n	8001b98 <HAL_TIM_ConfigClockSource+0x170>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6818      	ldr	r0, [r3, #0]
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	6859      	ldr	r1, [r3, #4]
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	68db      	ldr	r3, [r3, #12]
 8001b26:	001a      	movs	r2, r3
 8001b28:	f000 fac4 	bl	80020b4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	2150      	movs	r1, #80	; 0x50
 8001b32:	0018      	movs	r0, r3
 8001b34:	f000 fb1e 	bl	8002174 <TIM_ITRx_SetConfig>
      break;
 8001b38:	e02e      	b.n	8001b98 <HAL_TIM_ConfigClockSource+0x170>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6818      	ldr	r0, [r3, #0]
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	6859      	ldr	r1, [r3, #4]
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	68db      	ldr	r3, [r3, #12]
 8001b46:	001a      	movs	r2, r3
 8001b48:	f000 fae2 	bl	8002110 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	2160      	movs	r1, #96	; 0x60
 8001b52:	0018      	movs	r0, r3
 8001b54:	f000 fb0e 	bl	8002174 <TIM_ITRx_SetConfig>
      break;
 8001b58:	e01e      	b.n	8001b98 <HAL_TIM_ConfigClockSource+0x170>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6818      	ldr	r0, [r3, #0]
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	6859      	ldr	r1, [r3, #4]
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	68db      	ldr	r3, [r3, #12]
 8001b66:	001a      	movs	r2, r3
 8001b68:	f000 faa4 	bl	80020b4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	2140      	movs	r1, #64	; 0x40
 8001b72:	0018      	movs	r0, r3
 8001b74:	f000 fafe 	bl	8002174 <TIM_ITRx_SetConfig>
      break;
 8001b78:	e00e      	b.n	8001b98 <HAL_TIM_ConfigClockSource+0x170>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681a      	ldr	r2, [r3, #0]
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	0019      	movs	r1, r3
 8001b84:	0010      	movs	r0, r2
 8001b86:	f000 faf5 	bl	8002174 <TIM_ITRx_SetConfig>
      break;
 8001b8a:	e005      	b.n	8001b98 <HAL_TIM_ConfigClockSource+0x170>
    }

    default:
      status = HAL_ERROR;
 8001b8c:	230f      	movs	r3, #15
 8001b8e:	18fb      	adds	r3, r7, r3
 8001b90:	2201      	movs	r2, #1
 8001b92:	701a      	strb	r2, [r3, #0]
      break;
 8001b94:	e000      	b.n	8001b98 <HAL_TIM_ConfigClockSource+0x170>
      break;
 8001b96:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	223d      	movs	r2, #61	; 0x3d
 8001b9c:	2101      	movs	r1, #1
 8001b9e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	223c      	movs	r2, #60	; 0x3c
 8001ba4:	2100      	movs	r1, #0
 8001ba6:	5499      	strb	r1, [r3, r2]

  return status;
 8001ba8:	230f      	movs	r3, #15
 8001baa:	18fb      	adds	r3, r7, r3
 8001bac:	781b      	ldrb	r3, [r3, #0]
}
 8001bae:	0018      	movs	r0, r3
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	b004      	add	sp, #16
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	46c0      	nop			; (mov r8, r8)
 8001bb8:	ffff00ff 	.word	0xffff00ff

08001bbc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b084      	sub	sp, #16
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
 8001bc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	4a34      	ldr	r2, [pc, #208]	; (8001ca0 <TIM_Base_SetConfig+0xe4>)
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	d008      	beq.n	8001be6 <TIM_Base_SetConfig+0x2a>
 8001bd4:	687a      	ldr	r2, [r7, #4]
 8001bd6:	2380      	movs	r3, #128	; 0x80
 8001bd8:	05db      	lsls	r3, r3, #23
 8001bda:	429a      	cmp	r2, r3
 8001bdc:	d003      	beq.n	8001be6 <TIM_Base_SetConfig+0x2a>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	4a30      	ldr	r2, [pc, #192]	; (8001ca4 <TIM_Base_SetConfig+0xe8>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d108      	bne.n	8001bf8 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	2270      	movs	r2, #112	; 0x70
 8001bea:	4393      	bics	r3, r2
 8001bec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	68fa      	ldr	r2, [r7, #12]
 8001bf4:	4313      	orrs	r3, r2
 8001bf6:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	4a29      	ldr	r2, [pc, #164]	; (8001ca0 <TIM_Base_SetConfig+0xe4>)
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	d018      	beq.n	8001c32 <TIM_Base_SetConfig+0x76>
 8001c00:	687a      	ldr	r2, [r7, #4]
 8001c02:	2380      	movs	r3, #128	; 0x80
 8001c04:	05db      	lsls	r3, r3, #23
 8001c06:	429a      	cmp	r2, r3
 8001c08:	d013      	beq.n	8001c32 <TIM_Base_SetConfig+0x76>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	4a25      	ldr	r2, [pc, #148]	; (8001ca4 <TIM_Base_SetConfig+0xe8>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d00f      	beq.n	8001c32 <TIM_Base_SetConfig+0x76>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	4a24      	ldr	r2, [pc, #144]	; (8001ca8 <TIM_Base_SetConfig+0xec>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d00b      	beq.n	8001c32 <TIM_Base_SetConfig+0x76>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	4a23      	ldr	r2, [pc, #140]	; (8001cac <TIM_Base_SetConfig+0xf0>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d007      	beq.n	8001c32 <TIM_Base_SetConfig+0x76>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	4a22      	ldr	r2, [pc, #136]	; (8001cb0 <TIM_Base_SetConfig+0xf4>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d003      	beq.n	8001c32 <TIM_Base_SetConfig+0x76>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	4a21      	ldr	r2, [pc, #132]	; (8001cb4 <TIM_Base_SetConfig+0xf8>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d108      	bne.n	8001c44 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	4a20      	ldr	r2, [pc, #128]	; (8001cb8 <TIM_Base_SetConfig+0xfc>)
 8001c36:	4013      	ands	r3, r2
 8001c38:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	68db      	ldr	r3, [r3, #12]
 8001c3e:	68fa      	ldr	r2, [r7, #12]
 8001c40:	4313      	orrs	r3, r2
 8001c42:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	2280      	movs	r2, #128	; 0x80
 8001c48:	4393      	bics	r3, r2
 8001c4a:	001a      	movs	r2, r3
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	695b      	ldr	r3, [r3, #20]
 8001c50:	4313      	orrs	r3, r2
 8001c52:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	68fa      	ldr	r2, [r7, #12]
 8001c58:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	689a      	ldr	r2, [r3, #8]
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	681a      	ldr	r2, [r3, #0]
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	4a0c      	ldr	r2, [pc, #48]	; (8001ca0 <TIM_Base_SetConfig+0xe4>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d00b      	beq.n	8001c8a <TIM_Base_SetConfig+0xce>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	4a0d      	ldr	r2, [pc, #52]	; (8001cac <TIM_Base_SetConfig+0xf0>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d007      	beq.n	8001c8a <TIM_Base_SetConfig+0xce>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	4a0c      	ldr	r2, [pc, #48]	; (8001cb0 <TIM_Base_SetConfig+0xf4>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d003      	beq.n	8001c8a <TIM_Base_SetConfig+0xce>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	4a0b      	ldr	r2, [pc, #44]	; (8001cb4 <TIM_Base_SetConfig+0xf8>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d103      	bne.n	8001c92 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	691a      	ldr	r2, [r3, #16]
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2201      	movs	r2, #1
 8001c96:	615a      	str	r2, [r3, #20]
}
 8001c98:	46c0      	nop			; (mov r8, r8)
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	b004      	add	sp, #16
 8001c9e:	bd80      	pop	{r7, pc}
 8001ca0:	40012c00 	.word	0x40012c00
 8001ca4:	40000400 	.word	0x40000400
 8001ca8:	40002000 	.word	0x40002000
 8001cac:	40014000 	.word	0x40014000
 8001cb0:	40014400 	.word	0x40014400
 8001cb4:	40014800 	.word	0x40014800
 8001cb8:	fffffcff 	.word	0xfffffcff

08001cbc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b086      	sub	sp, #24
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
 8001cc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6a1b      	ldr	r3, [r3, #32]
 8001cca:	2201      	movs	r2, #1
 8001ccc:	4393      	bics	r3, r2
 8001cce:	001a      	movs	r2, r3
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6a1b      	ldr	r3, [r3, #32]
 8001cd8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	699b      	ldr	r3, [r3, #24]
 8001ce4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	2270      	movs	r2, #112	; 0x70
 8001cea:	4393      	bics	r3, r2
 8001cec:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	2203      	movs	r2, #3
 8001cf2:	4393      	bics	r3, r2
 8001cf4:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	68fa      	ldr	r2, [r7, #12]
 8001cfc:	4313      	orrs	r3, r2
 8001cfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8001d00:	697b      	ldr	r3, [r7, #20]
 8001d02:	2202      	movs	r2, #2
 8001d04:	4393      	bics	r3, r2
 8001d06:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	689b      	ldr	r3, [r3, #8]
 8001d0c:	697a      	ldr	r2, [r7, #20]
 8001d0e:	4313      	orrs	r3, r2
 8001d10:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	4a27      	ldr	r2, [pc, #156]	; (8001db4 <TIM_OC1_SetConfig+0xf8>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d00b      	beq.n	8001d32 <TIM_OC1_SetConfig+0x76>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	4a26      	ldr	r2, [pc, #152]	; (8001db8 <TIM_OC1_SetConfig+0xfc>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d007      	beq.n	8001d32 <TIM_OC1_SetConfig+0x76>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	4a25      	ldr	r2, [pc, #148]	; (8001dbc <TIM_OC1_SetConfig+0x100>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d003      	beq.n	8001d32 <TIM_OC1_SetConfig+0x76>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	4a24      	ldr	r2, [pc, #144]	; (8001dc0 <TIM_OC1_SetConfig+0x104>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d10c      	bne.n	8001d4c <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8001d32:	697b      	ldr	r3, [r7, #20]
 8001d34:	2208      	movs	r2, #8
 8001d36:	4393      	bics	r3, r2
 8001d38:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	68db      	ldr	r3, [r3, #12]
 8001d3e:	697a      	ldr	r2, [r7, #20]
 8001d40:	4313      	orrs	r3, r2
 8001d42:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	2204      	movs	r2, #4
 8001d48:	4393      	bics	r3, r2
 8001d4a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	4a19      	ldr	r2, [pc, #100]	; (8001db4 <TIM_OC1_SetConfig+0xf8>)
 8001d50:	4293      	cmp	r3, r2
 8001d52:	d00b      	beq.n	8001d6c <TIM_OC1_SetConfig+0xb0>
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	4a18      	ldr	r2, [pc, #96]	; (8001db8 <TIM_OC1_SetConfig+0xfc>)
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	d007      	beq.n	8001d6c <TIM_OC1_SetConfig+0xb0>
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	4a17      	ldr	r2, [pc, #92]	; (8001dbc <TIM_OC1_SetConfig+0x100>)
 8001d60:	4293      	cmp	r3, r2
 8001d62:	d003      	beq.n	8001d6c <TIM_OC1_SetConfig+0xb0>
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	4a16      	ldr	r2, [pc, #88]	; (8001dc0 <TIM_OC1_SetConfig+0x104>)
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	d111      	bne.n	8001d90 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8001d6c:	693b      	ldr	r3, [r7, #16]
 8001d6e:	4a15      	ldr	r2, [pc, #84]	; (8001dc4 <TIM_OC1_SetConfig+0x108>)
 8001d70:	4013      	ands	r3, r2
 8001d72:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001d74:	693b      	ldr	r3, [r7, #16]
 8001d76:	4a14      	ldr	r2, [pc, #80]	; (8001dc8 <TIM_OC1_SetConfig+0x10c>)
 8001d78:	4013      	ands	r3, r2
 8001d7a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	695b      	ldr	r3, [r3, #20]
 8001d80:	693a      	ldr	r2, [r7, #16]
 8001d82:	4313      	orrs	r3, r2
 8001d84:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	699b      	ldr	r3, [r3, #24]
 8001d8a:	693a      	ldr	r2, [r7, #16]
 8001d8c:	4313      	orrs	r3, r2
 8001d8e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	693a      	ldr	r2, [r7, #16]
 8001d94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	68fa      	ldr	r2, [r7, #12]
 8001d9a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	685a      	ldr	r2, [r3, #4]
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	697a      	ldr	r2, [r7, #20]
 8001da8:	621a      	str	r2, [r3, #32]
}
 8001daa:	46c0      	nop			; (mov r8, r8)
 8001dac:	46bd      	mov	sp, r7
 8001dae:	b006      	add	sp, #24
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	46c0      	nop			; (mov r8, r8)
 8001db4:	40012c00 	.word	0x40012c00
 8001db8:	40014000 	.word	0x40014000
 8001dbc:	40014400 	.word	0x40014400
 8001dc0:	40014800 	.word	0x40014800
 8001dc4:	fffffeff 	.word	0xfffffeff
 8001dc8:	fffffdff 	.word	0xfffffdff

08001dcc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b086      	sub	sp, #24
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
 8001dd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6a1b      	ldr	r3, [r3, #32]
 8001dda:	2210      	movs	r2, #16
 8001ddc:	4393      	bics	r3, r2
 8001dde:	001a      	movs	r2, r3
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6a1b      	ldr	r3, [r3, #32]
 8001de8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	699b      	ldr	r3, [r3, #24]
 8001df4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	4a2e      	ldr	r2, [pc, #184]	; (8001eb4 <TIM_OC2_SetConfig+0xe8>)
 8001dfa:	4013      	ands	r3, r2
 8001dfc:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	4a2d      	ldr	r2, [pc, #180]	; (8001eb8 <TIM_OC2_SetConfig+0xec>)
 8001e02:	4013      	ands	r3, r2
 8001e04:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	021b      	lsls	r3, r3, #8
 8001e0c:	68fa      	ldr	r2, [r7, #12]
 8001e0e:	4313      	orrs	r3, r2
 8001e10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8001e12:	697b      	ldr	r3, [r7, #20]
 8001e14:	2220      	movs	r2, #32
 8001e16:	4393      	bics	r3, r2
 8001e18:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	689b      	ldr	r3, [r3, #8]
 8001e1e:	011b      	lsls	r3, r3, #4
 8001e20:	697a      	ldr	r2, [r7, #20]
 8001e22:	4313      	orrs	r3, r2
 8001e24:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	4a24      	ldr	r2, [pc, #144]	; (8001ebc <TIM_OC2_SetConfig+0xf0>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d10d      	bne.n	8001e4a <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8001e2e:	697b      	ldr	r3, [r7, #20]
 8001e30:	2280      	movs	r2, #128	; 0x80
 8001e32:	4393      	bics	r3, r2
 8001e34:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	68db      	ldr	r3, [r3, #12]
 8001e3a:	011b      	lsls	r3, r3, #4
 8001e3c:	697a      	ldr	r2, [r7, #20]
 8001e3e:	4313      	orrs	r3, r2
 8001e40:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8001e42:	697b      	ldr	r3, [r7, #20]
 8001e44:	2240      	movs	r2, #64	; 0x40
 8001e46:	4393      	bics	r3, r2
 8001e48:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	4a1b      	ldr	r2, [pc, #108]	; (8001ebc <TIM_OC2_SetConfig+0xf0>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d00b      	beq.n	8001e6a <TIM_OC2_SetConfig+0x9e>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	4a1a      	ldr	r2, [pc, #104]	; (8001ec0 <TIM_OC2_SetConfig+0xf4>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d007      	beq.n	8001e6a <TIM_OC2_SetConfig+0x9e>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	4a19      	ldr	r2, [pc, #100]	; (8001ec4 <TIM_OC2_SetConfig+0xf8>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d003      	beq.n	8001e6a <TIM_OC2_SetConfig+0x9e>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	4a18      	ldr	r2, [pc, #96]	; (8001ec8 <TIM_OC2_SetConfig+0xfc>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d113      	bne.n	8001e92 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8001e6a:	693b      	ldr	r3, [r7, #16]
 8001e6c:	4a17      	ldr	r2, [pc, #92]	; (8001ecc <TIM_OC2_SetConfig+0x100>)
 8001e6e:	4013      	ands	r3, r2
 8001e70:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001e72:	693b      	ldr	r3, [r7, #16]
 8001e74:	4a16      	ldr	r2, [pc, #88]	; (8001ed0 <TIM_OC2_SetConfig+0x104>)
 8001e76:	4013      	ands	r3, r2
 8001e78:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	695b      	ldr	r3, [r3, #20]
 8001e7e:	009b      	lsls	r3, r3, #2
 8001e80:	693a      	ldr	r2, [r7, #16]
 8001e82:	4313      	orrs	r3, r2
 8001e84:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	699b      	ldr	r3, [r3, #24]
 8001e8a:	009b      	lsls	r3, r3, #2
 8001e8c:	693a      	ldr	r2, [r7, #16]
 8001e8e:	4313      	orrs	r3, r2
 8001e90:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	693a      	ldr	r2, [r7, #16]
 8001e96:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	68fa      	ldr	r2, [r7, #12]
 8001e9c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	685a      	ldr	r2, [r3, #4]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	697a      	ldr	r2, [r7, #20]
 8001eaa:	621a      	str	r2, [r3, #32]
}
 8001eac:	46c0      	nop			; (mov r8, r8)
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	b006      	add	sp, #24
 8001eb2:	bd80      	pop	{r7, pc}
 8001eb4:	ffff8fff 	.word	0xffff8fff
 8001eb8:	fffffcff 	.word	0xfffffcff
 8001ebc:	40012c00 	.word	0x40012c00
 8001ec0:	40014000 	.word	0x40014000
 8001ec4:	40014400 	.word	0x40014400
 8001ec8:	40014800 	.word	0x40014800
 8001ecc:	fffffbff 	.word	0xfffffbff
 8001ed0:	fffff7ff 	.word	0xfffff7ff

08001ed4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b086      	sub	sp, #24
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
 8001edc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6a1b      	ldr	r3, [r3, #32]
 8001ee2:	4a35      	ldr	r2, [pc, #212]	; (8001fb8 <TIM_OC3_SetConfig+0xe4>)
 8001ee4:	401a      	ands	r2, r3
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6a1b      	ldr	r3, [r3, #32]
 8001eee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	69db      	ldr	r3, [r3, #28]
 8001efa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	2270      	movs	r2, #112	; 0x70
 8001f00:	4393      	bics	r3, r2
 8001f02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	2203      	movs	r2, #3
 8001f08:	4393      	bics	r3, r2
 8001f0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	68fa      	ldr	r2, [r7, #12]
 8001f12:	4313      	orrs	r3, r2
 8001f14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8001f16:	697b      	ldr	r3, [r7, #20]
 8001f18:	4a28      	ldr	r2, [pc, #160]	; (8001fbc <TIM_OC3_SetConfig+0xe8>)
 8001f1a:	4013      	ands	r3, r2
 8001f1c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	689b      	ldr	r3, [r3, #8]
 8001f22:	021b      	lsls	r3, r3, #8
 8001f24:	697a      	ldr	r2, [r7, #20]
 8001f26:	4313      	orrs	r3, r2
 8001f28:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	4a24      	ldr	r2, [pc, #144]	; (8001fc0 <TIM_OC3_SetConfig+0xec>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d10d      	bne.n	8001f4e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8001f32:	697b      	ldr	r3, [r7, #20]
 8001f34:	4a23      	ldr	r2, [pc, #140]	; (8001fc4 <TIM_OC3_SetConfig+0xf0>)
 8001f36:	4013      	ands	r3, r2
 8001f38:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	68db      	ldr	r3, [r3, #12]
 8001f3e:	021b      	lsls	r3, r3, #8
 8001f40:	697a      	ldr	r2, [r7, #20]
 8001f42:	4313      	orrs	r3, r2
 8001f44:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8001f46:	697b      	ldr	r3, [r7, #20]
 8001f48:	4a1f      	ldr	r2, [pc, #124]	; (8001fc8 <TIM_OC3_SetConfig+0xf4>)
 8001f4a:	4013      	ands	r3, r2
 8001f4c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	4a1b      	ldr	r2, [pc, #108]	; (8001fc0 <TIM_OC3_SetConfig+0xec>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d00b      	beq.n	8001f6e <TIM_OC3_SetConfig+0x9a>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	4a1c      	ldr	r2, [pc, #112]	; (8001fcc <TIM_OC3_SetConfig+0xf8>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d007      	beq.n	8001f6e <TIM_OC3_SetConfig+0x9a>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	4a1b      	ldr	r2, [pc, #108]	; (8001fd0 <TIM_OC3_SetConfig+0xfc>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d003      	beq.n	8001f6e <TIM_OC3_SetConfig+0x9a>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	4a1a      	ldr	r2, [pc, #104]	; (8001fd4 <TIM_OC3_SetConfig+0x100>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d113      	bne.n	8001f96 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8001f6e:	693b      	ldr	r3, [r7, #16]
 8001f70:	4a19      	ldr	r2, [pc, #100]	; (8001fd8 <TIM_OC3_SetConfig+0x104>)
 8001f72:	4013      	ands	r3, r2
 8001f74:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001f76:	693b      	ldr	r3, [r7, #16]
 8001f78:	4a18      	ldr	r2, [pc, #96]	; (8001fdc <TIM_OC3_SetConfig+0x108>)
 8001f7a:	4013      	ands	r3, r2
 8001f7c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	695b      	ldr	r3, [r3, #20]
 8001f82:	011b      	lsls	r3, r3, #4
 8001f84:	693a      	ldr	r2, [r7, #16]
 8001f86:	4313      	orrs	r3, r2
 8001f88:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	699b      	ldr	r3, [r3, #24]
 8001f8e:	011b      	lsls	r3, r3, #4
 8001f90:	693a      	ldr	r2, [r7, #16]
 8001f92:	4313      	orrs	r3, r2
 8001f94:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	693a      	ldr	r2, [r7, #16]
 8001f9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	68fa      	ldr	r2, [r7, #12]
 8001fa0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	685a      	ldr	r2, [r3, #4]
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	697a      	ldr	r2, [r7, #20]
 8001fae:	621a      	str	r2, [r3, #32]
}
 8001fb0:	46c0      	nop			; (mov r8, r8)
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	b006      	add	sp, #24
 8001fb6:	bd80      	pop	{r7, pc}
 8001fb8:	fffffeff 	.word	0xfffffeff
 8001fbc:	fffffdff 	.word	0xfffffdff
 8001fc0:	40012c00 	.word	0x40012c00
 8001fc4:	fffff7ff 	.word	0xfffff7ff
 8001fc8:	fffffbff 	.word	0xfffffbff
 8001fcc:	40014000 	.word	0x40014000
 8001fd0:	40014400 	.word	0x40014400
 8001fd4:	40014800 	.word	0x40014800
 8001fd8:	ffffefff 	.word	0xffffefff
 8001fdc:	ffffdfff 	.word	0xffffdfff

08001fe0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b086      	sub	sp, #24
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
 8001fe8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6a1b      	ldr	r3, [r3, #32]
 8001fee:	4a28      	ldr	r2, [pc, #160]	; (8002090 <TIM_OC4_SetConfig+0xb0>)
 8001ff0:	401a      	ands	r2, r3
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6a1b      	ldr	r3, [r3, #32]
 8001ffa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	69db      	ldr	r3, [r3, #28]
 8002006:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	4a22      	ldr	r2, [pc, #136]	; (8002094 <TIM_OC4_SetConfig+0xb4>)
 800200c:	4013      	ands	r3, r2
 800200e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	4a21      	ldr	r2, [pc, #132]	; (8002098 <TIM_OC4_SetConfig+0xb8>)
 8002014:	4013      	ands	r3, r2
 8002016:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	021b      	lsls	r3, r3, #8
 800201e:	68fa      	ldr	r2, [r7, #12]
 8002020:	4313      	orrs	r3, r2
 8002022:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002024:	693b      	ldr	r3, [r7, #16]
 8002026:	4a1d      	ldr	r2, [pc, #116]	; (800209c <TIM_OC4_SetConfig+0xbc>)
 8002028:	4013      	ands	r3, r2
 800202a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	689b      	ldr	r3, [r3, #8]
 8002030:	031b      	lsls	r3, r3, #12
 8002032:	693a      	ldr	r2, [r7, #16]
 8002034:	4313      	orrs	r3, r2
 8002036:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	4a19      	ldr	r2, [pc, #100]	; (80020a0 <TIM_OC4_SetConfig+0xc0>)
 800203c:	4293      	cmp	r3, r2
 800203e:	d00b      	beq.n	8002058 <TIM_OC4_SetConfig+0x78>
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	4a18      	ldr	r2, [pc, #96]	; (80020a4 <TIM_OC4_SetConfig+0xc4>)
 8002044:	4293      	cmp	r3, r2
 8002046:	d007      	beq.n	8002058 <TIM_OC4_SetConfig+0x78>
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	4a17      	ldr	r2, [pc, #92]	; (80020a8 <TIM_OC4_SetConfig+0xc8>)
 800204c:	4293      	cmp	r3, r2
 800204e:	d003      	beq.n	8002058 <TIM_OC4_SetConfig+0x78>
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	4a16      	ldr	r2, [pc, #88]	; (80020ac <TIM_OC4_SetConfig+0xcc>)
 8002054:	4293      	cmp	r3, r2
 8002056:	d109      	bne.n	800206c <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	4a15      	ldr	r2, [pc, #84]	; (80020b0 <TIM_OC4_SetConfig+0xd0>)
 800205c:	4013      	ands	r3, r2
 800205e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	695b      	ldr	r3, [r3, #20]
 8002064:	019b      	lsls	r3, r3, #6
 8002066:	697a      	ldr	r2, [r7, #20]
 8002068:	4313      	orrs	r3, r2
 800206a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	697a      	ldr	r2, [r7, #20]
 8002070:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	68fa      	ldr	r2, [r7, #12]
 8002076:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	685a      	ldr	r2, [r3, #4]
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	693a      	ldr	r2, [r7, #16]
 8002084:	621a      	str	r2, [r3, #32]
}
 8002086:	46c0      	nop			; (mov r8, r8)
 8002088:	46bd      	mov	sp, r7
 800208a:	b006      	add	sp, #24
 800208c:	bd80      	pop	{r7, pc}
 800208e:	46c0      	nop			; (mov r8, r8)
 8002090:	ffffefff 	.word	0xffffefff
 8002094:	ffff8fff 	.word	0xffff8fff
 8002098:	fffffcff 	.word	0xfffffcff
 800209c:	ffffdfff 	.word	0xffffdfff
 80020a0:	40012c00 	.word	0x40012c00
 80020a4:	40014000 	.word	0x40014000
 80020a8:	40014400 	.word	0x40014400
 80020ac:	40014800 	.word	0x40014800
 80020b0:	ffffbfff 	.word	0xffffbfff

080020b4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b086      	sub	sp, #24
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	60f8      	str	r0, [r7, #12]
 80020bc:	60b9      	str	r1, [r7, #8]
 80020be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	6a1b      	ldr	r3, [r3, #32]
 80020c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	6a1b      	ldr	r3, [r3, #32]
 80020ca:	2201      	movs	r2, #1
 80020cc:	4393      	bics	r3, r2
 80020ce:	001a      	movs	r2, r3
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	699b      	ldr	r3, [r3, #24]
 80020d8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80020da:	693b      	ldr	r3, [r7, #16]
 80020dc:	22f0      	movs	r2, #240	; 0xf0
 80020de:	4393      	bics	r3, r2
 80020e0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	011b      	lsls	r3, r3, #4
 80020e6:	693a      	ldr	r2, [r7, #16]
 80020e8:	4313      	orrs	r3, r2
 80020ea:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80020ec:	697b      	ldr	r3, [r7, #20]
 80020ee:	220a      	movs	r2, #10
 80020f0:	4393      	bics	r3, r2
 80020f2:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80020f4:	697a      	ldr	r2, [r7, #20]
 80020f6:	68bb      	ldr	r3, [r7, #8]
 80020f8:	4313      	orrs	r3, r2
 80020fa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	693a      	ldr	r2, [r7, #16]
 8002100:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	697a      	ldr	r2, [r7, #20]
 8002106:	621a      	str	r2, [r3, #32]
}
 8002108:	46c0      	nop			; (mov r8, r8)
 800210a:	46bd      	mov	sp, r7
 800210c:	b006      	add	sp, #24
 800210e:	bd80      	pop	{r7, pc}

08002110 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b086      	sub	sp, #24
 8002114:	af00      	add	r7, sp, #0
 8002116:	60f8      	str	r0, [r7, #12]
 8002118:	60b9      	str	r1, [r7, #8]
 800211a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	6a1b      	ldr	r3, [r3, #32]
 8002120:	2210      	movs	r2, #16
 8002122:	4393      	bics	r3, r2
 8002124:	001a      	movs	r2, r3
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	699b      	ldr	r3, [r3, #24]
 800212e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	6a1b      	ldr	r3, [r3, #32]
 8002134:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002136:	697b      	ldr	r3, [r7, #20]
 8002138:	4a0d      	ldr	r2, [pc, #52]	; (8002170 <TIM_TI2_ConfigInputStage+0x60>)
 800213a:	4013      	ands	r3, r2
 800213c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	031b      	lsls	r3, r3, #12
 8002142:	697a      	ldr	r2, [r7, #20]
 8002144:	4313      	orrs	r3, r2
 8002146:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002148:	693b      	ldr	r3, [r7, #16]
 800214a:	22a0      	movs	r2, #160	; 0xa0
 800214c:	4393      	bics	r3, r2
 800214e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002150:	68bb      	ldr	r3, [r7, #8]
 8002152:	011b      	lsls	r3, r3, #4
 8002154:	693a      	ldr	r2, [r7, #16]
 8002156:	4313      	orrs	r3, r2
 8002158:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	697a      	ldr	r2, [r7, #20]
 800215e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	693a      	ldr	r2, [r7, #16]
 8002164:	621a      	str	r2, [r3, #32]
}
 8002166:	46c0      	nop			; (mov r8, r8)
 8002168:	46bd      	mov	sp, r7
 800216a:	b006      	add	sp, #24
 800216c:	bd80      	pop	{r7, pc}
 800216e:	46c0      	nop			; (mov r8, r8)
 8002170:	ffff0fff 	.word	0xffff0fff

08002174 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b084      	sub	sp, #16
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
 800217c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	689b      	ldr	r3, [r3, #8]
 8002182:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	2270      	movs	r2, #112	; 0x70
 8002188:	4393      	bics	r3, r2
 800218a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800218c:	683a      	ldr	r2, [r7, #0]
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	4313      	orrs	r3, r2
 8002192:	2207      	movs	r2, #7
 8002194:	4313      	orrs	r3, r2
 8002196:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	68fa      	ldr	r2, [r7, #12]
 800219c:	609a      	str	r2, [r3, #8]
}
 800219e:	46c0      	nop			; (mov r8, r8)
 80021a0:	46bd      	mov	sp, r7
 80021a2:	b004      	add	sp, #16
 80021a4:	bd80      	pop	{r7, pc}
	...

080021a8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b086      	sub	sp, #24
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	60f8      	str	r0, [r7, #12]
 80021b0:	60b9      	str	r1, [r7, #8]
 80021b2:	607a      	str	r2, [r7, #4]
 80021b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	689b      	ldr	r3, [r3, #8]
 80021ba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80021bc:	697b      	ldr	r3, [r7, #20]
 80021be:	4a09      	ldr	r2, [pc, #36]	; (80021e4 <TIM_ETR_SetConfig+0x3c>)
 80021c0:	4013      	ands	r3, r2
 80021c2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	021a      	lsls	r2, r3, #8
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	431a      	orrs	r2, r3
 80021cc:	68bb      	ldr	r3, [r7, #8]
 80021ce:	4313      	orrs	r3, r2
 80021d0:	697a      	ldr	r2, [r7, #20]
 80021d2:	4313      	orrs	r3, r2
 80021d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	697a      	ldr	r2, [r7, #20]
 80021da:	609a      	str	r2, [r3, #8]
}
 80021dc:	46c0      	nop			; (mov r8, r8)
 80021de:	46bd      	mov	sp, r7
 80021e0:	b006      	add	sp, #24
 80021e2:	bd80      	pop	{r7, pc}
 80021e4:	ffff00ff 	.word	0xffff00ff

080021e8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b086      	sub	sp, #24
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	60f8      	str	r0, [r7, #12]
 80021f0:	60b9      	str	r1, [r7, #8]
 80021f2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80021f4:	68bb      	ldr	r3, [r7, #8]
 80021f6:	221f      	movs	r2, #31
 80021f8:	4013      	ands	r3, r2
 80021fa:	2201      	movs	r2, #1
 80021fc:	409a      	lsls	r2, r3
 80021fe:	0013      	movs	r3, r2
 8002200:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	6a1b      	ldr	r3, [r3, #32]
 8002206:	697a      	ldr	r2, [r7, #20]
 8002208:	43d2      	mvns	r2, r2
 800220a:	401a      	ands	r2, r3
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	6a1a      	ldr	r2, [r3, #32]
 8002214:	68bb      	ldr	r3, [r7, #8]
 8002216:	211f      	movs	r1, #31
 8002218:	400b      	ands	r3, r1
 800221a:	6879      	ldr	r1, [r7, #4]
 800221c:	4099      	lsls	r1, r3
 800221e:	000b      	movs	r3, r1
 8002220:	431a      	orrs	r2, r3
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	621a      	str	r2, [r3, #32]
}
 8002226:	46c0      	nop			; (mov r8, r8)
 8002228:	46bd      	mov	sp, r7
 800222a:	b006      	add	sp, #24
 800222c:	bd80      	pop	{r7, pc}
	...

08002230 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b084      	sub	sp, #16
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
 8002238:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	223c      	movs	r2, #60	; 0x3c
 800223e:	5c9b      	ldrb	r3, [r3, r2]
 8002240:	2b01      	cmp	r3, #1
 8002242:	d101      	bne.n	8002248 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002244:	2302      	movs	r3, #2
 8002246:	e047      	b.n	80022d8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	223c      	movs	r2, #60	; 0x3c
 800224c:	2101      	movs	r1, #1
 800224e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	223d      	movs	r2, #61	; 0x3d
 8002254:	2102      	movs	r1, #2
 8002256:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	689b      	ldr	r3, [r3, #8]
 8002266:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	2270      	movs	r2, #112	; 0x70
 800226c:	4393      	bics	r3, r2
 800226e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	68fa      	ldr	r2, [r7, #12]
 8002276:	4313      	orrs	r3, r2
 8002278:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	68fa      	ldr	r2, [r7, #12]
 8002280:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4a16      	ldr	r2, [pc, #88]	; (80022e0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002288:	4293      	cmp	r3, r2
 800228a:	d00f      	beq.n	80022ac <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681a      	ldr	r2, [r3, #0]
 8002290:	2380      	movs	r3, #128	; 0x80
 8002292:	05db      	lsls	r3, r3, #23
 8002294:	429a      	cmp	r2, r3
 8002296:	d009      	beq.n	80022ac <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a11      	ldr	r2, [pc, #68]	; (80022e4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d004      	beq.n	80022ac <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4a10      	ldr	r2, [pc, #64]	; (80022e8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80022a8:	4293      	cmp	r3, r2
 80022aa:	d10c      	bne.n	80022c6 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80022ac:	68bb      	ldr	r3, [r7, #8]
 80022ae:	2280      	movs	r2, #128	; 0x80
 80022b0:	4393      	bics	r3, r2
 80022b2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	68ba      	ldr	r2, [r7, #8]
 80022ba:	4313      	orrs	r3, r2
 80022bc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	68ba      	ldr	r2, [r7, #8]
 80022c4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	223d      	movs	r2, #61	; 0x3d
 80022ca:	2101      	movs	r1, #1
 80022cc:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	223c      	movs	r2, #60	; 0x3c
 80022d2:	2100      	movs	r1, #0
 80022d4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80022d6:	2300      	movs	r3, #0
}
 80022d8:	0018      	movs	r0, r3
 80022da:	46bd      	mov	sp, r7
 80022dc:	b004      	add	sp, #16
 80022de:	bd80      	pop	{r7, pc}
 80022e0:	40012c00 	.word	0x40012c00
 80022e4:	40000400 	.word	0x40000400
 80022e8:	40014000 	.word	0x40014000

080022ec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b082      	sub	sp, #8
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d101      	bne.n	80022fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80022fa:	2301      	movs	r3, #1
 80022fc:	e044      	b.n	8002388 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002302:	2b00      	cmp	r3, #0
 8002304:	d107      	bne.n	8002316 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2274      	movs	r2, #116	; 0x74
 800230a:	2100      	movs	r1, #0
 800230c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	0018      	movs	r0, r3
 8002312:	f001 fc41 	bl	8003b98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2224      	movs	r2, #36	; 0x24
 800231a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	681a      	ldr	r2, [r3, #0]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	2101      	movs	r1, #1
 8002328:	438a      	bics	r2, r1
 800232a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	0018      	movs	r0, r3
 8002330:	f000 fb74 	bl	8002a1c <UART_SetConfig>
 8002334:	0003      	movs	r3, r0
 8002336:	2b01      	cmp	r3, #1
 8002338:	d101      	bne.n	800233e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800233a:	2301      	movs	r3, #1
 800233c:	e024      	b.n	8002388 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002342:	2b00      	cmp	r3, #0
 8002344:	d003      	beq.n	800234e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	0018      	movs	r0, r3
 800234a:	f000 fca5 	bl	8002c98 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	685a      	ldr	r2, [r3, #4]
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	490d      	ldr	r1, [pc, #52]	; (8002390 <HAL_UART_Init+0xa4>)
 800235a:	400a      	ands	r2, r1
 800235c:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	689a      	ldr	r2, [r3, #8]
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	212a      	movs	r1, #42	; 0x2a
 800236a:	438a      	bics	r2, r1
 800236c:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	681a      	ldr	r2, [r3, #0]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	2101      	movs	r1, #1
 800237a:	430a      	orrs	r2, r1
 800237c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	0018      	movs	r0, r3
 8002382:	f000 fd3d 	bl	8002e00 <UART_CheckIdleState>
 8002386:	0003      	movs	r3, r0
}
 8002388:	0018      	movs	r0, r3
 800238a:	46bd      	mov	sp, r7
 800238c:	b002      	add	sp, #8
 800238e:	bd80      	pop	{r7, pc}
 8002390:	ffffb7ff 	.word	0xffffb7ff

08002394 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b088      	sub	sp, #32
 8002398:	af00      	add	r7, sp, #0
 800239a:	60f8      	str	r0, [r7, #12]
 800239c:	60b9      	str	r1, [r7, #8]
 800239e:	1dbb      	adds	r3, r7, #6
 80023a0:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80023a6:	2b20      	cmp	r3, #32
 80023a8:	d14e      	bne.n	8002448 <HAL_UART_Receive_IT+0xb4>
  {
    if ((pData == NULL) || (Size == 0U))
 80023aa:	68bb      	ldr	r3, [r7, #8]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d003      	beq.n	80023b8 <HAL_UART_Receive_IT+0x24>
 80023b0:	1dbb      	adds	r3, r7, #6
 80023b2:	881b      	ldrh	r3, [r3, #0]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d101      	bne.n	80023bc <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80023b8:	2301      	movs	r3, #1
 80023ba:	e046      	b.n	800244a <HAL_UART_Receive_IT+0xb6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	689a      	ldr	r2, [r3, #8]
 80023c0:	2380      	movs	r3, #128	; 0x80
 80023c2:	015b      	lsls	r3, r3, #5
 80023c4:	429a      	cmp	r2, r3
 80023c6:	d109      	bne.n	80023dc <HAL_UART_Receive_IT+0x48>
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	691b      	ldr	r3, [r3, #16]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d105      	bne.n	80023dc <HAL_UART_Receive_IT+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80023d0:	68bb      	ldr	r3, [r7, #8]
 80023d2:	2201      	movs	r2, #1
 80023d4:	4013      	ands	r3, r2
 80023d6:	d001      	beq.n	80023dc <HAL_UART_Receive_IT+0x48>
      {
        return  HAL_ERROR;
 80023d8:	2301      	movs	r3, #1
 80023da:	e036      	b.n	800244a <HAL_UART_Receive_IT+0xb6>
      }
    }

    __HAL_LOCK(huart);
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	2274      	movs	r2, #116	; 0x74
 80023e0:	5c9b      	ldrb	r3, [r3, r2]
 80023e2:	2b01      	cmp	r3, #1
 80023e4:	d101      	bne.n	80023ea <HAL_UART_Receive_IT+0x56>
 80023e6:	2302      	movs	r3, #2
 80023e8:	e02f      	b.n	800244a <HAL_UART_Receive_IT+0xb6>
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	2274      	movs	r2, #116	; 0x74
 80023ee:	2101      	movs	r1, #1
 80023f0:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	2200      	movs	r2, #0
 80023f6:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	685a      	ldr	r2, [r3, #4]
 80023fe:	2380      	movs	r3, #128	; 0x80
 8002400:	041b      	lsls	r3, r3, #16
 8002402:	4013      	ands	r3, r2
 8002404:	d017      	beq.n	8002436 <HAL_UART_Receive_IT+0xa2>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002406:	f3ef 8310 	mrs	r3, PRIMASK
 800240a:	613b      	str	r3, [r7, #16]
  return(result);
 800240c:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800240e:	61fb      	str	r3, [r7, #28]
 8002410:	2301      	movs	r3, #1
 8002412:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002414:	697b      	ldr	r3, [r7, #20]
 8002416:	f383 8810 	msr	PRIMASK, r3
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	681a      	ldr	r2, [r3, #0]
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	2180      	movs	r1, #128	; 0x80
 8002426:	04c9      	lsls	r1, r1, #19
 8002428:	430a      	orrs	r2, r1
 800242a:	601a      	str	r2, [r3, #0]
 800242c:	69fb      	ldr	r3, [r7, #28]
 800242e:	61bb      	str	r3, [r7, #24]
 8002430:	69bb      	ldr	r3, [r7, #24]
 8002432:	f383 8810 	msr	PRIMASK, r3
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002436:	1dbb      	adds	r3, r7, #6
 8002438:	881a      	ldrh	r2, [r3, #0]
 800243a:	68b9      	ldr	r1, [r7, #8]
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	0018      	movs	r0, r3
 8002440:	f000 fde4 	bl	800300c <UART_Start_Receive_IT>
 8002444:	0003      	movs	r3, r0
 8002446:	e000      	b.n	800244a <HAL_UART_Receive_IT+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8002448:	2302      	movs	r3, #2
  }
}
 800244a:	0018      	movs	r0, r3
 800244c:	46bd      	mov	sp, r7
 800244e:	b008      	add	sp, #32
 8002450:	bd80      	pop	{r7, pc}
	...

08002454 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b0aa      	sub	sp, #168	; 0xa8
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	69db      	ldr	r3, [r3, #28]
 8002462:	22a4      	movs	r2, #164	; 0xa4
 8002464:	18b9      	adds	r1, r7, r2
 8002466:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	21a0      	movs	r1, #160	; 0xa0
 8002470:	1879      	adds	r1, r7, r1
 8002472:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	689b      	ldr	r3, [r3, #8]
 800247a:	219c      	movs	r1, #156	; 0x9c
 800247c:	1879      	adds	r1, r7, r1
 800247e:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002480:	18bb      	adds	r3, r7, r2
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a99      	ldr	r2, [pc, #612]	; (80026ec <HAL_UART_IRQHandler+0x298>)
 8002486:	4013      	ands	r3, r2
 8002488:	2298      	movs	r2, #152	; 0x98
 800248a:	18b9      	adds	r1, r7, r2
 800248c:	600b      	str	r3, [r1, #0]
  if (errorflags == 0U)
 800248e:	18bb      	adds	r3, r7, r2
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d116      	bne.n	80024c4 <HAL_UART_IRQHandler+0x70>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002496:	23a4      	movs	r3, #164	; 0xa4
 8002498:	18fb      	adds	r3, r7, r3
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	2220      	movs	r2, #32
 800249e:	4013      	ands	r3, r2
 80024a0:	d010      	beq.n	80024c4 <HAL_UART_IRQHandler+0x70>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80024a2:	23a0      	movs	r3, #160	; 0xa0
 80024a4:	18fb      	adds	r3, r7, r3
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	2220      	movs	r2, #32
 80024aa:	4013      	ands	r3, r2
 80024ac:	d00a      	beq.n	80024c4 <HAL_UART_IRQHandler+0x70>
    {
      if (huart->RxISR != NULL)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d100      	bne.n	80024b8 <HAL_UART_IRQHandler+0x64>
 80024b6:	e28c      	b.n	80029d2 <HAL_UART_IRQHandler+0x57e>
      {
        huart->RxISR(huart);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80024bc:	687a      	ldr	r2, [r7, #4]
 80024be:	0010      	movs	r0, r2
 80024c0:	4798      	blx	r3
      }
      return;
 80024c2:	e286      	b.n	80029d2 <HAL_UART_IRQHandler+0x57e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80024c4:	2398      	movs	r3, #152	; 0x98
 80024c6:	18fb      	adds	r3, r7, r3
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d100      	bne.n	80024d0 <HAL_UART_IRQHandler+0x7c>
 80024ce:	e113      	b.n	80026f8 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80024d0:	239c      	movs	r3, #156	; 0x9c
 80024d2:	18fb      	adds	r3, r7, r3
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	2201      	movs	r2, #1
 80024d8:	4013      	ands	r3, r2
 80024da:	d106      	bne.n	80024ea <HAL_UART_IRQHandler+0x96>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80024dc:	23a0      	movs	r3, #160	; 0xa0
 80024de:	18fb      	adds	r3, r7, r3
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4a83      	ldr	r2, [pc, #524]	; (80026f0 <HAL_UART_IRQHandler+0x29c>)
 80024e4:	4013      	ands	r3, r2
 80024e6:	d100      	bne.n	80024ea <HAL_UART_IRQHandler+0x96>
 80024e8:	e106      	b.n	80026f8 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80024ea:	23a4      	movs	r3, #164	; 0xa4
 80024ec:	18fb      	adds	r3, r7, r3
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	2201      	movs	r2, #1
 80024f2:	4013      	ands	r3, r2
 80024f4:	d012      	beq.n	800251c <HAL_UART_IRQHandler+0xc8>
 80024f6:	23a0      	movs	r3, #160	; 0xa0
 80024f8:	18fb      	adds	r3, r7, r3
 80024fa:	681a      	ldr	r2, [r3, #0]
 80024fc:	2380      	movs	r3, #128	; 0x80
 80024fe:	005b      	lsls	r3, r3, #1
 8002500:	4013      	ands	r3, r2
 8002502:	d00b      	beq.n	800251c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	2201      	movs	r2, #1
 800250a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2280      	movs	r2, #128	; 0x80
 8002510:	589b      	ldr	r3, [r3, r2]
 8002512:	2201      	movs	r2, #1
 8002514:	431a      	orrs	r2, r3
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2180      	movs	r1, #128	; 0x80
 800251a:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800251c:	23a4      	movs	r3, #164	; 0xa4
 800251e:	18fb      	adds	r3, r7, r3
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	2202      	movs	r2, #2
 8002524:	4013      	ands	r3, r2
 8002526:	d011      	beq.n	800254c <HAL_UART_IRQHandler+0xf8>
 8002528:	239c      	movs	r3, #156	; 0x9c
 800252a:	18fb      	adds	r3, r7, r3
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	2201      	movs	r2, #1
 8002530:	4013      	ands	r3, r2
 8002532:	d00b      	beq.n	800254c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	2202      	movs	r2, #2
 800253a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2280      	movs	r2, #128	; 0x80
 8002540:	589b      	ldr	r3, [r3, r2]
 8002542:	2204      	movs	r2, #4
 8002544:	431a      	orrs	r2, r3
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2180      	movs	r1, #128	; 0x80
 800254a:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800254c:	23a4      	movs	r3, #164	; 0xa4
 800254e:	18fb      	adds	r3, r7, r3
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	2204      	movs	r2, #4
 8002554:	4013      	ands	r3, r2
 8002556:	d011      	beq.n	800257c <HAL_UART_IRQHandler+0x128>
 8002558:	239c      	movs	r3, #156	; 0x9c
 800255a:	18fb      	adds	r3, r7, r3
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	2201      	movs	r2, #1
 8002560:	4013      	ands	r3, r2
 8002562:	d00b      	beq.n	800257c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	2204      	movs	r2, #4
 800256a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2280      	movs	r2, #128	; 0x80
 8002570:	589b      	ldr	r3, [r3, r2]
 8002572:	2202      	movs	r2, #2
 8002574:	431a      	orrs	r2, r3
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2180      	movs	r1, #128	; 0x80
 800257a:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800257c:	23a4      	movs	r3, #164	; 0xa4
 800257e:	18fb      	adds	r3, r7, r3
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	2208      	movs	r2, #8
 8002584:	4013      	ands	r3, r2
 8002586:	d017      	beq.n	80025b8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002588:	23a0      	movs	r3, #160	; 0xa0
 800258a:	18fb      	adds	r3, r7, r3
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	2220      	movs	r2, #32
 8002590:	4013      	ands	r3, r2
 8002592:	d105      	bne.n	80025a0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002594:	239c      	movs	r3, #156	; 0x9c
 8002596:	18fb      	adds	r3, r7, r3
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	2201      	movs	r2, #1
 800259c:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800259e:	d00b      	beq.n	80025b8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	2208      	movs	r2, #8
 80025a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2280      	movs	r2, #128	; 0x80
 80025ac:	589b      	ldr	r3, [r3, r2]
 80025ae:	2208      	movs	r2, #8
 80025b0:	431a      	orrs	r2, r3
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2180      	movs	r1, #128	; 0x80
 80025b6:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80025b8:	23a4      	movs	r3, #164	; 0xa4
 80025ba:	18fb      	adds	r3, r7, r3
 80025bc:	681a      	ldr	r2, [r3, #0]
 80025be:	2380      	movs	r3, #128	; 0x80
 80025c0:	011b      	lsls	r3, r3, #4
 80025c2:	4013      	ands	r3, r2
 80025c4:	d013      	beq.n	80025ee <HAL_UART_IRQHandler+0x19a>
 80025c6:	23a0      	movs	r3, #160	; 0xa0
 80025c8:	18fb      	adds	r3, r7, r3
 80025ca:	681a      	ldr	r2, [r3, #0]
 80025cc:	2380      	movs	r3, #128	; 0x80
 80025ce:	04db      	lsls	r3, r3, #19
 80025d0:	4013      	ands	r3, r2
 80025d2:	d00c      	beq.n	80025ee <HAL_UART_IRQHandler+0x19a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	2280      	movs	r2, #128	; 0x80
 80025da:	0112      	lsls	r2, r2, #4
 80025dc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2280      	movs	r2, #128	; 0x80
 80025e2:	589b      	ldr	r3, [r3, r2]
 80025e4:	2220      	movs	r2, #32
 80025e6:	431a      	orrs	r2, r3
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2180      	movs	r1, #128	; 0x80
 80025ec:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2280      	movs	r2, #128	; 0x80
 80025f2:	589b      	ldr	r3, [r3, r2]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d100      	bne.n	80025fa <HAL_UART_IRQHandler+0x1a6>
 80025f8:	e1ed      	b.n	80029d6 <HAL_UART_IRQHandler+0x582>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80025fa:	23a4      	movs	r3, #164	; 0xa4
 80025fc:	18fb      	adds	r3, r7, r3
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	2220      	movs	r2, #32
 8002602:	4013      	ands	r3, r2
 8002604:	d00e      	beq.n	8002624 <HAL_UART_IRQHandler+0x1d0>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002606:	23a0      	movs	r3, #160	; 0xa0
 8002608:	18fb      	adds	r3, r7, r3
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	2220      	movs	r2, #32
 800260e:	4013      	ands	r3, r2
 8002610:	d008      	beq.n	8002624 <HAL_UART_IRQHandler+0x1d0>
      {
        if (huart->RxISR != NULL)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002616:	2b00      	cmp	r3, #0
 8002618:	d004      	beq.n	8002624 <HAL_UART_IRQHandler+0x1d0>
        {
          huart->RxISR(huart);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800261e:	687a      	ldr	r2, [r7, #4]
 8002620:	0010      	movs	r0, r2
 8002622:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2280      	movs	r2, #128	; 0x80
 8002628:	589b      	ldr	r3, [r3, r2]
 800262a:	2294      	movs	r2, #148	; 0x94
 800262c:	18ba      	adds	r2, r7, r2
 800262e:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	689b      	ldr	r3, [r3, #8]
 8002636:	2240      	movs	r2, #64	; 0x40
 8002638:	4013      	ands	r3, r2
 800263a:	2b40      	cmp	r3, #64	; 0x40
 800263c:	d005      	beq.n	800264a <HAL_UART_IRQHandler+0x1f6>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800263e:	2394      	movs	r3, #148	; 0x94
 8002640:	18fb      	adds	r3, r7, r3
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	2228      	movs	r2, #40	; 0x28
 8002646:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002648:	d045      	beq.n	80026d6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	0018      	movs	r0, r3
 800264e:	f000 fd75 	bl	800313c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	689b      	ldr	r3, [r3, #8]
 8002658:	2240      	movs	r2, #64	; 0x40
 800265a:	4013      	ands	r3, r2
 800265c:	2b40      	cmp	r3, #64	; 0x40
 800265e:	d135      	bne.n	80026cc <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002660:	f3ef 8310 	mrs	r3, PRIMASK
 8002664:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8002666:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002668:	2090      	movs	r0, #144	; 0x90
 800266a:	183a      	adds	r2, r7, r0
 800266c:	6013      	str	r3, [r2, #0]
 800266e:	2301      	movs	r3, #1
 8002670:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002672:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002674:	f383 8810 	msr	PRIMASK, r3
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	689a      	ldr	r2, [r3, #8]
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	2140      	movs	r1, #64	; 0x40
 8002684:	438a      	bics	r2, r1
 8002686:	609a      	str	r2, [r3, #8]
 8002688:	183b      	adds	r3, r7, r0
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	66bb      	str	r3, [r7, #104]	; 0x68
 800268e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002690:	f383 8810 	msr	PRIMASK, r3

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002698:	2b00      	cmp	r3, #0
 800269a:	d012      	beq.n	80026c2 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026a0:	4a14      	ldr	r2, [pc, #80]	; (80026f4 <HAL_UART_IRQHandler+0x2a0>)
 80026a2:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026a8:	0018      	movs	r0, r3
 80026aa:	f7fe f83f 	bl	800072c <HAL_DMA_Abort_IT>
 80026ae:	1e03      	subs	r3, r0, #0
 80026b0:	d01a      	beq.n	80026e8 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026bc:	0018      	movs	r0, r3
 80026be:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026c0:	e012      	b.n	80026e8 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	0018      	movs	r0, r3
 80026c6:	f000 f995 	bl	80029f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026ca:	e00d      	b.n	80026e8 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	0018      	movs	r0, r3
 80026d0:	f000 f990 	bl	80029f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026d4:	e008      	b.n	80026e8 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	0018      	movs	r0, r3
 80026da:	f000 f98b 	bl	80029f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2280      	movs	r2, #128	; 0x80
 80026e2:	2100      	movs	r1, #0
 80026e4:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80026e6:	e176      	b.n	80029d6 <HAL_UART_IRQHandler+0x582>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026e8:	46c0      	nop			; (mov r8, r8)
    return;
 80026ea:	e174      	b.n	80029d6 <HAL_UART_IRQHandler+0x582>
 80026ec:	0000080f 	.word	0x0000080f
 80026f0:	04000120 	.word	0x04000120
 80026f4:	080031f5 	.word	0x080031f5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026fc:	2b01      	cmp	r3, #1
 80026fe:	d000      	beq.n	8002702 <HAL_UART_IRQHandler+0x2ae>
 8002700:	e127      	b.n	8002952 <HAL_UART_IRQHandler+0x4fe>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002702:	23a4      	movs	r3, #164	; 0xa4
 8002704:	18fb      	adds	r3, r7, r3
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	2210      	movs	r2, #16
 800270a:	4013      	ands	r3, r2
 800270c:	d100      	bne.n	8002710 <HAL_UART_IRQHandler+0x2bc>
 800270e:	e120      	b.n	8002952 <HAL_UART_IRQHandler+0x4fe>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002710:	23a0      	movs	r3, #160	; 0xa0
 8002712:	18fb      	adds	r3, r7, r3
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	2210      	movs	r2, #16
 8002718:	4013      	ands	r3, r2
 800271a:	d100      	bne.n	800271e <HAL_UART_IRQHandler+0x2ca>
 800271c:	e119      	b.n	8002952 <HAL_UART_IRQHandler+0x4fe>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	2210      	movs	r2, #16
 8002724:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	689b      	ldr	r3, [r3, #8]
 800272c:	2240      	movs	r2, #64	; 0x40
 800272e:	4013      	ands	r3, r2
 8002730:	2b40      	cmp	r3, #64	; 0x40
 8002732:	d000      	beq.n	8002736 <HAL_UART_IRQHandler+0x2e2>
 8002734:	e095      	b.n	8002862 <HAL_UART_IRQHandler+0x40e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	685a      	ldr	r2, [r3, #4]
 800273e:	217e      	movs	r1, #126	; 0x7e
 8002740:	187b      	adds	r3, r7, r1
 8002742:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8002744:	187b      	adds	r3, r7, r1
 8002746:	881b      	ldrh	r3, [r3, #0]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d100      	bne.n	800274e <HAL_UART_IRQHandler+0x2fa>
 800274c:	e145      	b.n	80029da <HAL_UART_IRQHandler+0x586>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2258      	movs	r2, #88	; 0x58
 8002752:	5a9b      	ldrh	r3, [r3, r2]
 8002754:	227e      	movs	r2, #126	; 0x7e
 8002756:	18ba      	adds	r2, r7, r2
 8002758:	8812      	ldrh	r2, [r2, #0]
 800275a:	429a      	cmp	r2, r3
 800275c:	d300      	bcc.n	8002760 <HAL_UART_IRQHandler+0x30c>
 800275e:	e13c      	b.n	80029da <HAL_UART_IRQHandler+0x586>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	227e      	movs	r2, #126	; 0x7e
 8002764:	18ba      	adds	r2, r7, r2
 8002766:	215a      	movs	r1, #90	; 0x5a
 8002768:	8812      	ldrh	r2, [r2, #0]
 800276a:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002770:	699b      	ldr	r3, [r3, #24]
 8002772:	2b20      	cmp	r3, #32
 8002774:	d066      	beq.n	8002844 <HAL_UART_IRQHandler+0x3f0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002776:	f3ef 8310 	mrs	r3, PRIMASK
 800277a:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 800277c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800277e:	67bb      	str	r3, [r7, #120]	; 0x78
 8002780:	2301      	movs	r3, #1
 8002782:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002784:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002786:	f383 8810 	msr	PRIMASK, r3
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	681a      	ldr	r2, [r3, #0]
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4995      	ldr	r1, [pc, #596]	; (80029ec <HAL_UART_IRQHandler+0x598>)
 8002796:	400a      	ands	r2, r1
 8002798:	601a      	str	r2, [r3, #0]
 800279a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800279c:	63bb      	str	r3, [r7, #56]	; 0x38
 800279e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027a0:	f383 8810 	msr	PRIMASK, r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80027a4:	f3ef 8310 	mrs	r3, PRIMASK
 80027a8:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 80027aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80027ac:	677b      	str	r3, [r7, #116]	; 0x74
 80027ae:	2301      	movs	r3, #1
 80027b0:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80027b4:	f383 8810 	msr	PRIMASK, r3
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	689a      	ldr	r2, [r3, #8]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	2101      	movs	r1, #1
 80027c4:	438a      	bics	r2, r1
 80027c6:	609a      	str	r2, [r3, #8]
 80027c8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80027ca:	647b      	str	r3, [r7, #68]	; 0x44
 80027cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80027ce:	f383 8810 	msr	PRIMASK, r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80027d2:	f3ef 8310 	mrs	r3, PRIMASK
 80027d6:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 80027d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80027da:	673b      	str	r3, [r7, #112]	; 0x70
 80027dc:	2301      	movs	r3, #1
 80027de:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80027e2:	f383 8810 	msr	PRIMASK, r3
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	689a      	ldr	r2, [r3, #8]
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	2140      	movs	r1, #64	; 0x40
 80027f2:	438a      	bics	r2, r1
 80027f4:	609a      	str	r2, [r3, #8]
 80027f6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80027f8:	653b      	str	r3, [r7, #80]	; 0x50
 80027fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80027fc:	f383 8810 	msr	PRIMASK, r3

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2220      	movs	r2, #32
 8002804:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2200      	movs	r2, #0
 800280a:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800280c:	f3ef 8310 	mrs	r3, PRIMASK
 8002810:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8002812:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002814:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002816:	2301      	movs	r3, #1
 8002818:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800281a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800281c:	f383 8810 	msr	PRIMASK, r3
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	681a      	ldr	r2, [r3, #0]
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	2110      	movs	r1, #16
 800282c:	438a      	bics	r2, r1
 800282e:	601a      	str	r2, [r3, #0]
 8002830:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002832:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002834:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002836:	f383 8810 	msr	PRIMASK, r3

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800283e:	0018      	movs	r0, r3
 8002840:	f7fd ff3c 	bl	80006bc <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2258      	movs	r2, #88	; 0x58
 8002848:	5a9a      	ldrh	r2, [r3, r2]
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	215a      	movs	r1, #90	; 0x5a
 800284e:	5a5b      	ldrh	r3, [r3, r1]
 8002850:	b29b      	uxth	r3, r3
 8002852:	1ad3      	subs	r3, r2, r3
 8002854:	b29a      	uxth	r2, r3
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	0011      	movs	r1, r2
 800285a:	0018      	movs	r0, r3
 800285c:	f000 f8d2 	bl	8002a04 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002860:	e0bb      	b.n	80029da <HAL_UART_IRQHandler+0x586>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2258      	movs	r2, #88	; 0x58
 8002866:	5a99      	ldrh	r1, [r3, r2]
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	225a      	movs	r2, #90	; 0x5a
 800286c:	5a9b      	ldrh	r3, [r3, r2]
 800286e:	b29a      	uxth	r2, r3
 8002870:	238e      	movs	r3, #142	; 0x8e
 8002872:	18fb      	adds	r3, r7, r3
 8002874:	1a8a      	subs	r2, r1, r2
 8002876:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	225a      	movs	r2, #90	; 0x5a
 800287c:	5a9b      	ldrh	r3, [r3, r2]
 800287e:	b29b      	uxth	r3, r3
 8002880:	2b00      	cmp	r3, #0
 8002882:	d100      	bne.n	8002886 <HAL_UART_IRQHandler+0x432>
 8002884:	e0ab      	b.n	80029de <HAL_UART_IRQHandler+0x58a>
          && (nb_rx_data > 0U))
 8002886:	238e      	movs	r3, #142	; 0x8e
 8002888:	18fb      	adds	r3, r7, r3
 800288a:	881b      	ldrh	r3, [r3, #0]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d100      	bne.n	8002892 <HAL_UART_IRQHandler+0x43e>
 8002890:	e0a5      	b.n	80029de <HAL_UART_IRQHandler+0x58a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002892:	f3ef 8310 	mrs	r3, PRIMASK
 8002896:	60fb      	str	r3, [r7, #12]
  return(result);
 8002898:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800289a:	2088      	movs	r0, #136	; 0x88
 800289c:	183a      	adds	r2, r7, r0
 800289e:	6013      	str	r3, [r2, #0]
 80028a0:	2301      	movs	r3, #1
 80028a2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028a4:	693b      	ldr	r3, [r7, #16]
 80028a6:	f383 8810 	msr	PRIMASK, r3
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	681a      	ldr	r2, [r3, #0]
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	494e      	ldr	r1, [pc, #312]	; (80029f0 <HAL_UART_IRQHandler+0x59c>)
 80028b6:	400a      	ands	r2, r1
 80028b8:	601a      	str	r2, [r3, #0]
 80028ba:	183b      	adds	r3, r7, r0
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	617b      	str	r3, [r7, #20]
 80028c0:	697b      	ldr	r3, [r7, #20]
 80028c2:	f383 8810 	msr	PRIMASK, r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80028c6:	f3ef 8310 	mrs	r3, PRIMASK
 80028ca:	61bb      	str	r3, [r7, #24]
  return(result);
 80028cc:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80028ce:	2084      	movs	r0, #132	; 0x84
 80028d0:	183a      	adds	r2, r7, r0
 80028d2:	6013      	str	r3, [r2, #0]
 80028d4:	2301      	movs	r3, #1
 80028d6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028d8:	69fb      	ldr	r3, [r7, #28]
 80028da:	f383 8810 	msr	PRIMASK, r3
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	689a      	ldr	r2, [r3, #8]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	2101      	movs	r1, #1
 80028ea:	438a      	bics	r2, r1
 80028ec:	609a      	str	r2, [r3, #8]
 80028ee:	183b      	adds	r3, r7, r0
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	623b      	str	r3, [r7, #32]
 80028f4:	6a3b      	ldr	r3, [r7, #32]
 80028f6:	f383 8810 	msr	PRIMASK, r3

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2220      	movs	r2, #32
 80028fe:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2200      	movs	r2, #0
 8002904:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2200      	movs	r2, #0
 800290a:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800290c:	f3ef 8310 	mrs	r3, PRIMASK
 8002910:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002912:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002914:	2080      	movs	r0, #128	; 0x80
 8002916:	183a      	adds	r2, r7, r0
 8002918:	6013      	str	r3, [r2, #0]
 800291a:	2301      	movs	r3, #1
 800291c:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800291e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002920:	f383 8810 	msr	PRIMASK, r3
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	681a      	ldr	r2, [r3, #0]
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	2110      	movs	r1, #16
 8002930:	438a      	bics	r2, r1
 8002932:	601a      	str	r2, [r3, #0]
 8002934:	183b      	adds	r3, r7, r0
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	62fb      	str	r3, [r7, #44]	; 0x2c
 800293a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800293c:	f383 8810 	msr	PRIMASK, r3
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002940:	238e      	movs	r3, #142	; 0x8e
 8002942:	18fb      	adds	r3, r7, r3
 8002944:	881a      	ldrh	r2, [r3, #0]
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	0011      	movs	r1, r2
 800294a:	0018      	movs	r0, r3
 800294c:	f000 f85a 	bl	8002a04 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002950:	e045      	b.n	80029de <HAL_UART_IRQHandler+0x58a>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002952:	23a4      	movs	r3, #164	; 0xa4
 8002954:	18fb      	adds	r3, r7, r3
 8002956:	681a      	ldr	r2, [r3, #0]
 8002958:	2380      	movs	r3, #128	; 0x80
 800295a:	035b      	lsls	r3, r3, #13
 800295c:	4013      	ands	r3, r2
 800295e:	d010      	beq.n	8002982 <HAL_UART_IRQHandler+0x52e>
 8002960:	239c      	movs	r3, #156	; 0x9c
 8002962:	18fb      	adds	r3, r7, r3
 8002964:	681a      	ldr	r2, [r3, #0]
 8002966:	2380      	movs	r3, #128	; 0x80
 8002968:	03db      	lsls	r3, r3, #15
 800296a:	4013      	ands	r3, r2
 800296c:	d009      	beq.n	8002982 <HAL_UART_IRQHandler+0x52e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	2280      	movs	r2, #128	; 0x80
 8002974:	0352      	lsls	r2, r2, #13
 8002976:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	0018      	movs	r0, r3
 800297c:	f000 fdd6 	bl	800352c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002980:	e030      	b.n	80029e4 <HAL_UART_IRQHandler+0x590>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002982:	23a4      	movs	r3, #164	; 0xa4
 8002984:	18fb      	adds	r3, r7, r3
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	2280      	movs	r2, #128	; 0x80
 800298a:	4013      	ands	r3, r2
 800298c:	d00f      	beq.n	80029ae <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800298e:	23a0      	movs	r3, #160	; 0xa0
 8002990:	18fb      	adds	r3, r7, r3
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	2280      	movs	r2, #128	; 0x80
 8002996:	4013      	ands	r3, r2
 8002998:	d009      	beq.n	80029ae <HAL_UART_IRQHandler+0x55a>
  {
    if (huart->TxISR != NULL)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d01f      	beq.n	80029e2 <HAL_UART_IRQHandler+0x58e>
    {
      huart->TxISR(huart);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80029a6:	687a      	ldr	r2, [r7, #4]
 80029a8:	0010      	movs	r0, r2
 80029aa:	4798      	blx	r3
    }
    return;
 80029ac:	e019      	b.n	80029e2 <HAL_UART_IRQHandler+0x58e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80029ae:	23a4      	movs	r3, #164	; 0xa4
 80029b0:	18fb      	adds	r3, r7, r3
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	2240      	movs	r2, #64	; 0x40
 80029b6:	4013      	ands	r3, r2
 80029b8:	d014      	beq.n	80029e4 <HAL_UART_IRQHandler+0x590>
 80029ba:	23a0      	movs	r3, #160	; 0xa0
 80029bc:	18fb      	adds	r3, r7, r3
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	2240      	movs	r2, #64	; 0x40
 80029c2:	4013      	ands	r3, r2
 80029c4:	d00e      	beq.n	80029e4 <HAL_UART_IRQHandler+0x590>
  {
    UART_EndTransmit_IT(huart);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	0018      	movs	r0, r3
 80029ca:	f000 fc2a 	bl	8003222 <UART_EndTransmit_IT>
    return;
 80029ce:	46c0      	nop			; (mov r8, r8)
 80029d0:	e008      	b.n	80029e4 <HAL_UART_IRQHandler+0x590>
      return;
 80029d2:	46c0      	nop			; (mov r8, r8)
 80029d4:	e006      	b.n	80029e4 <HAL_UART_IRQHandler+0x590>
    return;
 80029d6:	46c0      	nop			; (mov r8, r8)
 80029d8:	e004      	b.n	80029e4 <HAL_UART_IRQHandler+0x590>
      return;
 80029da:	46c0      	nop			; (mov r8, r8)
 80029dc:	e002      	b.n	80029e4 <HAL_UART_IRQHandler+0x590>
      return;
 80029de:	46c0      	nop			; (mov r8, r8)
 80029e0:	e000      	b.n	80029e4 <HAL_UART_IRQHandler+0x590>
    return;
 80029e2:	46c0      	nop			; (mov r8, r8)
  }

}
 80029e4:	46bd      	mov	sp, r7
 80029e6:	b02a      	add	sp, #168	; 0xa8
 80029e8:	bd80      	pop	{r7, pc}
 80029ea:	46c0      	nop			; (mov r8, r8)
 80029ec:	fffffeff 	.word	0xfffffeff
 80029f0:	fffffedf 	.word	0xfffffedf

080029f4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b082      	sub	sp, #8
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80029fc:	46c0      	nop			; (mov r8, r8)
 80029fe:	46bd      	mov	sp, r7
 8002a00:	b002      	add	sp, #8
 8002a02:	bd80      	pop	{r7, pc}

08002a04 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b082      	sub	sp, #8
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
 8002a0c:	000a      	movs	r2, r1
 8002a0e:	1cbb      	adds	r3, r7, #2
 8002a10:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002a12:	46c0      	nop			; (mov r8, r8)
 8002a14:	46bd      	mov	sp, r7
 8002a16:	b002      	add	sp, #8
 8002a18:	bd80      	pop	{r7, pc}
	...

08002a1c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b088      	sub	sp, #32
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002a24:	231e      	movs	r3, #30
 8002a26:	18fb      	adds	r3, r7, r3
 8002a28:	2200      	movs	r2, #0
 8002a2a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	689a      	ldr	r2, [r3, #8]
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	691b      	ldr	r3, [r3, #16]
 8002a34:	431a      	orrs	r2, r3
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	695b      	ldr	r3, [r3, #20]
 8002a3a:	431a      	orrs	r2, r3
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	69db      	ldr	r3, [r3, #28]
 8002a40:	4313      	orrs	r3, r2
 8002a42:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4a8b      	ldr	r2, [pc, #556]	; (8002c78 <UART_SetConfig+0x25c>)
 8002a4c:	4013      	ands	r3, r2
 8002a4e:	0019      	movs	r1, r3
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	697a      	ldr	r2, [r7, #20]
 8002a56:	430a      	orrs	r2, r1
 8002a58:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	4a86      	ldr	r2, [pc, #536]	; (8002c7c <UART_SetConfig+0x260>)
 8002a62:	4013      	ands	r3, r2
 8002a64:	0019      	movs	r1, r3
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	68da      	ldr	r2, [r3, #12]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	430a      	orrs	r2, r1
 8002a70:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	699b      	ldr	r3, [r3, #24]
 8002a76:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6a1b      	ldr	r3, [r3, #32]
 8002a7c:	697a      	ldr	r2, [r7, #20]
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	689b      	ldr	r3, [r3, #8]
 8002a88:	4a7d      	ldr	r2, [pc, #500]	; (8002c80 <UART_SetConfig+0x264>)
 8002a8a:	4013      	ands	r3, r2
 8002a8c:	0019      	movs	r1, r3
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	697a      	ldr	r2, [r7, #20]
 8002a94:	430a      	orrs	r2, r1
 8002a96:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a79      	ldr	r2, [pc, #484]	; (8002c84 <UART_SetConfig+0x268>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d125      	bne.n	8002aee <UART_SetConfig+0xd2>
 8002aa2:	4b79      	ldr	r3, [pc, #484]	; (8002c88 <UART_SetConfig+0x26c>)
 8002aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aa6:	2203      	movs	r2, #3
 8002aa8:	4013      	ands	r3, r2
 8002aaa:	2b01      	cmp	r3, #1
 8002aac:	d00f      	beq.n	8002ace <UART_SetConfig+0xb2>
 8002aae:	d304      	bcc.n	8002aba <UART_SetConfig+0x9e>
 8002ab0:	2b02      	cmp	r3, #2
 8002ab2:	d011      	beq.n	8002ad8 <UART_SetConfig+0xbc>
 8002ab4:	2b03      	cmp	r3, #3
 8002ab6:	d005      	beq.n	8002ac4 <UART_SetConfig+0xa8>
 8002ab8:	e013      	b.n	8002ae2 <UART_SetConfig+0xc6>
 8002aba:	231f      	movs	r3, #31
 8002abc:	18fb      	adds	r3, r7, r3
 8002abe:	2200      	movs	r2, #0
 8002ac0:	701a      	strb	r2, [r3, #0]
 8002ac2:	e022      	b.n	8002b0a <UART_SetConfig+0xee>
 8002ac4:	231f      	movs	r3, #31
 8002ac6:	18fb      	adds	r3, r7, r3
 8002ac8:	2202      	movs	r2, #2
 8002aca:	701a      	strb	r2, [r3, #0]
 8002acc:	e01d      	b.n	8002b0a <UART_SetConfig+0xee>
 8002ace:	231f      	movs	r3, #31
 8002ad0:	18fb      	adds	r3, r7, r3
 8002ad2:	2204      	movs	r2, #4
 8002ad4:	701a      	strb	r2, [r3, #0]
 8002ad6:	e018      	b.n	8002b0a <UART_SetConfig+0xee>
 8002ad8:	231f      	movs	r3, #31
 8002ada:	18fb      	adds	r3, r7, r3
 8002adc:	2208      	movs	r2, #8
 8002ade:	701a      	strb	r2, [r3, #0]
 8002ae0:	e013      	b.n	8002b0a <UART_SetConfig+0xee>
 8002ae2:	231f      	movs	r3, #31
 8002ae4:	18fb      	adds	r3, r7, r3
 8002ae6:	2210      	movs	r2, #16
 8002ae8:	701a      	strb	r2, [r3, #0]
 8002aea:	46c0      	nop			; (mov r8, r8)
 8002aec:	e00d      	b.n	8002b0a <UART_SetConfig+0xee>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4a66      	ldr	r2, [pc, #408]	; (8002c8c <UART_SetConfig+0x270>)
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d104      	bne.n	8002b02 <UART_SetConfig+0xe6>
 8002af8:	231f      	movs	r3, #31
 8002afa:	18fb      	adds	r3, r7, r3
 8002afc:	2200      	movs	r2, #0
 8002afe:	701a      	strb	r2, [r3, #0]
 8002b00:	e003      	b.n	8002b0a <UART_SetConfig+0xee>
 8002b02:	231f      	movs	r3, #31
 8002b04:	18fb      	adds	r3, r7, r3
 8002b06:	2210      	movs	r2, #16
 8002b08:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	69da      	ldr	r2, [r3, #28]
 8002b0e:	2380      	movs	r3, #128	; 0x80
 8002b10:	021b      	lsls	r3, r3, #8
 8002b12:	429a      	cmp	r2, r3
 8002b14:	d15c      	bne.n	8002bd0 <UART_SetConfig+0x1b4>
  {
    switch (clocksource)
 8002b16:	231f      	movs	r3, #31
 8002b18:	18fb      	adds	r3, r7, r3
 8002b1a:	781b      	ldrb	r3, [r3, #0]
 8002b1c:	2b02      	cmp	r3, #2
 8002b1e:	d00d      	beq.n	8002b3c <UART_SetConfig+0x120>
 8002b20:	dc02      	bgt.n	8002b28 <UART_SetConfig+0x10c>
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d005      	beq.n	8002b32 <UART_SetConfig+0x116>
 8002b26:	e015      	b.n	8002b54 <UART_SetConfig+0x138>
 8002b28:	2b04      	cmp	r3, #4
 8002b2a:	d00a      	beq.n	8002b42 <UART_SetConfig+0x126>
 8002b2c:	2b08      	cmp	r3, #8
 8002b2e:	d00d      	beq.n	8002b4c <UART_SetConfig+0x130>
 8002b30:	e010      	b.n	8002b54 <UART_SetConfig+0x138>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002b32:	f7fe fc17 	bl	8001364 <HAL_RCC_GetPCLK1Freq>
 8002b36:	0003      	movs	r3, r0
 8002b38:	61bb      	str	r3, [r7, #24]
        break;
 8002b3a:	e012      	b.n	8002b62 <UART_SetConfig+0x146>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002b3c:	4b54      	ldr	r3, [pc, #336]	; (8002c90 <UART_SetConfig+0x274>)
 8002b3e:	61bb      	str	r3, [r7, #24]
        break;
 8002b40:	e00f      	b.n	8002b62 <UART_SetConfig+0x146>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002b42:	f7fe fba1 	bl	8001288 <HAL_RCC_GetSysClockFreq>
 8002b46:	0003      	movs	r3, r0
 8002b48:	61bb      	str	r3, [r7, #24]
        break;
 8002b4a:	e00a      	b.n	8002b62 <UART_SetConfig+0x146>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002b4c:	2380      	movs	r3, #128	; 0x80
 8002b4e:	021b      	lsls	r3, r3, #8
 8002b50:	61bb      	str	r3, [r7, #24]
        break;
 8002b52:	e006      	b.n	8002b62 <UART_SetConfig+0x146>
      default:
        pclk = 0U;
 8002b54:	2300      	movs	r3, #0
 8002b56:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002b58:	231e      	movs	r3, #30
 8002b5a:	18fb      	adds	r3, r7, r3
 8002b5c:	2201      	movs	r2, #1
 8002b5e:	701a      	strb	r2, [r3, #0]
        break;
 8002b60:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002b62:	69bb      	ldr	r3, [r7, #24]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d100      	bne.n	8002b6a <UART_SetConfig+0x14e>
 8002b68:	e079      	b.n	8002c5e <UART_SetConfig+0x242>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002b6a:	69bb      	ldr	r3, [r7, #24]
 8002b6c:	005a      	lsls	r2, r3, #1
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	085b      	lsrs	r3, r3, #1
 8002b74:	18d2      	adds	r2, r2, r3
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	0019      	movs	r1, r3
 8002b7c:	0010      	movs	r0, r2
 8002b7e:	f7fd fac3 	bl	8000108 <__udivsi3>
 8002b82:	0003      	movs	r3, r0
 8002b84:	b29b      	uxth	r3, r3
 8002b86:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002b88:	693b      	ldr	r3, [r7, #16]
 8002b8a:	2b0f      	cmp	r3, #15
 8002b8c:	d91b      	bls.n	8002bc6 <UART_SetConfig+0x1aa>
 8002b8e:	693b      	ldr	r3, [r7, #16]
 8002b90:	4a40      	ldr	r2, [pc, #256]	; (8002c94 <UART_SetConfig+0x278>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d817      	bhi.n	8002bc6 <UART_SetConfig+0x1aa>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002b96:	693b      	ldr	r3, [r7, #16]
 8002b98:	b29a      	uxth	r2, r3
 8002b9a:	200e      	movs	r0, #14
 8002b9c:	183b      	adds	r3, r7, r0
 8002b9e:	210f      	movs	r1, #15
 8002ba0:	438a      	bics	r2, r1
 8002ba2:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002ba4:	693b      	ldr	r3, [r7, #16]
 8002ba6:	085b      	lsrs	r3, r3, #1
 8002ba8:	b29b      	uxth	r3, r3
 8002baa:	2207      	movs	r2, #7
 8002bac:	4013      	ands	r3, r2
 8002bae:	b299      	uxth	r1, r3
 8002bb0:	183b      	adds	r3, r7, r0
 8002bb2:	183a      	adds	r2, r7, r0
 8002bb4:	8812      	ldrh	r2, [r2, #0]
 8002bb6:	430a      	orrs	r2, r1
 8002bb8:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	183a      	adds	r2, r7, r0
 8002bc0:	8812      	ldrh	r2, [r2, #0]
 8002bc2:	60da      	str	r2, [r3, #12]
 8002bc4:	e04b      	b.n	8002c5e <UART_SetConfig+0x242>
      }
      else
      {
        ret = HAL_ERROR;
 8002bc6:	231e      	movs	r3, #30
 8002bc8:	18fb      	adds	r3, r7, r3
 8002bca:	2201      	movs	r2, #1
 8002bcc:	701a      	strb	r2, [r3, #0]
 8002bce:	e046      	b.n	8002c5e <UART_SetConfig+0x242>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002bd0:	231f      	movs	r3, #31
 8002bd2:	18fb      	adds	r3, r7, r3
 8002bd4:	781b      	ldrb	r3, [r3, #0]
 8002bd6:	2b02      	cmp	r3, #2
 8002bd8:	d00d      	beq.n	8002bf6 <UART_SetConfig+0x1da>
 8002bda:	dc02      	bgt.n	8002be2 <UART_SetConfig+0x1c6>
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d005      	beq.n	8002bec <UART_SetConfig+0x1d0>
 8002be0:	e015      	b.n	8002c0e <UART_SetConfig+0x1f2>
 8002be2:	2b04      	cmp	r3, #4
 8002be4:	d00a      	beq.n	8002bfc <UART_SetConfig+0x1e0>
 8002be6:	2b08      	cmp	r3, #8
 8002be8:	d00d      	beq.n	8002c06 <UART_SetConfig+0x1ea>
 8002bea:	e010      	b.n	8002c0e <UART_SetConfig+0x1f2>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002bec:	f7fe fbba 	bl	8001364 <HAL_RCC_GetPCLK1Freq>
 8002bf0:	0003      	movs	r3, r0
 8002bf2:	61bb      	str	r3, [r7, #24]
        break;
 8002bf4:	e012      	b.n	8002c1c <UART_SetConfig+0x200>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002bf6:	4b26      	ldr	r3, [pc, #152]	; (8002c90 <UART_SetConfig+0x274>)
 8002bf8:	61bb      	str	r3, [r7, #24]
        break;
 8002bfa:	e00f      	b.n	8002c1c <UART_SetConfig+0x200>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002bfc:	f7fe fb44 	bl	8001288 <HAL_RCC_GetSysClockFreq>
 8002c00:	0003      	movs	r3, r0
 8002c02:	61bb      	str	r3, [r7, #24]
        break;
 8002c04:	e00a      	b.n	8002c1c <UART_SetConfig+0x200>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002c06:	2380      	movs	r3, #128	; 0x80
 8002c08:	021b      	lsls	r3, r3, #8
 8002c0a:	61bb      	str	r3, [r7, #24]
        break;
 8002c0c:	e006      	b.n	8002c1c <UART_SetConfig+0x200>
      default:
        pclk = 0U;
 8002c0e:	2300      	movs	r3, #0
 8002c10:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002c12:	231e      	movs	r3, #30
 8002c14:	18fb      	adds	r3, r7, r3
 8002c16:	2201      	movs	r2, #1
 8002c18:	701a      	strb	r2, [r3, #0]
        break;
 8002c1a:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002c1c:	69bb      	ldr	r3, [r7, #24]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d01d      	beq.n	8002c5e <UART_SetConfig+0x242>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	085a      	lsrs	r2, r3, #1
 8002c28:	69bb      	ldr	r3, [r7, #24]
 8002c2a:	18d2      	adds	r2, r2, r3
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	0019      	movs	r1, r3
 8002c32:	0010      	movs	r0, r2
 8002c34:	f7fd fa68 	bl	8000108 <__udivsi3>
 8002c38:	0003      	movs	r3, r0
 8002c3a:	b29b      	uxth	r3, r3
 8002c3c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002c3e:	693b      	ldr	r3, [r7, #16]
 8002c40:	2b0f      	cmp	r3, #15
 8002c42:	d908      	bls.n	8002c56 <UART_SetConfig+0x23a>
 8002c44:	693b      	ldr	r3, [r7, #16]
 8002c46:	4a13      	ldr	r2, [pc, #76]	; (8002c94 <UART_SetConfig+0x278>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d804      	bhi.n	8002c56 <UART_SetConfig+0x23a>
      {
        huart->Instance->BRR = usartdiv;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	693a      	ldr	r2, [r7, #16]
 8002c52:	60da      	str	r2, [r3, #12]
 8002c54:	e003      	b.n	8002c5e <UART_SetConfig+0x242>
      }
      else
      {
        ret = HAL_ERROR;
 8002c56:	231e      	movs	r3, #30
 8002c58:	18fb      	adds	r3, r7, r3
 8002c5a:	2201      	movs	r2, #1
 8002c5c:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2200      	movs	r2, #0
 8002c62:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2200      	movs	r2, #0
 8002c68:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8002c6a:	231e      	movs	r3, #30
 8002c6c:	18fb      	adds	r3, r7, r3
 8002c6e:	781b      	ldrb	r3, [r3, #0]
}
 8002c70:	0018      	movs	r0, r3
 8002c72:	46bd      	mov	sp, r7
 8002c74:	b008      	add	sp, #32
 8002c76:	bd80      	pop	{r7, pc}
 8002c78:	ffff69f3 	.word	0xffff69f3
 8002c7c:	ffffcfff 	.word	0xffffcfff
 8002c80:	fffff4ff 	.word	0xfffff4ff
 8002c84:	40013800 	.word	0x40013800
 8002c88:	40021000 	.word	0x40021000
 8002c8c:	40004400 	.word	0x40004400
 8002c90:	007a1200 	.word	0x007a1200
 8002c94:	0000ffff 	.word	0x0000ffff

08002c98 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b082      	sub	sp, #8
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca4:	2201      	movs	r2, #1
 8002ca6:	4013      	ands	r3, r2
 8002ca8:	d00b      	beq.n	8002cc2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	4a4a      	ldr	r2, [pc, #296]	; (8002ddc <UART_AdvFeatureConfig+0x144>)
 8002cb2:	4013      	ands	r3, r2
 8002cb4:	0019      	movs	r1, r3
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	430a      	orrs	r2, r1
 8002cc0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cc6:	2202      	movs	r2, #2
 8002cc8:	4013      	ands	r3, r2
 8002cca:	d00b      	beq.n	8002ce4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	4a43      	ldr	r2, [pc, #268]	; (8002de0 <UART_AdvFeatureConfig+0x148>)
 8002cd4:	4013      	ands	r3, r2
 8002cd6:	0019      	movs	r1, r3
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	430a      	orrs	r2, r1
 8002ce2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ce8:	2204      	movs	r2, #4
 8002cea:	4013      	ands	r3, r2
 8002cec:	d00b      	beq.n	8002d06 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	4a3b      	ldr	r2, [pc, #236]	; (8002de4 <UART_AdvFeatureConfig+0x14c>)
 8002cf6:	4013      	ands	r3, r2
 8002cf8:	0019      	movs	r1, r3
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	430a      	orrs	r2, r1
 8002d04:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d0a:	2208      	movs	r2, #8
 8002d0c:	4013      	ands	r3, r2
 8002d0e:	d00b      	beq.n	8002d28 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	4a34      	ldr	r2, [pc, #208]	; (8002de8 <UART_AdvFeatureConfig+0x150>)
 8002d18:	4013      	ands	r3, r2
 8002d1a:	0019      	movs	r1, r3
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	430a      	orrs	r2, r1
 8002d26:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d2c:	2210      	movs	r2, #16
 8002d2e:	4013      	ands	r3, r2
 8002d30:	d00b      	beq.n	8002d4a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	689b      	ldr	r3, [r3, #8]
 8002d38:	4a2c      	ldr	r2, [pc, #176]	; (8002dec <UART_AdvFeatureConfig+0x154>)
 8002d3a:	4013      	ands	r3, r2
 8002d3c:	0019      	movs	r1, r3
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	430a      	orrs	r2, r1
 8002d48:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d4e:	2220      	movs	r2, #32
 8002d50:	4013      	ands	r3, r2
 8002d52:	d00b      	beq.n	8002d6c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	689b      	ldr	r3, [r3, #8]
 8002d5a:	4a25      	ldr	r2, [pc, #148]	; (8002df0 <UART_AdvFeatureConfig+0x158>)
 8002d5c:	4013      	ands	r3, r2
 8002d5e:	0019      	movs	r1, r3
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	430a      	orrs	r2, r1
 8002d6a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d70:	2240      	movs	r2, #64	; 0x40
 8002d72:	4013      	ands	r3, r2
 8002d74:	d01d      	beq.n	8002db2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	4a1d      	ldr	r2, [pc, #116]	; (8002df4 <UART_AdvFeatureConfig+0x15c>)
 8002d7e:	4013      	ands	r3, r2
 8002d80:	0019      	movs	r1, r3
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	430a      	orrs	r2, r1
 8002d8c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d92:	2380      	movs	r3, #128	; 0x80
 8002d94:	035b      	lsls	r3, r3, #13
 8002d96:	429a      	cmp	r2, r3
 8002d98:	d10b      	bne.n	8002db2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	4a15      	ldr	r2, [pc, #84]	; (8002df8 <UART_AdvFeatureConfig+0x160>)
 8002da2:	4013      	ands	r3, r2
 8002da4:	0019      	movs	r1, r3
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	430a      	orrs	r2, r1
 8002db0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db6:	2280      	movs	r2, #128	; 0x80
 8002db8:	4013      	ands	r3, r2
 8002dba:	d00b      	beq.n	8002dd4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	4a0e      	ldr	r2, [pc, #56]	; (8002dfc <UART_AdvFeatureConfig+0x164>)
 8002dc4:	4013      	ands	r3, r2
 8002dc6:	0019      	movs	r1, r3
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	430a      	orrs	r2, r1
 8002dd2:	605a      	str	r2, [r3, #4]
  }
}
 8002dd4:	46c0      	nop			; (mov r8, r8)
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	b002      	add	sp, #8
 8002dda:	bd80      	pop	{r7, pc}
 8002ddc:	fffdffff 	.word	0xfffdffff
 8002de0:	fffeffff 	.word	0xfffeffff
 8002de4:	fffbffff 	.word	0xfffbffff
 8002de8:	ffff7fff 	.word	0xffff7fff
 8002dec:	ffffefff 	.word	0xffffefff
 8002df0:	ffffdfff 	.word	0xffffdfff
 8002df4:	ffefffff 	.word	0xffefffff
 8002df8:	ff9fffff 	.word	0xff9fffff
 8002dfc:	fff7ffff 	.word	0xfff7ffff

08002e00 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b086      	sub	sp, #24
 8002e04:	af02      	add	r7, sp, #8
 8002e06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2280      	movs	r2, #128	; 0x80
 8002e0c:	2100      	movs	r1, #0
 8002e0e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002e10:	f7fd fb4a 	bl	80004a8 <HAL_GetTick>
 8002e14:	0003      	movs	r3, r0
 8002e16:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	2208      	movs	r2, #8
 8002e20:	4013      	ands	r3, r2
 8002e22:	2b08      	cmp	r3, #8
 8002e24:	d10d      	bne.n	8002e42 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002e26:	68fa      	ldr	r2, [r7, #12]
 8002e28:	2380      	movs	r3, #128	; 0x80
 8002e2a:	0399      	lsls	r1, r3, #14
 8002e2c:	6878      	ldr	r0, [r7, #4]
 8002e2e:	4b18      	ldr	r3, [pc, #96]	; (8002e90 <UART_CheckIdleState+0x90>)
 8002e30:	9300      	str	r3, [sp, #0]
 8002e32:	0013      	movs	r3, r2
 8002e34:	2200      	movs	r2, #0
 8002e36:	f000 f82d 	bl	8002e94 <UART_WaitOnFlagUntilTimeout>
 8002e3a:	1e03      	subs	r3, r0, #0
 8002e3c:	d001      	beq.n	8002e42 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002e3e:	2303      	movs	r3, #3
 8002e40:	e022      	b.n	8002e88 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	2204      	movs	r2, #4
 8002e4a:	4013      	ands	r3, r2
 8002e4c:	2b04      	cmp	r3, #4
 8002e4e:	d10d      	bne.n	8002e6c <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002e50:	68fa      	ldr	r2, [r7, #12]
 8002e52:	2380      	movs	r3, #128	; 0x80
 8002e54:	03d9      	lsls	r1, r3, #15
 8002e56:	6878      	ldr	r0, [r7, #4]
 8002e58:	4b0d      	ldr	r3, [pc, #52]	; (8002e90 <UART_CheckIdleState+0x90>)
 8002e5a:	9300      	str	r3, [sp, #0]
 8002e5c:	0013      	movs	r3, r2
 8002e5e:	2200      	movs	r2, #0
 8002e60:	f000 f818 	bl	8002e94 <UART_WaitOnFlagUntilTimeout>
 8002e64:	1e03      	subs	r3, r0, #0
 8002e66:	d001      	beq.n	8002e6c <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002e68:	2303      	movs	r3, #3
 8002e6a:	e00d      	b.n	8002e88 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2220      	movs	r2, #32
 8002e70:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2220      	movs	r2, #32
 8002e76:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2274      	movs	r2, #116	; 0x74
 8002e82:	2100      	movs	r1, #0
 8002e84:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002e86:	2300      	movs	r3, #0
}
 8002e88:	0018      	movs	r0, r3
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	b004      	add	sp, #16
 8002e8e:	bd80      	pop	{r7, pc}
 8002e90:	01ffffff 	.word	0x01ffffff

08002e94 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b094      	sub	sp, #80	; 0x50
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	60f8      	str	r0, [r7, #12]
 8002e9c:	60b9      	str	r1, [r7, #8]
 8002e9e:	603b      	str	r3, [r7, #0]
 8002ea0:	1dfb      	adds	r3, r7, #7
 8002ea2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ea4:	e09b      	b.n	8002fde <UART_WaitOnFlagUntilTimeout+0x14a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ea6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ea8:	3301      	adds	r3, #1
 8002eaa:	d100      	bne.n	8002eae <UART_WaitOnFlagUntilTimeout+0x1a>
 8002eac:	e097      	b.n	8002fde <UART_WaitOnFlagUntilTimeout+0x14a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002eae:	f7fd fafb 	bl	80004a8 <HAL_GetTick>
 8002eb2:	0002      	movs	r2, r0
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	1ad3      	subs	r3, r2, r3
 8002eb8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002eba:	429a      	cmp	r2, r3
 8002ebc:	d302      	bcc.n	8002ec4 <UART_WaitOnFlagUntilTimeout+0x30>
 8002ebe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d139      	bne.n	8002f38 <UART_WaitOnFlagUntilTimeout+0xa4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ec4:	f3ef 8310 	mrs	r3, PRIMASK
 8002ec8:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8002eca:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002ecc:	647b      	str	r3, [r7, #68]	; 0x44
 8002ece:	2301      	movs	r3, #1
 8002ed0:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ed2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ed4:	f383 8810 	msr	PRIMASK, r3
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	681a      	ldr	r2, [r3, #0]
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4949      	ldr	r1, [pc, #292]	; (8003008 <UART_WaitOnFlagUntilTimeout+0x174>)
 8002ee4:	400a      	ands	r2, r1
 8002ee6:	601a      	str	r2, [r3, #0]
 8002ee8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002eea:	633b      	str	r3, [r7, #48]	; 0x30
 8002eec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eee:	f383 8810 	msr	PRIMASK, r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ef2:	f3ef 8310 	mrs	r3, PRIMASK
 8002ef6:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8002ef8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002efa:	643b      	str	r3, [r7, #64]	; 0x40
 8002efc:	2301      	movs	r3, #1
 8002efe:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f02:	f383 8810 	msr	PRIMASK, r3
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	689a      	ldr	r2, [r3, #8]
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	2101      	movs	r1, #1
 8002f12:	438a      	bics	r2, r1
 8002f14:	609a      	str	r2, [r3, #8]
 8002f16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f18:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f1c:	f383 8810 	msr	PRIMASK, r3

        huart->gState = HAL_UART_STATE_READY;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	2220      	movs	r2, #32
 8002f24:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	2220      	movs	r2, #32
 8002f2a:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	2274      	movs	r2, #116	; 0x74
 8002f30:	2100      	movs	r1, #0
 8002f32:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002f34:	2303      	movs	r3, #3
 8002f36:	e063      	b.n	8003000 <UART_WaitOnFlagUntilTimeout+0x16c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	2204      	movs	r2, #4
 8002f40:	4013      	ands	r3, r2
 8002f42:	d04c      	beq.n	8002fde <UART_WaitOnFlagUntilTimeout+0x14a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	69da      	ldr	r2, [r3, #28]
 8002f4a:	2380      	movs	r3, #128	; 0x80
 8002f4c:	011b      	lsls	r3, r3, #4
 8002f4e:	401a      	ands	r2, r3
 8002f50:	2380      	movs	r3, #128	; 0x80
 8002f52:	011b      	lsls	r3, r3, #4
 8002f54:	429a      	cmp	r2, r3
 8002f56:	d142      	bne.n	8002fde <UART_WaitOnFlagUntilTimeout+0x14a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	2280      	movs	r2, #128	; 0x80
 8002f5e:	0112      	lsls	r2, r2, #4
 8002f60:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f62:	f3ef 8310 	mrs	r3, PRIMASK
 8002f66:	613b      	str	r3, [r7, #16]
  return(result);
 8002f68:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002f6a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f70:	697b      	ldr	r3, [r7, #20]
 8002f72:	f383 8810 	msr	PRIMASK, r3
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	681a      	ldr	r2, [r3, #0]
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4921      	ldr	r1, [pc, #132]	; (8003008 <UART_WaitOnFlagUntilTimeout+0x174>)
 8002f82:	400a      	ands	r2, r1
 8002f84:	601a      	str	r2, [r3, #0]
 8002f86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f88:	61bb      	str	r3, [r7, #24]
 8002f8a:	69bb      	ldr	r3, [r7, #24]
 8002f8c:	f383 8810 	msr	PRIMASK, r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f90:	f3ef 8310 	mrs	r3, PRIMASK
 8002f94:	61fb      	str	r3, [r7, #28]
  return(result);
 8002f96:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f98:	64bb      	str	r3, [r7, #72]	; 0x48
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f9e:	6a3b      	ldr	r3, [r7, #32]
 8002fa0:	f383 8810 	msr	PRIMASK, r3
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	689a      	ldr	r2, [r3, #8]
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	2101      	movs	r1, #1
 8002fb0:	438a      	bics	r2, r1
 8002fb2:	609a      	str	r2, [r3, #8]
 8002fb4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002fb6:	627b      	str	r3, [r7, #36]	; 0x24
 8002fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fba:	f383 8810 	msr	PRIMASK, r3

          huart->gState = HAL_UART_STATE_READY;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	2220      	movs	r2, #32
 8002fc2:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	2220      	movs	r2, #32
 8002fc8:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	2280      	movs	r2, #128	; 0x80
 8002fce:	2120      	movs	r1, #32
 8002fd0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	2274      	movs	r2, #116	; 0x74
 8002fd6:	2100      	movs	r1, #0
 8002fd8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002fda:	2303      	movs	r3, #3
 8002fdc:	e010      	b.n	8003000 <UART_WaitOnFlagUntilTimeout+0x16c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	69db      	ldr	r3, [r3, #28]
 8002fe4:	68ba      	ldr	r2, [r7, #8]
 8002fe6:	4013      	ands	r3, r2
 8002fe8:	68ba      	ldr	r2, [r7, #8]
 8002fea:	1ad3      	subs	r3, r2, r3
 8002fec:	425a      	negs	r2, r3
 8002fee:	4153      	adcs	r3, r2
 8002ff0:	b2db      	uxtb	r3, r3
 8002ff2:	001a      	movs	r2, r3
 8002ff4:	1dfb      	adds	r3, r7, #7
 8002ff6:	781b      	ldrb	r3, [r3, #0]
 8002ff8:	429a      	cmp	r2, r3
 8002ffa:	d100      	bne.n	8002ffe <UART_WaitOnFlagUntilTimeout+0x16a>
 8002ffc:	e753      	b.n	8002ea6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002ffe:	2300      	movs	r3, #0
}
 8003000:	0018      	movs	r0, r3
 8003002:	46bd      	mov	sp, r7
 8003004:	b014      	add	sp, #80	; 0x50
 8003006:	bd80      	pop	{r7, pc}
 8003008:	fffffe5f 	.word	0xfffffe5f

0800300c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b08c      	sub	sp, #48	; 0x30
 8003010:	af00      	add	r7, sp, #0
 8003012:	60f8      	str	r0, [r7, #12]
 8003014:	60b9      	str	r1, [r7, #8]
 8003016:	1dbb      	adds	r3, r7, #6
 8003018:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	68ba      	ldr	r2, [r7, #8]
 800301e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	1dba      	adds	r2, r7, #6
 8003024:	2158      	movs	r1, #88	; 0x58
 8003026:	8812      	ldrh	r2, [r2, #0]
 8003028:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	1dba      	adds	r2, r7, #6
 800302e:	215a      	movs	r1, #90	; 0x5a
 8003030:	8812      	ldrh	r2, [r2, #0]
 8003032:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	2200      	movs	r2, #0
 8003038:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	689a      	ldr	r2, [r3, #8]
 800303e:	2380      	movs	r3, #128	; 0x80
 8003040:	015b      	lsls	r3, r3, #5
 8003042:	429a      	cmp	r2, r3
 8003044:	d10d      	bne.n	8003062 <UART_Start_Receive_IT+0x56>
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	691b      	ldr	r3, [r3, #16]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d104      	bne.n	8003058 <UART_Start_Receive_IT+0x4c>
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	225c      	movs	r2, #92	; 0x5c
 8003052:	4937      	ldr	r1, [pc, #220]	; (8003130 <UART_Start_Receive_IT+0x124>)
 8003054:	5299      	strh	r1, [r3, r2]
 8003056:	e01a      	b.n	800308e <UART_Start_Receive_IT+0x82>
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	225c      	movs	r2, #92	; 0x5c
 800305c:	21ff      	movs	r1, #255	; 0xff
 800305e:	5299      	strh	r1, [r3, r2]
 8003060:	e015      	b.n	800308e <UART_Start_Receive_IT+0x82>
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	689b      	ldr	r3, [r3, #8]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d10d      	bne.n	8003086 <UART_Start_Receive_IT+0x7a>
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	691b      	ldr	r3, [r3, #16]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d104      	bne.n	800307c <UART_Start_Receive_IT+0x70>
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	225c      	movs	r2, #92	; 0x5c
 8003076:	21ff      	movs	r1, #255	; 0xff
 8003078:	5299      	strh	r1, [r3, r2]
 800307a:	e008      	b.n	800308e <UART_Start_Receive_IT+0x82>
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	225c      	movs	r2, #92	; 0x5c
 8003080:	217f      	movs	r1, #127	; 0x7f
 8003082:	5299      	strh	r1, [r3, r2]
 8003084:	e003      	b.n	800308e <UART_Start_Receive_IT+0x82>
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	225c      	movs	r2, #92	; 0x5c
 800308a:	2100      	movs	r1, #0
 800308c:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	2280      	movs	r2, #128	; 0x80
 8003092:	2100      	movs	r1, #0
 8003094:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	2222      	movs	r2, #34	; 0x22
 800309a:	67da      	str	r2, [r3, #124]	; 0x7c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800309c:	f3ef 8310 	mrs	r3, PRIMASK
 80030a0:	61fb      	str	r3, [r7, #28]
  return(result);
 80030a2:	69fb      	ldr	r3, [r7, #28]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80030a6:	2301      	movs	r3, #1
 80030a8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030aa:	6a3b      	ldr	r3, [r7, #32]
 80030ac:	f383 8810 	msr	PRIMASK, r3
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	689a      	ldr	r2, [r3, #8]
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	2101      	movs	r1, #1
 80030bc:	430a      	orrs	r2, r1
 80030be:	609a      	str	r2, [r3, #8]
 80030c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030c2:	627b      	str	r3, [r7, #36]	; 0x24
 80030c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030c6:	f383 8810 	msr	PRIMASK, r3

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	689a      	ldr	r2, [r3, #8]
 80030ce:	2380      	movs	r3, #128	; 0x80
 80030d0:	015b      	lsls	r3, r3, #5
 80030d2:	429a      	cmp	r2, r3
 80030d4:	d107      	bne.n	80030e6 <UART_Start_Receive_IT+0xda>
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	691b      	ldr	r3, [r3, #16]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d103      	bne.n	80030e6 <UART_Start_Receive_IT+0xda>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	4a14      	ldr	r2, [pc, #80]	; (8003134 <UART_Start_Receive_IT+0x128>)
 80030e2:	665a      	str	r2, [r3, #100]	; 0x64
 80030e4:	e002      	b.n	80030ec <UART_Start_Receive_IT+0xe0>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	4a13      	ldr	r2, [pc, #76]	; (8003138 <UART_Start_Receive_IT+0x12c>)
 80030ea:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	2274      	movs	r2, #116	; 0x74
 80030f0:	2100      	movs	r1, #0
 80030f2:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80030f4:	f3ef 8310 	mrs	r3, PRIMASK
 80030f8:	613b      	str	r3, [r7, #16]
  return(result);
 80030fa:	693b      	ldr	r3, [r7, #16]

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80030fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80030fe:	2301      	movs	r3, #1
 8003100:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003102:	697b      	ldr	r3, [r7, #20]
 8003104:	f383 8810 	msr	PRIMASK, r3
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	681a      	ldr	r2, [r3, #0]
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	2190      	movs	r1, #144	; 0x90
 8003114:	0049      	lsls	r1, r1, #1
 8003116:	430a      	orrs	r2, r1
 8003118:	601a      	str	r2, [r3, #0]
 800311a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800311c:	61bb      	str	r3, [r7, #24]
 800311e:	69bb      	ldr	r3, [r7, #24]
 8003120:	f383 8810 	msr	PRIMASK, r3
  return HAL_OK;
 8003124:	2300      	movs	r3, #0
}
 8003126:	0018      	movs	r0, r3
 8003128:	46bd      	mov	sp, r7
 800312a:	b00c      	add	sp, #48	; 0x30
 800312c:	bd80      	pop	{r7, pc}
 800312e:	46c0      	nop			; (mov r8, r8)
 8003130:	000001ff 	.word	0x000001ff
 8003134:	080033d1 	.word	0x080033d1
 8003138:	08003275 	.word	0x08003275

0800313c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b08e      	sub	sp, #56	; 0x38
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003144:	f3ef 8310 	mrs	r3, PRIMASK
 8003148:	617b      	str	r3, [r7, #20]
  return(result);
 800314a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800314c:	637b      	str	r3, [r7, #52]	; 0x34
 800314e:	2301      	movs	r3, #1
 8003150:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003152:	69bb      	ldr	r3, [r7, #24]
 8003154:	f383 8810 	msr	PRIMASK, r3
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	681a      	ldr	r2, [r3, #0]
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4923      	ldr	r1, [pc, #140]	; (80031f0 <UART_EndRxTransfer+0xb4>)
 8003164:	400a      	ands	r2, r1
 8003166:	601a      	str	r2, [r3, #0]
 8003168:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800316a:	61fb      	str	r3, [r7, #28]
 800316c:	69fb      	ldr	r3, [r7, #28]
 800316e:	f383 8810 	msr	PRIMASK, r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003172:	f3ef 8310 	mrs	r3, PRIMASK
 8003176:	623b      	str	r3, [r7, #32]
  return(result);
 8003178:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800317a:	633b      	str	r3, [r7, #48]	; 0x30
 800317c:	2301      	movs	r3, #1
 800317e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003182:	f383 8810 	msr	PRIMASK, r3
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	689a      	ldr	r2, [r3, #8]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	2101      	movs	r1, #1
 8003192:	438a      	bics	r2, r1
 8003194:	609a      	str	r2, [r3, #8]
 8003196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003198:	62bb      	str	r3, [r7, #40]	; 0x28
 800319a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800319c:	f383 8810 	msr	PRIMASK, r3

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031a4:	2b01      	cmp	r3, #1
 80031a6:	d116      	bne.n	80031d6 <UART_EndRxTransfer+0x9a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80031a8:	f3ef 8310 	mrs	r3, PRIMASK
 80031ac:	60bb      	str	r3, [r7, #8]
  return(result);
 80031ae:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80031b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80031b2:	2301      	movs	r3, #1
 80031b4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	f383 8810 	msr	PRIMASK, r3
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	681a      	ldr	r2, [r3, #0]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	2110      	movs	r1, #16
 80031c8:	438a      	bics	r2, r1
 80031ca:	601a      	str	r2, [r3, #0]
 80031cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031ce:	613b      	str	r3, [r7, #16]
 80031d0:	693b      	ldr	r3, [r7, #16]
 80031d2:	f383 8810 	msr	PRIMASK, r3
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2220      	movs	r2, #32
 80031da:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2200      	movs	r2, #0
 80031e0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2200      	movs	r2, #0
 80031e6:	665a      	str	r2, [r3, #100]	; 0x64
}
 80031e8:	46c0      	nop			; (mov r8, r8)
 80031ea:	46bd      	mov	sp, r7
 80031ec:	b00e      	add	sp, #56	; 0x38
 80031ee:	bd80      	pop	{r7, pc}
 80031f0:	fffffedf 	.word	0xfffffedf

080031f4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b084      	sub	sp, #16
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003200:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	225a      	movs	r2, #90	; 0x5a
 8003206:	2100      	movs	r1, #0
 8003208:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	2252      	movs	r2, #82	; 0x52
 800320e:	2100      	movs	r1, #0
 8003210:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	0018      	movs	r0, r3
 8003216:	f7ff fbed 	bl	80029f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800321a:	46c0      	nop			; (mov r8, r8)
 800321c:	46bd      	mov	sp, r7
 800321e:	b004      	add	sp, #16
 8003220:	bd80      	pop	{r7, pc}

08003222 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003222:	b580      	push	{r7, lr}
 8003224:	b086      	sub	sp, #24
 8003226:	af00      	add	r7, sp, #0
 8003228:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800322a:	f3ef 8310 	mrs	r3, PRIMASK
 800322e:	60bb      	str	r3, [r7, #8]
  return(result);
 8003230:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003232:	617b      	str	r3, [r7, #20]
 8003234:	2301      	movs	r3, #1
 8003236:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	f383 8810 	msr	PRIMASK, r3
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	681a      	ldr	r2, [r3, #0]
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	2140      	movs	r1, #64	; 0x40
 800324a:	438a      	bics	r2, r1
 800324c:	601a      	str	r2, [r3, #0]
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	613b      	str	r3, [r7, #16]
 8003252:	693b      	ldr	r3, [r7, #16]
 8003254:	f383 8810 	msr	PRIMASK, r3

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2220      	movs	r2, #32
 800325c:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2200      	movs	r2, #0
 8003262:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	0018      	movs	r0, r3
 8003268:	f000 fd56 	bl	8003d18 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800326c:	46c0      	nop			; (mov r8, r8)
 800326e:	46bd      	mov	sp, r7
 8003270:	b006      	add	sp, #24
 8003272:	bd80      	pop	{r7, pc}

08003274 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b090      	sub	sp, #64	; 0x40
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800327c:	233e      	movs	r3, #62	; 0x3e
 800327e:	18fb      	adds	r3, r7, r3
 8003280:	687a      	ldr	r2, [r7, #4]
 8003282:	215c      	movs	r1, #92	; 0x5c
 8003284:	5a52      	ldrh	r2, [r2, r1]
 8003286:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800328c:	2b22      	cmp	r3, #34	; 0x22
 800328e:	d000      	beq.n	8003292 <UART_RxISR_8BIT+0x1e>
 8003290:	e090      	b.n	80033b4 <UART_RxISR_8BIT+0x140>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681a      	ldr	r2, [r3, #0]
 8003296:	213c      	movs	r1, #60	; 0x3c
 8003298:	187b      	adds	r3, r7, r1
 800329a:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 800329c:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800329e:	187b      	adds	r3, r7, r1
 80032a0:	881b      	ldrh	r3, [r3, #0]
 80032a2:	b2da      	uxtb	r2, r3
 80032a4:	233e      	movs	r3, #62	; 0x3e
 80032a6:	18fb      	adds	r3, r7, r3
 80032a8:	881b      	ldrh	r3, [r3, #0]
 80032aa:	b2d9      	uxtb	r1, r3
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032b0:	400a      	ands	r2, r1
 80032b2:	b2d2      	uxtb	r2, r2
 80032b4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032ba:	1c5a      	adds	r2, r3, #1
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	225a      	movs	r2, #90	; 0x5a
 80032c4:	5a9b      	ldrh	r3, [r3, r2]
 80032c6:	b29b      	uxth	r3, r3
 80032c8:	3b01      	subs	r3, #1
 80032ca:	b299      	uxth	r1, r3
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	225a      	movs	r2, #90	; 0x5a
 80032d0:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	225a      	movs	r2, #90	; 0x5a
 80032d6:	5a9b      	ldrh	r3, [r3, r2]
 80032d8:	b29b      	uxth	r3, r3
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d172      	bne.n	80033c4 <UART_RxISR_8BIT+0x150>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80032de:	f3ef 8310 	mrs	r3, PRIMASK
 80032e2:	61bb      	str	r3, [r7, #24]
  return(result);
 80032e4:	69bb      	ldr	r3, [r7, #24]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80032e6:	63bb      	str	r3, [r7, #56]	; 0x38
 80032e8:	2301      	movs	r3, #1
 80032ea:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032ec:	69fb      	ldr	r3, [r7, #28]
 80032ee:	f383 8810 	msr	PRIMASK, r3
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	681a      	ldr	r2, [r3, #0]
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4933      	ldr	r1, [pc, #204]	; (80033cc <UART_RxISR_8BIT+0x158>)
 80032fe:	400a      	ands	r2, r1
 8003300:	601a      	str	r2, [r3, #0]
 8003302:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003304:	623b      	str	r3, [r7, #32]
 8003306:	6a3b      	ldr	r3, [r7, #32]
 8003308:	f383 8810 	msr	PRIMASK, r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800330c:	f3ef 8310 	mrs	r3, PRIMASK
 8003310:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003312:	6a7b      	ldr	r3, [r7, #36]	; 0x24

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003314:	637b      	str	r3, [r7, #52]	; 0x34
 8003316:	2301      	movs	r3, #1
 8003318:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800331a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800331c:	f383 8810 	msr	PRIMASK, r3
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	689a      	ldr	r2, [r3, #8]
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	2101      	movs	r1, #1
 800332c:	438a      	bics	r2, r1
 800332e:	609a      	str	r2, [r3, #8]
 8003330:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003332:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003334:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003336:	f383 8810 	msr	PRIMASK, r3

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2220      	movs	r2, #32
 800333e:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2200      	movs	r2, #0
 8003344:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800334a:	2b01      	cmp	r3, #1
 800334c:	d12d      	bne.n	80033aa <UART_RxISR_8BIT+0x136>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2200      	movs	r2, #0
 8003352:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003354:	f3ef 8310 	mrs	r3, PRIMASK
 8003358:	60fb      	str	r3, [r7, #12]
  return(result);
 800335a:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800335c:	633b      	str	r3, [r7, #48]	; 0x30
 800335e:	2301      	movs	r3, #1
 8003360:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003362:	693b      	ldr	r3, [r7, #16]
 8003364:	f383 8810 	msr	PRIMASK, r3
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	681a      	ldr	r2, [r3, #0]
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	2110      	movs	r1, #16
 8003374:	438a      	bics	r2, r1
 8003376:	601a      	str	r2, [r3, #0]
 8003378:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800337a:	617b      	str	r3, [r7, #20]
 800337c:	697b      	ldr	r3, [r7, #20]
 800337e:	f383 8810 	msr	PRIMASK, r3

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	69db      	ldr	r3, [r3, #28]
 8003388:	2210      	movs	r2, #16
 800338a:	4013      	ands	r3, r2
 800338c:	2b10      	cmp	r3, #16
 800338e:	d103      	bne.n	8003398 <UART_RxISR_8BIT+0x124>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	2210      	movs	r2, #16
 8003396:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2258      	movs	r2, #88	; 0x58
 800339c:	5a9a      	ldrh	r2, [r3, r2]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	0011      	movs	r1, r2
 80033a2:	0018      	movs	r0, r3
 80033a4:	f7ff fb2e 	bl	8002a04 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80033a8:	e00c      	b.n	80033c4 <UART_RxISR_8BIT+0x150>
        HAL_UART_RxCpltCallback(huart);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	0018      	movs	r0, r3
 80033ae:	f000 fcbb 	bl	8003d28 <HAL_UART_RxCpltCallback>
}
 80033b2:	e007      	b.n	80033c4 <UART_RxISR_8BIT+0x150>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	699a      	ldr	r2, [r3, #24]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	2108      	movs	r1, #8
 80033c0:	430a      	orrs	r2, r1
 80033c2:	619a      	str	r2, [r3, #24]
}
 80033c4:	46c0      	nop			; (mov r8, r8)
 80033c6:	46bd      	mov	sp, r7
 80033c8:	b010      	add	sp, #64	; 0x40
 80033ca:	bd80      	pop	{r7, pc}
 80033cc:	fffffedf 	.word	0xfffffedf

080033d0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b090      	sub	sp, #64	; 0x40
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80033d8:	233e      	movs	r3, #62	; 0x3e
 80033da:	18fb      	adds	r3, r7, r3
 80033dc:	687a      	ldr	r2, [r7, #4]
 80033de:	215c      	movs	r1, #92	; 0x5c
 80033e0:	5a52      	ldrh	r2, [r2, r1]
 80033e2:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80033e8:	2b22      	cmp	r3, #34	; 0x22
 80033ea:	d000      	beq.n	80033ee <UART_RxISR_16BIT+0x1e>
 80033ec:	e090      	b.n	8003510 <UART_RxISR_16BIT+0x140>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681a      	ldr	r2, [r3, #0]
 80033f2:	213c      	movs	r1, #60	; 0x3c
 80033f4:	187b      	adds	r3, r7, r1
 80033f6:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 80033f8:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033fe:	63bb      	str	r3, [r7, #56]	; 0x38
    *tmp = (uint16_t)(uhdata & uhMask);
 8003400:	187b      	adds	r3, r7, r1
 8003402:	223e      	movs	r2, #62	; 0x3e
 8003404:	18ba      	adds	r2, r7, r2
 8003406:	881b      	ldrh	r3, [r3, #0]
 8003408:	8812      	ldrh	r2, [r2, #0]
 800340a:	4013      	ands	r3, r2
 800340c:	b29a      	uxth	r2, r3
 800340e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003410:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003416:	1c9a      	adds	r2, r3, #2
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	225a      	movs	r2, #90	; 0x5a
 8003420:	5a9b      	ldrh	r3, [r3, r2]
 8003422:	b29b      	uxth	r3, r3
 8003424:	3b01      	subs	r3, #1
 8003426:	b299      	uxth	r1, r3
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	225a      	movs	r2, #90	; 0x5a
 800342c:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	225a      	movs	r2, #90	; 0x5a
 8003432:	5a9b      	ldrh	r3, [r3, r2]
 8003434:	b29b      	uxth	r3, r3
 8003436:	2b00      	cmp	r3, #0
 8003438:	d172      	bne.n	8003520 <UART_RxISR_16BIT+0x150>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800343a:	f3ef 8310 	mrs	r3, PRIMASK
 800343e:	617b      	str	r3, [r7, #20]
  return(result);
 8003440:	697b      	ldr	r3, [r7, #20]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003442:	637b      	str	r3, [r7, #52]	; 0x34
 8003444:	2301      	movs	r3, #1
 8003446:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003448:	69bb      	ldr	r3, [r7, #24]
 800344a:	f383 8810 	msr	PRIMASK, r3
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	681a      	ldr	r2, [r3, #0]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4933      	ldr	r1, [pc, #204]	; (8003528 <UART_RxISR_16BIT+0x158>)
 800345a:	400a      	ands	r2, r1
 800345c:	601a      	str	r2, [r3, #0]
 800345e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003460:	61fb      	str	r3, [r7, #28]
 8003462:	69fb      	ldr	r3, [r7, #28]
 8003464:	f383 8810 	msr	PRIMASK, r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003468:	f3ef 8310 	mrs	r3, PRIMASK
 800346c:	623b      	str	r3, [r7, #32]
  return(result);
 800346e:	6a3b      	ldr	r3, [r7, #32]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003470:	633b      	str	r3, [r7, #48]	; 0x30
 8003472:	2301      	movs	r3, #1
 8003474:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003478:	f383 8810 	msr	PRIMASK, r3
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	689a      	ldr	r2, [r3, #8]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	2101      	movs	r1, #1
 8003488:	438a      	bics	r2, r1
 800348a:	609a      	str	r2, [r3, #8]
 800348c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800348e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003492:	f383 8810 	msr	PRIMASK, r3

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2220      	movs	r2, #32
 800349a:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2200      	movs	r2, #0
 80034a0:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034a6:	2b01      	cmp	r3, #1
 80034a8:	d12d      	bne.n	8003506 <UART_RxISR_16BIT+0x136>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2200      	movs	r2, #0
 80034ae:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80034b0:	f3ef 8310 	mrs	r3, PRIMASK
 80034b4:	60bb      	str	r3, [r7, #8]
  return(result);
 80034b6:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80034b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80034ba:	2301      	movs	r3, #1
 80034bc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	f383 8810 	msr	PRIMASK, r3
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	681a      	ldr	r2, [r3, #0]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	2110      	movs	r1, #16
 80034d0:	438a      	bics	r2, r1
 80034d2:	601a      	str	r2, [r3, #0]
 80034d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034d6:	613b      	str	r3, [r7, #16]
 80034d8:	693b      	ldr	r3, [r7, #16]
 80034da:	f383 8810 	msr	PRIMASK, r3

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	69db      	ldr	r3, [r3, #28]
 80034e4:	2210      	movs	r2, #16
 80034e6:	4013      	ands	r3, r2
 80034e8:	2b10      	cmp	r3, #16
 80034ea:	d103      	bne.n	80034f4 <UART_RxISR_16BIT+0x124>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	2210      	movs	r2, #16
 80034f2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2258      	movs	r2, #88	; 0x58
 80034f8:	5a9a      	ldrh	r2, [r3, r2]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	0011      	movs	r1, r2
 80034fe:	0018      	movs	r0, r3
 8003500:	f7ff fa80 	bl	8002a04 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003504:	e00c      	b.n	8003520 <UART_RxISR_16BIT+0x150>
        HAL_UART_RxCpltCallback(huart);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	0018      	movs	r0, r3
 800350a:	f000 fc0d 	bl	8003d28 <HAL_UART_RxCpltCallback>
}
 800350e:	e007      	b.n	8003520 <UART_RxISR_16BIT+0x150>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	699a      	ldr	r2, [r3, #24]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	2108      	movs	r1, #8
 800351c:	430a      	orrs	r2, r1
 800351e:	619a      	str	r2, [r3, #24]
}
 8003520:	46c0      	nop			; (mov r8, r8)
 8003522:	46bd      	mov	sp, r7
 8003524:	b010      	add	sp, #64	; 0x40
 8003526:	bd80      	pop	{r7, pc}
 8003528:	fffffedf 	.word	0xfffffedf

0800352c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b082      	sub	sp, #8
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003534:	46c0      	nop			; (mov r8, r8)
 8003536:	46bd      	mov	sp, r7
 8003538:	b002      	add	sp, #8
 800353a:	bd80      	pop	{r7, pc}

0800353c <Play_Melody>:
		/*tempo*/	{8, 8, 8},
		/*Count*/	3
};


void Play_Melody(Melody_Typedef MelodyName ,uint8_t Volume){
 800353c:	b084      	sub	sp, #16
 800353e:	b5b0      	push	{r4, r5, r7, lr}
 8003540:	b082      	sub	sp, #8
 8003542:	af00      	add	r7, sp, #0
 8003544:	2418      	movs	r4, #24
 8003546:	193c      	adds	r4, r7, r4
 8003548:	6020      	str	r0, [r4, #0]
 800354a:	6061      	str	r1, [r4, #4]
 800354c:	60a2      	str	r2, [r4, #8]
 800354e:	60e3      	str	r3, [r4, #12]

	//Volume = 10;

	__HAL_TIM_SET_COMPARE(&htim, TIM_CHANNEL, Volume);
 8003550:	4b2d      	ldr	r3, [pc, #180]	; (8003608 <Play_Melody+0xcc>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	2298      	movs	r2, #152	; 0x98
 8003556:	2118      	movs	r1, #24
 8003558:	468c      	mov	ip, r1
 800355a:	44bc      	add	ip, r7
 800355c:	4462      	add	r2, ip
 800355e:	7812      	ldrb	r2, [r2, #0]
 8003560:	635a      	str	r2, [r3, #52]	; 0x34

	TIM_CCxChannelCmd(TIMER, TIM_CHANNEL, TIM_CCx_ENABLE);
 8003562:	4b2a      	ldr	r3, [pc, #168]	; (800360c <Play_Melody+0xd0>)
 8003564:	2201      	movs	r2, #1
 8003566:	2100      	movs	r1, #0
 8003568:	0018      	movs	r0, r3
 800356a:	f7fe fe3d 	bl	80021e8 <TIM_CCxChannelCmd>

	for(uint8_t i=0; i < MelodyName.noteCount; i++){
 800356e:	1dfb      	adds	r3, r7, #7
 8003570:	2200      	movs	r2, #0
 8003572:	701a      	strb	r2, [r3, #0]
 8003574:	e033      	b.n	80035de <Play_Melody+0xa2>

		TIM_CCxChannelCmd(TIMER, TIM_CHANNEL, TIM_CCx_ENABLE);
 8003576:	4b25      	ldr	r3, [pc, #148]	; (800360c <Play_Melody+0xd0>)
 8003578:	2201      	movs	r2, #1
 800357a:	2100      	movs	r1, #0
 800357c:	0018      	movs	r0, r3
 800357e:	f7fe fe33 	bl	80021e8 <TIM_CCxChannelCmd>

		TIMER->PSC = SET_FREQ(MelodyName.notes[i]);
 8003582:	4b23      	ldr	r3, [pc, #140]	; (8003610 <Play_Melody+0xd4>)
 8003584:	681a      	ldr	r2, [r3, #0]
 8003586:	1dfb      	adds	r3, r7, #7
 8003588:	781b      	ldrb	r3, [r3, #0]
 800358a:	2518      	movs	r5, #24
 800358c:	1979      	adds	r1, r7, r5
 800358e:	005b      	lsls	r3, r3, #1
 8003590:	5a5b      	ldrh	r3, [r3, r1]
 8003592:	021b      	lsls	r3, r3, #8
 8003594:	4c1d      	ldr	r4, [pc, #116]	; (800360c <Play_Melody+0xd0>)
 8003596:	0019      	movs	r1, r3
 8003598:	0010      	movs	r0, r2
 800359a:	f7fc fdb5 	bl	8000108 <__udivsi3>
 800359e:	0003      	movs	r3, r0
 80035a0:	62a3      	str	r3, [r4, #40]	; 0x28

		HAL_Delay(1000/MelodyName.noteDuration[i]);
 80035a2:	1dfb      	adds	r3, r7, #7
 80035a4:	781b      	ldrb	r3, [r3, #0]
 80035a6:	1979      	adds	r1, r7, r5
 80035a8:	2264      	movs	r2, #100	; 0x64
 80035aa:	18cb      	adds	r3, r1, r3
 80035ac:	189b      	adds	r3, r3, r2
 80035ae:	781b      	ldrb	r3, [r3, #0]
 80035b0:	0019      	movs	r1, r3
 80035b2:	23fa      	movs	r3, #250	; 0xfa
 80035b4:	0098      	lsls	r0, r3, #2
 80035b6:	f7fc fe31 	bl	800021c <__divsi3>
 80035ba:	0003      	movs	r3, r0
 80035bc:	0018      	movs	r0, r3
 80035be:	f7fc ff7d 	bl	80004bc <HAL_Delay>

		TIM_CCxChannelCmd(TIMER, TIM_CHANNEL, TIM_CCx_DISABLE);
 80035c2:	4b12      	ldr	r3, [pc, #72]	; (800360c <Play_Melody+0xd0>)
 80035c4:	2200      	movs	r2, #0
 80035c6:	2100      	movs	r1, #0
 80035c8:	0018      	movs	r0, r3
 80035ca:	f7fe fe0d 	bl	80021e8 <TIM_CCxChannelCmd>

		HAL_Delay(10);
 80035ce:	200a      	movs	r0, #10
 80035d0:	f7fc ff74 	bl	80004bc <HAL_Delay>
	for(uint8_t i=0; i < MelodyName.noteCount; i++){
 80035d4:	1dfb      	adds	r3, r7, #7
 80035d6:	781a      	ldrb	r2, [r3, #0]
 80035d8:	1dfb      	adds	r3, r7, #7
 80035da:	3201      	adds	r2, #1
 80035dc:	701a      	strb	r2, [r3, #0]
 80035de:	2318      	movs	r3, #24
 80035e0:	18fa      	adds	r2, r7, r3
 80035e2:	2396      	movs	r3, #150	; 0x96
 80035e4:	5cd3      	ldrb	r3, [r2, r3]
 80035e6:	1dfa      	adds	r2, r7, #7
 80035e8:	7812      	ldrb	r2, [r2, #0]
 80035ea:	429a      	cmp	r2, r3
 80035ec:	d3c3      	bcc.n	8003576 <Play_Melody+0x3a>

	}
	TIM_CCxChannelCmd(TIMER, TIM_CHANNEL, TIM_CCx_DISABLE);
 80035ee:	4b07      	ldr	r3, [pc, #28]	; (800360c <Play_Melody+0xd0>)
 80035f0:	2200      	movs	r2, #0
 80035f2:	2100      	movs	r1, #0
 80035f4:	0018      	movs	r0, r3
 80035f6:	f7fe fdf7 	bl	80021e8 <TIM_CCxChannelCmd>

}
 80035fa:	46c0      	nop			; (mov r8, r8)
 80035fc:	46bd      	mov	sp, r7
 80035fe:	b002      	add	sp, #8
 8003600:	bcb0      	pop	{r4, r5, r7}
 8003602:	bc08      	pop	{r3}
 8003604:	b004      	add	sp, #16
 8003606:	4718      	bx	r3
 8003608:	20000078 	.word	0x20000078
 800360c:	40000400 	.word	0x40000400
 8003610:	20000008 	.word	0x20000008

08003614 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8003614:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003616:	b0a7      	sub	sp, #156	; 0x9c
 8003618:	af24      	add	r7, sp, #144	; 0x90
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800361a:	f7fc feeb 	bl	80003f4 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800361e:	f000 f893 	bl	8003748 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8003622:	f000 f9f7 	bl	8003a14 <MX_GPIO_Init>
	MX_TIM3_Init();
 8003626:	f000 f8ef 	bl	8003808 <MX_TIM3_Init>
	MX_TIM15_Init();
 800362a:	f000 f96b 	bl	8003904 <MX_TIM15_Init>
	MX_USART1_UART_Init();
 800362e:	f000 f9c1 	bl	80039b4 <MX_USART1_UART_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim15);
 8003632:	4b3e      	ldr	r3, [pc, #248]	; (800372c <main+0x118>)
 8003634:	0018      	movs	r0, r3
 8003636:	f7fd ffd9 	bl	80015ec <HAL_TIM_Base_Start_IT>
	HAL_UART_Receive_IT(&huart1,&get_data ,1);
 800363a:	493d      	ldr	r1, [pc, #244]	; (8003730 <main+0x11c>)
 800363c:	4b3d      	ldr	r3, [pc, #244]	; (8003734 <main+0x120>)
 800363e:	2201      	movs	r2, #1
 8003640:	0018      	movs	r0, r3
 8003642:	f7fe fea7 	bl	8002394 <HAL_UART_Receive_IT>
	HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_1);
 8003646:	4b3c      	ldr	r3, [pc, #240]	; (8003738 <main+0x124>)
 8003648:	2100      	movs	r1, #0
 800364a:	0018      	movs	r0, r3
 800364c:	f7fe f878 	bl	8001740 <HAL_TIM_PWM_Start>

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	HAL_Delay(500);
 8003650:	23fa      	movs	r3, #250	; 0xfa
 8003652:	005b      	lsls	r3, r3, #1
 8003654:	0018      	movs	r0, r3
 8003656:	f7fc ff31 	bl	80004bc <HAL_Delay>


	while (1)
	{

		Play_Melody(TOUCH1_Melody ,5);
 800365a:	4c38      	ldr	r4, [pc, #224]	; (800373c <main+0x128>)
 800365c:	2305      	movs	r3, #5
 800365e:	9322      	str	r3, [sp, #136]	; 0x88
 8003660:	466b      	mov	r3, sp
 8003662:	0018      	movs	r0, r3
 8003664:	0023      	movs	r3, r4
 8003666:	3310      	adds	r3, #16
 8003668:	2288      	movs	r2, #136	; 0x88
 800366a:	0019      	movs	r1, r3
 800366c:	f000 fbc4 	bl	8003df8 <memcpy>
 8003670:	6820      	ldr	r0, [r4, #0]
 8003672:	6861      	ldr	r1, [r4, #4]
 8003674:	68a2      	ldr	r2, [r4, #8]
 8003676:	68e3      	ldr	r3, [r4, #12]
 8003678:	f7ff ff60 	bl	800353c <Play_Melody>

		HAL_Delay(500);
 800367c:	23fa      	movs	r3, #250	; 0xfa
 800367e:	005b      	lsls	r3, r3, #1
 8003680:	0018      	movs	r0, r3
 8003682:	f7fc ff1b 	bl	80004bc <HAL_Delay>

		Play_Melody(OK_Melody ,5);
 8003686:	4b2e      	ldr	r3, [pc, #184]	; (8003740 <main+0x12c>)
 8003688:	2205      	movs	r2, #5
 800368a:	9222      	str	r2, [sp, #136]	; 0x88
 800368c:	881a      	ldrh	r2, [r3, #0]
 800368e:	8859      	ldrh	r1, [r3, #2]
 8003690:	0409      	lsls	r1, r1, #16
 8003692:	430a      	orrs	r2, r1
 8003694:	607a      	str	r2, [r7, #4]
 8003696:	889a      	ldrh	r2, [r3, #4]
 8003698:	88d9      	ldrh	r1, [r3, #6]
 800369a:	0409      	lsls	r1, r1, #16
 800369c:	430a      	orrs	r2, r1
 800369e:	0016      	movs	r6, r2
 80036a0:	891a      	ldrh	r2, [r3, #8]
 80036a2:	8959      	ldrh	r1, [r3, #10]
 80036a4:	0409      	lsls	r1, r1, #16
 80036a6:	430a      	orrs	r2, r1
 80036a8:	0015      	movs	r5, r2
 80036aa:	899a      	ldrh	r2, [r3, #12]
 80036ac:	89d9      	ldrh	r1, [r3, #14]
 80036ae:	0409      	lsls	r1, r1, #16
 80036b0:	430a      	orrs	r2, r1
 80036b2:	0014      	movs	r4, r2
 80036b4:	466a      	mov	r2, sp
 80036b6:	0010      	movs	r0, r2
 80036b8:	3310      	adds	r3, #16
 80036ba:	2288      	movs	r2, #136	; 0x88
 80036bc:	0019      	movs	r1, r3
 80036be:	f000 fb9b 	bl	8003df8 <memcpy>
 80036c2:	6878      	ldr	r0, [r7, #4]
 80036c4:	0031      	movs	r1, r6
 80036c6:	002a      	movs	r2, r5
 80036c8:	0023      	movs	r3, r4
 80036ca:	f7ff ff37 	bl	800353c <Play_Melody>

		HAL_Delay(500);
 80036ce:	23fa      	movs	r3, #250	; 0xfa
 80036d0:	005b      	lsls	r3, r3, #1
 80036d2:	0018      	movs	r0, r3
 80036d4:	f7fc fef2 	bl	80004bc <HAL_Delay>

		Play_Melody(ERROR_Melody ,5);
 80036d8:	4b1a      	ldr	r3, [pc, #104]	; (8003744 <main+0x130>)
 80036da:	2205      	movs	r2, #5
 80036dc:	9222      	str	r2, [sp, #136]	; 0x88
 80036de:	881a      	ldrh	r2, [r3, #0]
 80036e0:	8859      	ldrh	r1, [r3, #2]
 80036e2:	0409      	lsls	r1, r1, #16
 80036e4:	430a      	orrs	r2, r1
 80036e6:	607a      	str	r2, [r7, #4]
 80036e8:	889a      	ldrh	r2, [r3, #4]
 80036ea:	88d9      	ldrh	r1, [r3, #6]
 80036ec:	0409      	lsls	r1, r1, #16
 80036ee:	430a      	orrs	r2, r1
 80036f0:	0016      	movs	r6, r2
 80036f2:	891a      	ldrh	r2, [r3, #8]
 80036f4:	8959      	ldrh	r1, [r3, #10]
 80036f6:	0409      	lsls	r1, r1, #16
 80036f8:	430a      	orrs	r2, r1
 80036fa:	0015      	movs	r5, r2
 80036fc:	899a      	ldrh	r2, [r3, #12]
 80036fe:	89d9      	ldrh	r1, [r3, #14]
 8003700:	0409      	lsls	r1, r1, #16
 8003702:	430a      	orrs	r2, r1
 8003704:	0014      	movs	r4, r2
 8003706:	466a      	mov	r2, sp
 8003708:	0010      	movs	r0, r2
 800370a:	3310      	adds	r3, #16
 800370c:	2288      	movs	r2, #136	; 0x88
 800370e:	0019      	movs	r1, r3
 8003710:	f000 fb72 	bl	8003df8 <memcpy>
 8003714:	6878      	ldr	r0, [r7, #4]
 8003716:	0031      	movs	r1, r6
 8003718:	002a      	movs	r2, r5
 800371a:	0023      	movs	r3, r4
 800371c:	f7ff ff0e 	bl	800353c <Play_Melody>

		HAL_Delay(500);
 8003720:	23fa      	movs	r3, #250	; 0xfa
 8003722:	005b      	lsls	r3, r3, #1
 8003724:	0018      	movs	r0, r3
 8003726:	f7fc fec9 	bl	80004bc <HAL_Delay>
		Play_Melody(TOUCH1_Melody ,5);
 800372a:	e796      	b.n	800365a <main+0x46>
 800372c:	20000030 	.word	0x20000030
 8003730:	2000002c 	.word	0x2000002c
 8003734:	200000c0 	.word	0x200000c0
 8003738:	20000078 	.word	0x20000078
 800373c:	08003f84 	.word	0x08003f84
 8003740:	08003e54 	.word	0x08003e54
 8003744:	08003eec 	.word	0x08003eec

08003748 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8003748:	b590      	push	{r4, r7, lr}
 800374a:	b097      	sub	sp, #92	; 0x5c
 800374c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800374e:	2428      	movs	r4, #40	; 0x28
 8003750:	193b      	adds	r3, r7, r4
 8003752:	0018      	movs	r0, r3
 8003754:	2330      	movs	r3, #48	; 0x30
 8003756:	001a      	movs	r2, r3
 8003758:	2100      	movs	r1, #0
 800375a:	f000 fb56 	bl	8003e0a <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800375e:	2318      	movs	r3, #24
 8003760:	18fb      	adds	r3, r7, r3
 8003762:	0018      	movs	r0, r3
 8003764:	2310      	movs	r3, #16
 8003766:	001a      	movs	r2, r3
 8003768:	2100      	movs	r1, #0
 800376a:	f000 fb4e 	bl	8003e0a <memset>
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800376e:	1d3b      	adds	r3, r7, #4
 8003770:	0018      	movs	r0, r3
 8003772:	2314      	movs	r3, #20
 8003774:	001a      	movs	r2, r3
 8003776:	2100      	movs	r1, #0
 8003778:	f000 fb47 	bl	8003e0a <memset>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800377c:	0021      	movs	r1, r4
 800377e:	187b      	adds	r3, r7, r1
 8003780:	2201      	movs	r2, #1
 8003782:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003784:	187b      	adds	r3, r7, r1
 8003786:	2201      	movs	r2, #1
 8003788:	605a      	str	r2, [r3, #4]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800378a:	187b      	adds	r3, r7, r1
 800378c:	2202      	movs	r2, #2
 800378e:	621a      	str	r2, [r3, #32]
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003790:	187b      	adds	r3, r7, r1
 8003792:	2280      	movs	r2, #128	; 0x80
 8003794:	0252      	lsls	r2, r2, #9
 8003796:	625a      	str	r2, [r3, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 8003798:	187b      	adds	r3, r7, r1
 800379a:	2200      	movs	r2, #0
 800379c:	629a      	str	r2, [r3, #40]	; 0x28
	RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800379e:	187b      	adds	r3, r7, r1
 80037a0:	2200      	movs	r2, #0
 80037a2:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80037a4:	187b      	adds	r3, r7, r1
 80037a6:	0018      	movs	r0, r3
 80037a8:	f7fd f976 	bl	8000a98 <HAL_RCC_OscConfig>
 80037ac:	1e03      	subs	r3, r0, #0
 80037ae:	d001      	beq.n	80037b4 <SystemClock_Config+0x6c>
	{
		Error_Handler();
 80037b0:	f000 f956 	bl	8003a60 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80037b4:	2118      	movs	r1, #24
 80037b6:	187b      	adds	r3, r7, r1
 80037b8:	2207      	movs	r2, #7
 80037ba:	601a      	str	r2, [r3, #0]
			|RCC_CLOCKTYPE_PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80037bc:	187b      	adds	r3, r7, r1
 80037be:	2202      	movs	r2, #2
 80037c0:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80037c2:	187b      	adds	r3, r7, r1
 80037c4:	2200      	movs	r2, #0
 80037c6:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80037c8:	187b      	adds	r3, r7, r1
 80037ca:	2200      	movs	r2, #0
 80037cc:	60da      	str	r2, [r3, #12]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80037ce:	187b      	adds	r3, r7, r1
 80037d0:	2100      	movs	r1, #0
 80037d2:	0018      	movs	r0, r3
 80037d4:	f7fd fc7c 	bl	80010d0 <HAL_RCC_ClockConfig>
 80037d8:	1e03      	subs	r3, r0, #0
 80037da:	d001      	beq.n	80037e0 <SystemClock_Config+0x98>
	{
		Error_Handler();
 80037dc:	f000 f940 	bl	8003a60 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80037e0:	1d3b      	adds	r3, r7, #4
 80037e2:	2201      	movs	r2, #1
 80037e4:	601a      	str	r2, [r3, #0]
	PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80037e6:	1d3b      	adds	r3, r7, #4
 80037e8:	2200      	movs	r2, #0
 80037ea:	609a      	str	r2, [r3, #8]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80037ec:	1d3b      	adds	r3, r7, #4
 80037ee:	0018      	movs	r0, r3
 80037f0:	f7fd fdce 	bl	8001390 <HAL_RCCEx_PeriphCLKConfig>
 80037f4:	1e03      	subs	r3, r0, #0
 80037f6:	d001      	beq.n	80037fc <SystemClock_Config+0xb4>
	{
		Error_Handler();
 80037f8:	f000 f932 	bl	8003a60 <Error_Handler>
	}
	/** Enables the Clock Security System
	 */
	HAL_RCC_EnableCSS();
 80037fc:	f7fd fd36 	bl	800126c <HAL_RCC_EnableCSS>
}
 8003800:	46c0      	nop			; (mov r8, r8)
 8003802:	46bd      	mov	sp, r7
 8003804:	b017      	add	sp, #92	; 0x5c
 8003806:	bd90      	pop	{r4, r7, pc}

08003808 <MX_TIM3_Init>:
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b08e      	sub	sp, #56	; 0x38
 800380c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800380e:	2328      	movs	r3, #40	; 0x28
 8003810:	18fb      	adds	r3, r7, r3
 8003812:	0018      	movs	r0, r3
 8003814:	2310      	movs	r3, #16
 8003816:	001a      	movs	r2, r3
 8003818:	2100      	movs	r1, #0
 800381a:	f000 faf6 	bl	8003e0a <memset>
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 800381e:	2320      	movs	r3, #32
 8003820:	18fb      	adds	r3, r7, r3
 8003822:	0018      	movs	r0, r3
 8003824:	2308      	movs	r3, #8
 8003826:	001a      	movs	r2, r3
 8003828:	2100      	movs	r1, #0
 800382a:	f000 faee 	bl	8003e0a <memset>
	TIM_OC_InitTypeDef sConfigOC = {0};
 800382e:	1d3b      	adds	r3, r7, #4
 8003830:	0018      	movs	r0, r3
 8003832:	231c      	movs	r3, #28
 8003834:	001a      	movs	r2, r3
 8003836:	2100      	movs	r1, #0
 8003838:	f000 fae7 	bl	8003e0a <memset>

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 800383c:	4b2f      	ldr	r3, [pc, #188]	; (80038fc <MX_TIM3_Init+0xf4>)
 800383e:	4a30      	ldr	r2, [pc, #192]	; (8003900 <MX_TIM3_Init+0xf8>)
 8003840:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 16000000/(256*2000);
 8003842:	4b2e      	ldr	r3, [pc, #184]	; (80038fc <MX_TIM3_Init+0xf4>)
 8003844:	221f      	movs	r2, #31
 8003846:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003848:	4b2c      	ldr	r3, [pc, #176]	; (80038fc <MX_TIM3_Init+0xf4>)
 800384a:	2200      	movs	r2, #0
 800384c:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 0xff;
 800384e:	4b2b      	ldr	r3, [pc, #172]	; (80038fc <MX_TIM3_Init+0xf4>)
 8003850:	22ff      	movs	r2, #255	; 0xff
 8003852:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003854:	4b29      	ldr	r3, [pc, #164]	; (80038fc <MX_TIM3_Init+0xf4>)
 8003856:	2200      	movs	r2, #0
 8003858:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800385a:	4b28      	ldr	r3, [pc, #160]	; (80038fc <MX_TIM3_Init+0xf4>)
 800385c:	2200      	movs	r2, #0
 800385e:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003860:	4b26      	ldr	r3, [pc, #152]	; (80038fc <MX_TIM3_Init+0xf4>)
 8003862:	0018      	movs	r0, r3
 8003864:	f7fd fe72 	bl	800154c <HAL_TIM_Base_Init>
 8003868:	1e03      	subs	r3, r0, #0
 800386a:	d001      	beq.n	8003870 <MX_TIM3_Init+0x68>
	{
		Error_Handler();
 800386c:	f000 f8f8 	bl	8003a60 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003870:	2128      	movs	r1, #40	; 0x28
 8003872:	187b      	adds	r3, r7, r1
 8003874:	2280      	movs	r2, #128	; 0x80
 8003876:	0152      	lsls	r2, r2, #5
 8003878:	601a      	str	r2, [r3, #0]
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800387a:	187a      	adds	r2, r7, r1
 800387c:	4b1f      	ldr	r3, [pc, #124]	; (80038fc <MX_TIM3_Init+0xf4>)
 800387e:	0011      	movs	r1, r2
 8003880:	0018      	movs	r0, r3
 8003882:	f7fe f8d1 	bl	8001a28 <HAL_TIM_ConfigClockSource>
 8003886:	1e03      	subs	r3, r0, #0
 8003888:	d001      	beq.n	800388e <MX_TIM3_Init+0x86>
	{
		Error_Handler();
 800388a:	f000 f8e9 	bl	8003a60 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800388e:	4b1b      	ldr	r3, [pc, #108]	; (80038fc <MX_TIM3_Init+0xf4>)
 8003890:	0018      	movs	r0, r3
 8003892:	f7fd fefd 	bl	8001690 <HAL_TIM_PWM_Init>
 8003896:	1e03      	subs	r3, r0, #0
 8003898:	d001      	beq.n	800389e <MX_TIM3_Init+0x96>
	{
		Error_Handler();
 800389a:	f000 f8e1 	bl	8003a60 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800389e:	2120      	movs	r1, #32
 80038a0:	187b      	adds	r3, r7, r1
 80038a2:	2200      	movs	r2, #0
 80038a4:	601a      	str	r2, [r3, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80038a6:	187b      	adds	r3, r7, r1
 80038a8:	2200      	movs	r2, #0
 80038aa:	605a      	str	r2, [r3, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80038ac:	187a      	adds	r2, r7, r1
 80038ae:	4b13      	ldr	r3, [pc, #76]	; (80038fc <MX_TIM3_Init+0xf4>)
 80038b0:	0011      	movs	r1, r2
 80038b2:	0018      	movs	r0, r3
 80038b4:	f7fe fcbc 	bl	8002230 <HAL_TIMEx_MasterConfigSynchronization>
 80038b8:	1e03      	subs	r3, r0, #0
 80038ba:	d001      	beq.n	80038c0 <MX_TIM3_Init+0xb8>
	{
		Error_Handler();
 80038bc:	f000 f8d0 	bl	8003a60 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80038c0:	1d3b      	adds	r3, r7, #4
 80038c2:	2260      	movs	r2, #96	; 0x60
 80038c4:	601a      	str	r2, [r3, #0]
	sConfigOC.Pulse = 0;
 80038c6:	1d3b      	adds	r3, r7, #4
 80038c8:	2200      	movs	r2, #0
 80038ca:	605a      	str	r2, [r3, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80038cc:	1d3b      	adds	r3, r7, #4
 80038ce:	2200      	movs	r2, #0
 80038d0:	609a      	str	r2, [r3, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80038d2:	1d3b      	adds	r3, r7, #4
 80038d4:	2200      	movs	r2, #0
 80038d6:	611a      	str	r2, [r3, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80038d8:	1d39      	adds	r1, r7, #4
 80038da:	4b08      	ldr	r3, [pc, #32]	; (80038fc <MX_TIM3_Init+0xf4>)
 80038dc:	2200      	movs	r2, #0
 80038de:	0018      	movs	r0, r3
 80038e0:	f7fd ffe6 	bl	80018b0 <HAL_TIM_PWM_ConfigChannel>
 80038e4:	1e03      	subs	r3, r0, #0
 80038e6:	d001      	beq.n	80038ec <MX_TIM3_Init+0xe4>
	{
		Error_Handler();
 80038e8:	f000 f8ba 	bl	8003a60 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */
	HAL_TIM_MspPostInit(&htim3);
 80038ec:	4b03      	ldr	r3, [pc, #12]	; (80038fc <MX_TIM3_Init+0xf4>)
 80038ee:	0018      	movs	r0, r3
 80038f0:	f000 f914 	bl	8003b1c <HAL_TIM_MspPostInit>

}
 80038f4:	46c0      	nop			; (mov r8, r8)
 80038f6:	46bd      	mov	sp, r7
 80038f8:	b00e      	add	sp, #56	; 0x38
 80038fa:	bd80      	pop	{r7, pc}
 80038fc:	20000078 	.word	0x20000078
 8003900:	40000400 	.word	0x40000400

08003904 <MX_TIM15_Init>:
 * @brief TIM15 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM15_Init(void)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b086      	sub	sp, #24
 8003908:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM15_Init 0 */

	/* USER CODE END TIM15_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800390a:	2308      	movs	r3, #8
 800390c:	18fb      	adds	r3, r7, r3
 800390e:	0018      	movs	r0, r3
 8003910:	2310      	movs	r3, #16
 8003912:	001a      	movs	r2, r3
 8003914:	2100      	movs	r1, #0
 8003916:	f000 fa78 	bl	8003e0a <memset>
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 800391a:	003b      	movs	r3, r7
 800391c:	0018      	movs	r0, r3
 800391e:	2308      	movs	r3, #8
 8003920:	001a      	movs	r2, r3
 8003922:	2100      	movs	r1, #0
 8003924:	f000 fa71 	bl	8003e0a <memset>

	/* USER CODE BEGIN TIM15_Init 1 */

	/* USER CODE END TIM15_Init 1 */
	htim15.Instance = TIM15;
 8003928:	4b1f      	ldr	r3, [pc, #124]	; (80039a8 <MX_TIM15_Init+0xa4>)
 800392a:	4a20      	ldr	r2, [pc, #128]	; (80039ac <MX_TIM15_Init+0xa8>)
 800392c:	601a      	str	r2, [r3, #0]
	htim15.Init.Prescaler = 0;
 800392e:	4b1e      	ldr	r3, [pc, #120]	; (80039a8 <MX_TIM15_Init+0xa4>)
 8003930:	2200      	movs	r2, #0
 8003932:	605a      	str	r2, [r3, #4]
	htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003934:	4b1c      	ldr	r3, [pc, #112]	; (80039a8 <MX_TIM15_Init+0xa4>)
 8003936:	2200      	movs	r2, #0
 8003938:	609a      	str	r2, [r3, #8]
	htim15.Init.Period = 65535;
 800393a:	4b1b      	ldr	r3, [pc, #108]	; (80039a8 <MX_TIM15_Init+0xa4>)
 800393c:	4a1c      	ldr	r2, [pc, #112]	; (80039b0 <MX_TIM15_Init+0xac>)
 800393e:	60da      	str	r2, [r3, #12]
	htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003940:	4b19      	ldr	r3, [pc, #100]	; (80039a8 <MX_TIM15_Init+0xa4>)
 8003942:	2200      	movs	r2, #0
 8003944:	611a      	str	r2, [r3, #16]
	htim15.Init.RepetitionCounter = 0;
 8003946:	4b18      	ldr	r3, [pc, #96]	; (80039a8 <MX_TIM15_Init+0xa4>)
 8003948:	2200      	movs	r2, #0
 800394a:	615a      	str	r2, [r3, #20]
	htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800394c:	4b16      	ldr	r3, [pc, #88]	; (80039a8 <MX_TIM15_Init+0xa4>)
 800394e:	2200      	movs	r2, #0
 8003950:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8003952:	4b15      	ldr	r3, [pc, #84]	; (80039a8 <MX_TIM15_Init+0xa4>)
 8003954:	0018      	movs	r0, r3
 8003956:	f7fd fdf9 	bl	800154c <HAL_TIM_Base_Init>
 800395a:	1e03      	subs	r3, r0, #0
 800395c:	d001      	beq.n	8003962 <MX_TIM15_Init+0x5e>
	{
		Error_Handler();
 800395e:	f000 f87f 	bl	8003a60 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003962:	2108      	movs	r1, #8
 8003964:	187b      	adds	r3, r7, r1
 8003966:	2280      	movs	r2, #128	; 0x80
 8003968:	0152      	lsls	r2, r2, #5
 800396a:	601a      	str	r2, [r3, #0]
	if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 800396c:	187a      	adds	r2, r7, r1
 800396e:	4b0e      	ldr	r3, [pc, #56]	; (80039a8 <MX_TIM15_Init+0xa4>)
 8003970:	0011      	movs	r1, r2
 8003972:	0018      	movs	r0, r3
 8003974:	f7fe f858 	bl	8001a28 <HAL_TIM_ConfigClockSource>
 8003978:	1e03      	subs	r3, r0, #0
 800397a:	d001      	beq.n	8003980 <MX_TIM15_Init+0x7c>
	{
		Error_Handler();
 800397c:	f000 f870 	bl	8003a60 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003980:	003b      	movs	r3, r7
 8003982:	2200      	movs	r2, #0
 8003984:	601a      	str	r2, [r3, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003986:	003b      	movs	r3, r7
 8003988:	2200      	movs	r2, #0
 800398a:	605a      	str	r2, [r3, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 800398c:	003a      	movs	r2, r7
 800398e:	4b06      	ldr	r3, [pc, #24]	; (80039a8 <MX_TIM15_Init+0xa4>)
 8003990:	0011      	movs	r1, r2
 8003992:	0018      	movs	r0, r3
 8003994:	f7fe fc4c 	bl	8002230 <HAL_TIMEx_MasterConfigSynchronization>
 8003998:	1e03      	subs	r3, r0, #0
 800399a:	d001      	beq.n	80039a0 <MX_TIM15_Init+0x9c>
	{
		Error_Handler();
 800399c:	f000 f860 	bl	8003a60 <Error_Handler>
	}
	/* USER CODE BEGIN TIM15_Init 2 */

	/* USER CODE END TIM15_Init 2 */

}
 80039a0:	46c0      	nop			; (mov r8, r8)
 80039a2:	46bd      	mov	sp, r7
 80039a4:	b006      	add	sp, #24
 80039a6:	bd80      	pop	{r7, pc}
 80039a8:	20000030 	.word	0x20000030
 80039ac:	40014000 	.word	0x40014000
 80039b0:	0000ffff 	.word	0x0000ffff

080039b4 <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 80039b8:	4b14      	ldr	r3, [pc, #80]	; (8003a0c <MX_USART1_UART_Init+0x58>)
 80039ba:	4a15      	ldr	r2, [pc, #84]	; (8003a10 <MX_USART1_UART_Init+0x5c>)
 80039bc:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 9600;
 80039be:	4b13      	ldr	r3, [pc, #76]	; (8003a0c <MX_USART1_UART_Init+0x58>)
 80039c0:	2296      	movs	r2, #150	; 0x96
 80039c2:	0192      	lsls	r2, r2, #6
 80039c4:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80039c6:	4b11      	ldr	r3, [pc, #68]	; (8003a0c <MX_USART1_UART_Init+0x58>)
 80039c8:	2200      	movs	r2, #0
 80039ca:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 80039cc:	4b0f      	ldr	r3, [pc, #60]	; (8003a0c <MX_USART1_UART_Init+0x58>)
 80039ce:	2200      	movs	r2, #0
 80039d0:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 80039d2:	4b0e      	ldr	r3, [pc, #56]	; (8003a0c <MX_USART1_UART_Init+0x58>)
 80039d4:	2200      	movs	r2, #0
 80039d6:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 80039d8:	4b0c      	ldr	r3, [pc, #48]	; (8003a0c <MX_USART1_UART_Init+0x58>)
 80039da:	220c      	movs	r2, #12
 80039dc:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80039de:	4b0b      	ldr	r3, [pc, #44]	; (8003a0c <MX_USART1_UART_Init+0x58>)
 80039e0:	2200      	movs	r2, #0
 80039e2:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80039e4:	4b09      	ldr	r3, [pc, #36]	; (8003a0c <MX_USART1_UART_Init+0x58>)
 80039e6:	2200      	movs	r2, #0
 80039e8:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80039ea:	4b08      	ldr	r3, [pc, #32]	; (8003a0c <MX_USART1_UART_Init+0x58>)
 80039ec:	2200      	movs	r2, #0
 80039ee:	621a      	str	r2, [r3, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80039f0:	4b06      	ldr	r3, [pc, #24]	; (8003a0c <MX_USART1_UART_Init+0x58>)
 80039f2:	2200      	movs	r2, #0
 80039f4:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart1) != HAL_OK)
 80039f6:	4b05      	ldr	r3, [pc, #20]	; (8003a0c <MX_USART1_UART_Init+0x58>)
 80039f8:	0018      	movs	r0, r3
 80039fa:	f7fe fc77 	bl	80022ec <HAL_UART_Init>
 80039fe:	1e03      	subs	r3, r0, #0
 8003a00:	d001      	beq.n	8003a06 <MX_USART1_UART_Init+0x52>
	{
		Error_Handler();
 8003a02:	f000 f82d 	bl	8003a60 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8003a06:	46c0      	nop			; (mov r8, r8)
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	bd80      	pop	{r7, pc}
 8003a0c:	200000c0 	.word	0x200000c0
 8003a10:	40013800 	.word	0x40013800

08003a14 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b082      	sub	sp, #8
 8003a18:	af00      	add	r7, sp, #0

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8003a1a:	4b10      	ldr	r3, [pc, #64]	; (8003a5c <MX_GPIO_Init+0x48>)
 8003a1c:	695a      	ldr	r2, [r3, #20]
 8003a1e:	4b0f      	ldr	r3, [pc, #60]	; (8003a5c <MX_GPIO_Init+0x48>)
 8003a20:	2180      	movs	r1, #128	; 0x80
 8003a22:	03c9      	lsls	r1, r1, #15
 8003a24:	430a      	orrs	r2, r1
 8003a26:	615a      	str	r2, [r3, #20]
 8003a28:	4b0c      	ldr	r3, [pc, #48]	; (8003a5c <MX_GPIO_Init+0x48>)
 8003a2a:	695a      	ldr	r2, [r3, #20]
 8003a2c:	2380      	movs	r3, #128	; 0x80
 8003a2e:	03db      	lsls	r3, r3, #15
 8003a30:	4013      	ands	r3, r2
 8003a32:	607b      	str	r3, [r7, #4]
 8003a34:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8003a36:	4b09      	ldr	r3, [pc, #36]	; (8003a5c <MX_GPIO_Init+0x48>)
 8003a38:	695a      	ldr	r2, [r3, #20]
 8003a3a:	4b08      	ldr	r3, [pc, #32]	; (8003a5c <MX_GPIO_Init+0x48>)
 8003a3c:	2180      	movs	r1, #128	; 0x80
 8003a3e:	0289      	lsls	r1, r1, #10
 8003a40:	430a      	orrs	r2, r1
 8003a42:	615a      	str	r2, [r3, #20]
 8003a44:	4b05      	ldr	r3, [pc, #20]	; (8003a5c <MX_GPIO_Init+0x48>)
 8003a46:	695a      	ldr	r2, [r3, #20]
 8003a48:	2380      	movs	r3, #128	; 0x80
 8003a4a:	029b      	lsls	r3, r3, #10
 8003a4c:	4013      	ands	r3, r2
 8003a4e:	603b      	str	r3, [r7, #0]
 8003a50:	683b      	ldr	r3, [r7, #0]

}
 8003a52:	46c0      	nop			; (mov r8, r8)
 8003a54:	46bd      	mov	sp, r7
 8003a56:	b002      	add	sp, #8
 8003a58:	bd80      	pop	{r7, pc}
 8003a5a:	46c0      	nop			; (mov r8, r8)
 8003a5c:	40021000 	.word	0x40021000

08003a60 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8003a64:	46c0      	nop			; (mov r8, r8)
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bd80      	pop	{r7, pc}
	...

08003a6c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b082      	sub	sp, #8
 8003a70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a72:	4b0f      	ldr	r3, [pc, #60]	; (8003ab0 <HAL_MspInit+0x44>)
 8003a74:	699a      	ldr	r2, [r3, #24]
 8003a76:	4b0e      	ldr	r3, [pc, #56]	; (8003ab0 <HAL_MspInit+0x44>)
 8003a78:	2101      	movs	r1, #1
 8003a7a:	430a      	orrs	r2, r1
 8003a7c:	619a      	str	r2, [r3, #24]
 8003a7e:	4b0c      	ldr	r3, [pc, #48]	; (8003ab0 <HAL_MspInit+0x44>)
 8003a80:	699b      	ldr	r3, [r3, #24]
 8003a82:	2201      	movs	r2, #1
 8003a84:	4013      	ands	r3, r2
 8003a86:	607b      	str	r3, [r7, #4]
 8003a88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003a8a:	4b09      	ldr	r3, [pc, #36]	; (8003ab0 <HAL_MspInit+0x44>)
 8003a8c:	69da      	ldr	r2, [r3, #28]
 8003a8e:	4b08      	ldr	r3, [pc, #32]	; (8003ab0 <HAL_MspInit+0x44>)
 8003a90:	2180      	movs	r1, #128	; 0x80
 8003a92:	0549      	lsls	r1, r1, #21
 8003a94:	430a      	orrs	r2, r1
 8003a96:	61da      	str	r2, [r3, #28]
 8003a98:	4b05      	ldr	r3, [pc, #20]	; (8003ab0 <HAL_MspInit+0x44>)
 8003a9a:	69da      	ldr	r2, [r3, #28]
 8003a9c:	2380      	movs	r3, #128	; 0x80
 8003a9e:	055b      	lsls	r3, r3, #21
 8003aa0:	4013      	ands	r3, r2
 8003aa2:	603b      	str	r3, [r7, #0]
 8003aa4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003aa6:	46c0      	nop			; (mov r8, r8)
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	b002      	add	sp, #8
 8003aac:	bd80      	pop	{r7, pc}
 8003aae:	46c0      	nop			; (mov r8, r8)
 8003ab0:	40021000 	.word	0x40021000

08003ab4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b084      	sub	sp, #16
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a13      	ldr	r2, [pc, #76]	; (8003b10 <HAL_TIM_Base_MspInit+0x5c>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d10c      	bne.n	8003ae0 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003ac6:	4b13      	ldr	r3, [pc, #76]	; (8003b14 <HAL_TIM_Base_MspInit+0x60>)
 8003ac8:	69da      	ldr	r2, [r3, #28]
 8003aca:	4b12      	ldr	r3, [pc, #72]	; (8003b14 <HAL_TIM_Base_MspInit+0x60>)
 8003acc:	2102      	movs	r1, #2
 8003ace:	430a      	orrs	r2, r1
 8003ad0:	61da      	str	r2, [r3, #28]
 8003ad2:	4b10      	ldr	r3, [pc, #64]	; (8003b14 <HAL_TIM_Base_MspInit+0x60>)
 8003ad4:	69db      	ldr	r3, [r3, #28]
 8003ad6:	2202      	movs	r2, #2
 8003ad8:	4013      	ands	r3, r2
 8003ada:	60fb      	str	r3, [r7, #12]
 8003adc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8003ade:	e012      	b.n	8003b06 <HAL_TIM_Base_MspInit+0x52>
  else if(htim_base->Instance==TIM15)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a0c      	ldr	r2, [pc, #48]	; (8003b18 <HAL_TIM_Base_MspInit+0x64>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d10d      	bne.n	8003b06 <HAL_TIM_Base_MspInit+0x52>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8003aea:	4b0a      	ldr	r3, [pc, #40]	; (8003b14 <HAL_TIM_Base_MspInit+0x60>)
 8003aec:	699a      	ldr	r2, [r3, #24]
 8003aee:	4b09      	ldr	r3, [pc, #36]	; (8003b14 <HAL_TIM_Base_MspInit+0x60>)
 8003af0:	2180      	movs	r1, #128	; 0x80
 8003af2:	0249      	lsls	r1, r1, #9
 8003af4:	430a      	orrs	r2, r1
 8003af6:	619a      	str	r2, [r3, #24]
 8003af8:	4b06      	ldr	r3, [pc, #24]	; (8003b14 <HAL_TIM_Base_MspInit+0x60>)
 8003afa:	699a      	ldr	r2, [r3, #24]
 8003afc:	2380      	movs	r3, #128	; 0x80
 8003afe:	025b      	lsls	r3, r3, #9
 8003b00:	4013      	ands	r3, r2
 8003b02:	60bb      	str	r3, [r7, #8]
 8003b04:	68bb      	ldr	r3, [r7, #8]
}
 8003b06:	46c0      	nop			; (mov r8, r8)
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	b004      	add	sp, #16
 8003b0c:	bd80      	pop	{r7, pc}
 8003b0e:	46c0      	nop			; (mov r8, r8)
 8003b10:	40000400 	.word	0x40000400
 8003b14:	40021000 	.word	0x40021000
 8003b18:	40014000 	.word	0x40014000

08003b1c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b088      	sub	sp, #32
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b24:	230c      	movs	r3, #12
 8003b26:	18fb      	adds	r3, r7, r3
 8003b28:	0018      	movs	r0, r3
 8003b2a:	2314      	movs	r3, #20
 8003b2c:	001a      	movs	r2, r3
 8003b2e:	2100      	movs	r1, #0
 8003b30:	f000 f96b 	bl	8003e0a <memset>
  if(htim->Instance==TIM3)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4a15      	ldr	r2, [pc, #84]	; (8003b90 <HAL_TIM_MspPostInit+0x74>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d124      	bne.n	8003b88 <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b3e:	4b15      	ldr	r3, [pc, #84]	; (8003b94 <HAL_TIM_MspPostInit+0x78>)
 8003b40:	695a      	ldr	r2, [r3, #20]
 8003b42:	4b14      	ldr	r3, [pc, #80]	; (8003b94 <HAL_TIM_MspPostInit+0x78>)
 8003b44:	2180      	movs	r1, #128	; 0x80
 8003b46:	0289      	lsls	r1, r1, #10
 8003b48:	430a      	orrs	r2, r1
 8003b4a:	615a      	str	r2, [r3, #20]
 8003b4c:	4b11      	ldr	r3, [pc, #68]	; (8003b94 <HAL_TIM_MspPostInit+0x78>)
 8003b4e:	695a      	ldr	r2, [r3, #20]
 8003b50:	2380      	movs	r3, #128	; 0x80
 8003b52:	029b      	lsls	r3, r3, #10
 8003b54:	4013      	ands	r3, r2
 8003b56:	60bb      	str	r3, [r7, #8]
 8003b58:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003b5a:	210c      	movs	r1, #12
 8003b5c:	187b      	adds	r3, r7, r1
 8003b5e:	2240      	movs	r2, #64	; 0x40
 8003b60:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b62:	187b      	adds	r3, r7, r1
 8003b64:	2202      	movs	r2, #2
 8003b66:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b68:	187b      	adds	r3, r7, r1
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b6e:	187b      	adds	r3, r7, r1
 8003b70:	2200      	movs	r2, #0
 8003b72:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8003b74:	187b      	adds	r3, r7, r1
 8003b76:	2201      	movs	r2, #1
 8003b78:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b7a:	187a      	adds	r2, r7, r1
 8003b7c:	2390      	movs	r3, #144	; 0x90
 8003b7e:	05db      	lsls	r3, r3, #23
 8003b80:	0011      	movs	r1, r2
 8003b82:	0018      	movs	r0, r3
 8003b84:	f7fc fe18 	bl	80007b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8003b88:	46c0      	nop			; (mov r8, r8)
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	b008      	add	sp, #32
 8003b8e:	bd80      	pop	{r7, pc}
 8003b90:	40000400 	.word	0x40000400
 8003b94:	40021000 	.word	0x40021000

08003b98 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b08a      	sub	sp, #40	; 0x28
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ba0:	2314      	movs	r3, #20
 8003ba2:	18fb      	adds	r3, r7, r3
 8003ba4:	0018      	movs	r0, r3
 8003ba6:	2314      	movs	r3, #20
 8003ba8:	001a      	movs	r2, r3
 8003baa:	2100      	movs	r1, #0
 8003bac:	f000 f92d 	bl	8003e0a <memset>
  if(huart->Instance==USART1)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4a21      	ldr	r2, [pc, #132]	; (8003c3c <HAL_UART_MspInit+0xa4>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d13b      	bne.n	8003c32 <HAL_UART_MspInit+0x9a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003bba:	4b21      	ldr	r3, [pc, #132]	; (8003c40 <HAL_UART_MspInit+0xa8>)
 8003bbc:	699a      	ldr	r2, [r3, #24]
 8003bbe:	4b20      	ldr	r3, [pc, #128]	; (8003c40 <HAL_UART_MspInit+0xa8>)
 8003bc0:	2180      	movs	r1, #128	; 0x80
 8003bc2:	01c9      	lsls	r1, r1, #7
 8003bc4:	430a      	orrs	r2, r1
 8003bc6:	619a      	str	r2, [r3, #24]
 8003bc8:	4b1d      	ldr	r3, [pc, #116]	; (8003c40 <HAL_UART_MspInit+0xa8>)
 8003bca:	699a      	ldr	r2, [r3, #24]
 8003bcc:	2380      	movs	r3, #128	; 0x80
 8003bce:	01db      	lsls	r3, r3, #7
 8003bd0:	4013      	ands	r3, r2
 8003bd2:	613b      	str	r3, [r7, #16]
 8003bd4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003bd6:	4b1a      	ldr	r3, [pc, #104]	; (8003c40 <HAL_UART_MspInit+0xa8>)
 8003bd8:	695a      	ldr	r2, [r3, #20]
 8003bda:	4b19      	ldr	r3, [pc, #100]	; (8003c40 <HAL_UART_MspInit+0xa8>)
 8003bdc:	2180      	movs	r1, #128	; 0x80
 8003bde:	0289      	lsls	r1, r1, #10
 8003be0:	430a      	orrs	r2, r1
 8003be2:	615a      	str	r2, [r3, #20]
 8003be4:	4b16      	ldr	r3, [pc, #88]	; (8003c40 <HAL_UART_MspInit+0xa8>)
 8003be6:	695a      	ldr	r2, [r3, #20]
 8003be8:	2380      	movs	r3, #128	; 0x80
 8003bea:	029b      	lsls	r3, r3, #10
 8003bec:	4013      	ands	r3, r2
 8003bee:	60fb      	str	r3, [r7, #12]
 8003bf0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003bf2:	2114      	movs	r1, #20
 8003bf4:	187b      	adds	r3, r7, r1
 8003bf6:	22c0      	movs	r2, #192	; 0xc0
 8003bf8:	00d2      	lsls	r2, r2, #3
 8003bfa:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bfc:	187b      	adds	r3, r7, r1
 8003bfe:	2202      	movs	r2, #2
 8003c00:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c02:	187b      	adds	r3, r7, r1
 8003c04:	2200      	movs	r2, #0
 8003c06:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003c08:	187b      	adds	r3, r7, r1
 8003c0a:	2203      	movs	r2, #3
 8003c0c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8003c0e:	187b      	adds	r3, r7, r1
 8003c10:	2201      	movs	r2, #1
 8003c12:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c14:	187a      	adds	r2, r7, r1
 8003c16:	2390      	movs	r3, #144	; 0x90
 8003c18:	05db      	lsls	r3, r3, #23
 8003c1a:	0011      	movs	r1, r2
 8003c1c:	0018      	movs	r0, r3
 8003c1e:	f7fc fdcb 	bl	80007b8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003c22:	2200      	movs	r2, #0
 8003c24:	2100      	movs	r1, #0
 8003c26:	201b      	movs	r0, #27
 8003c28:	f7fc fd16 	bl	8000658 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003c2c:	201b      	movs	r0, #27
 8003c2e:	f7fc fd28 	bl	8000682 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003c32:	46c0      	nop			; (mov r8, r8)
 8003c34:	46bd      	mov	sp, r7
 8003c36:	b00a      	add	sp, #40	; 0x28
 8003c38:	bd80      	pop	{r7, pc}
 8003c3a:	46c0      	nop			; (mov r8, r8)
 8003c3c:	40013800 	.word	0x40013800
 8003c40:	40021000 	.word	0x40021000

08003c44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003c48:	46c0      	nop			; (mov r8, r8)
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bd80      	pop	{r7, pc}

08003c4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003c4e:	b580      	push	{r7, lr}
 8003c50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003c52:	e7fe      	b.n	8003c52 <HardFault_Handler+0x4>

08003c54 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003c58:	46c0      	nop			; (mov r8, r8)
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	bd80      	pop	{r7, pc}

08003c5e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003c5e:	b580      	push	{r7, lr}
 8003c60:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003c62:	46c0      	nop			; (mov r8, r8)
 8003c64:	46bd      	mov	sp, r7
 8003c66:	bd80      	pop	{r7, pc}

08003c68 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003c6c:	f7fc fc0a 	bl	8000484 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003c70:	46c0      	nop			; (mov r8, r8)
 8003c72:	46bd      	mov	sp, r7
 8003c74:	bd80      	pop	{r7, pc}
	...

08003c78 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003c7c:	4b03      	ldr	r3, [pc, #12]	; (8003c8c <USART1_IRQHandler+0x14>)
 8003c7e:	0018      	movs	r0, r3
 8003c80:	f7fe fbe8 	bl	8002454 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003c84:	46c0      	nop			; (mov r8, r8)
 8003c86:	46bd      	mov	sp, r7
 8003c88:	bd80      	pop	{r7, pc}
 8003c8a:	46c0      	nop			; (mov r8, r8)
 8003c8c:	200000c0 	.word	0x200000c0

08003c90 <SystemInit>:
  *         Initialize the default HSI clock source, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001U;
 8003c94:	4b1a      	ldr	r3, [pc, #104]	; (8003d00 <SystemInit+0x70>)
 8003c96:	681a      	ldr	r2, [r3, #0]
 8003c98:	4b19      	ldr	r3, [pc, #100]	; (8003d00 <SystemInit+0x70>)
 8003c9a:	2101      	movs	r1, #1
 8003c9c:	430a      	orrs	r2, r1
 8003c9e:	601a      	str	r2, [r3, #0]

#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80CU;
 8003ca0:	4b17      	ldr	r3, [pc, #92]	; (8003d00 <SystemInit+0x70>)
 8003ca2:	685a      	ldr	r2, [r3, #4]
 8003ca4:	4b16      	ldr	r3, [pc, #88]	; (8003d00 <SystemInit+0x70>)
 8003ca6:	4917      	ldr	r1, [pc, #92]	; (8003d04 <SystemInit+0x74>)
 8003ca8:	400a      	ands	r2, r1
 8003caa:	605a      	str	r2, [r3, #4]
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFFU;
 8003cac:	4b14      	ldr	r3, [pc, #80]	; (8003d00 <SystemInit+0x70>)
 8003cae:	681a      	ldr	r2, [r3, #0]
 8003cb0:	4b13      	ldr	r3, [pc, #76]	; (8003d00 <SystemInit+0x70>)
 8003cb2:	4915      	ldr	r1, [pc, #84]	; (8003d08 <SystemInit+0x78>)
 8003cb4:	400a      	ands	r2, r1
 8003cb6:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8003cb8:	4b11      	ldr	r3, [pc, #68]	; (8003d00 <SystemInit+0x70>)
 8003cba:	681a      	ldr	r2, [r3, #0]
 8003cbc:	4b10      	ldr	r3, [pc, #64]	; (8003d00 <SystemInit+0x70>)
 8003cbe:	4913      	ldr	r1, [pc, #76]	; (8003d0c <SystemInit+0x7c>)
 8003cc0:	400a      	ands	r2, r1
 8003cc2:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 8003cc4:	4b0e      	ldr	r3, [pc, #56]	; (8003d00 <SystemInit+0x70>)
 8003cc6:	685a      	ldr	r2, [r3, #4]
 8003cc8:	4b0d      	ldr	r3, [pc, #52]	; (8003d00 <SystemInit+0x70>)
 8003cca:	4911      	ldr	r1, [pc, #68]	; (8003d10 <SystemInit+0x80>)
 8003ccc:	400a      	ands	r2, r1
 8003cce:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 8003cd0:	4b0b      	ldr	r3, [pc, #44]	; (8003d00 <SystemInit+0x70>)
 8003cd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cd4:	4b0a      	ldr	r3, [pc, #40]	; (8003d00 <SystemInit+0x70>)
 8003cd6:	210f      	movs	r1, #15
 8003cd8:	438a      	bics	r2, r1
 8003cda:	62da      	str	r2, [r3, #44]	; 0x2c
#elif defined (STM32F030x6) || defined (STM32F030x8) || defined (STM32F031x6) || defined (STM32F038xx) || defined (STM32F030xC)
  /* Reset USART1SW[1:0], I2C1SW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEECU;
#elif defined (STM32F051x8) || defined (STM32F058xx)
  /* Reset USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEACU;
 8003cdc:	4b08      	ldr	r3, [pc, #32]	; (8003d00 <SystemInit+0x70>)
 8003cde:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ce0:	4b07      	ldr	r3, [pc, #28]	; (8003d00 <SystemInit+0x70>)
 8003ce2:	490c      	ldr	r1, [pc, #48]	; (8003d14 <SystemInit+0x84>)
 8003ce4:	400a      	ands	r2, r1
 8003ce6:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFEU;
 8003ce8:	4b05      	ldr	r3, [pc, #20]	; (8003d00 <SystemInit+0x70>)
 8003cea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003cec:	4b04      	ldr	r3, [pc, #16]	; (8003d00 <SystemInit+0x70>)
 8003cee:	2101      	movs	r1, #1
 8003cf0:	438a      	bics	r2, r1
 8003cf2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8003cf4:	4b02      	ldr	r3, [pc, #8]	; (8003d00 <SystemInit+0x70>)
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	609a      	str	r2, [r3, #8]

}
 8003cfa:	46c0      	nop			; (mov r8, r8)
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	bd80      	pop	{r7, pc}
 8003d00:	40021000 	.word	0x40021000
 8003d04:	f8ffb80c 	.word	0xf8ffb80c
 8003d08:	fef6ffff 	.word	0xfef6ffff
 8003d0c:	fffbffff 	.word	0xfffbffff
 8003d10:	ffc0ffff 	.word	0xffc0ffff
 8003d14:	fffffeac 	.word	0xfffffeac

08003d18 <HAL_UART_TxCpltCallback>:
extern uint8_t get_data ;
extern UART_HandleTypeDef huart1;



void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b082      	sub	sp, #8
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
  if(huart -> Instance == USART1){
//    HAL_UART_Transmit_IT(&huart1, (uint8_t *)0x00, 1);
  }
  UNUSED(huart);
}
 8003d20:	46c0      	nop			; (mov r8, r8)
 8003d22:	46bd      	mov	sp, r7
 8003d24:	b002      	add	sp, #8
 8003d26:	bd80      	pop	{r7, pc}

08003d28 <HAL_UART_RxCpltCallback>:



void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b082      	sub	sp, #8
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
  if(huart -> Instance == USART2){
  }
  if(huart ->Instance == USART1){
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4a06      	ldr	r2, [pc, #24]	; (8003d50 <HAL_UART_RxCpltCallback+0x28>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d105      	bne.n	8003d46 <HAL_UART_RxCpltCallback+0x1e>
//
    HAL_UART_Receive_IT(&huart1 ,&get_data ,1);
 8003d3a:	4906      	ldr	r1, [pc, #24]	; (8003d54 <HAL_UART_RxCpltCallback+0x2c>)
 8003d3c:	4b06      	ldr	r3, [pc, #24]	; (8003d58 <HAL_UART_RxCpltCallback+0x30>)
 8003d3e:	2201      	movs	r2, #1
 8003d40:	0018      	movs	r0, r3
 8003d42:	f7fe fb27 	bl	8002394 <HAL_UART_Receive_IT>
  }
  UNUSED(huart);
}
 8003d46:	46c0      	nop			; (mov r8, r8)
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	b002      	add	sp, #8
 8003d4c:	bd80      	pop	{r7, pc}
 8003d4e:	46c0      	nop			; (mov r8, r8)
 8003d50:	40013800 	.word	0x40013800
 8003d54:	2000002c 	.word	0x2000002c
 8003d58:	200000c0 	.word	0x200000c0

08003d5c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003d5c:	480d      	ldr	r0, [pc, #52]	; (8003d94 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003d5e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003d60:	480d      	ldr	r0, [pc, #52]	; (8003d98 <LoopForever+0x6>)
  ldr r1, =_edata
 8003d62:	490e      	ldr	r1, [pc, #56]	; (8003d9c <LoopForever+0xa>)
  ldr r2, =_sidata
 8003d64:	4a0e      	ldr	r2, [pc, #56]	; (8003da0 <LoopForever+0xe>)
  movs r3, #0
 8003d66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003d68:	e002      	b.n	8003d70 <LoopCopyDataInit>

08003d6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003d6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003d6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003d6e:	3304      	adds	r3, #4

08003d70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003d70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003d72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003d74:	d3f9      	bcc.n	8003d6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003d76:	4a0b      	ldr	r2, [pc, #44]	; (8003da4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003d78:	4c0b      	ldr	r4, [pc, #44]	; (8003da8 <LoopForever+0x16>)
  movs r3, #0
 8003d7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003d7c:	e001      	b.n	8003d82 <LoopFillZerobss>

08003d7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003d7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003d80:	3204      	adds	r2, #4

08003d82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003d82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003d84:	d3fb      	bcc.n	8003d7e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8003d86:	f7ff ff83 	bl	8003c90 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8003d8a:	f000 f811 	bl	8003db0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003d8e:	f7ff fc41 	bl	8003614 <main>

08003d92 <LoopForever>:

LoopForever:
    b LoopForever
 8003d92:	e7fe      	b.n	8003d92 <LoopForever>
  ldr   r0, =_estack
 8003d94:	20001fff 	.word	0x20001fff
  ldr r0, =_sdata
 8003d98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003d9c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8003da0:	0800403c 	.word	0x0800403c
  ldr r2, =_sbss
 8003da4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8003da8:	20000144 	.word	0x20000144

08003dac <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003dac:	e7fe      	b.n	8003dac <ADC1_COMP_IRQHandler>
	...

08003db0 <__libc_init_array>:
 8003db0:	b570      	push	{r4, r5, r6, lr}
 8003db2:	2600      	movs	r6, #0
 8003db4:	4d0c      	ldr	r5, [pc, #48]	; (8003de8 <__libc_init_array+0x38>)
 8003db6:	4c0d      	ldr	r4, [pc, #52]	; (8003dec <__libc_init_array+0x3c>)
 8003db8:	1b64      	subs	r4, r4, r5
 8003dba:	10a4      	asrs	r4, r4, #2
 8003dbc:	42a6      	cmp	r6, r4
 8003dbe:	d109      	bne.n	8003dd4 <__libc_init_array+0x24>
 8003dc0:	2600      	movs	r6, #0
 8003dc2:	f000 f82b 	bl	8003e1c <_init>
 8003dc6:	4d0a      	ldr	r5, [pc, #40]	; (8003df0 <__libc_init_array+0x40>)
 8003dc8:	4c0a      	ldr	r4, [pc, #40]	; (8003df4 <__libc_init_array+0x44>)
 8003dca:	1b64      	subs	r4, r4, r5
 8003dcc:	10a4      	asrs	r4, r4, #2
 8003dce:	42a6      	cmp	r6, r4
 8003dd0:	d105      	bne.n	8003dde <__libc_init_array+0x2e>
 8003dd2:	bd70      	pop	{r4, r5, r6, pc}
 8003dd4:	00b3      	lsls	r3, r6, #2
 8003dd6:	58eb      	ldr	r3, [r5, r3]
 8003dd8:	4798      	blx	r3
 8003dda:	3601      	adds	r6, #1
 8003ddc:	e7ee      	b.n	8003dbc <__libc_init_array+0xc>
 8003dde:	00b3      	lsls	r3, r6, #2
 8003de0:	58eb      	ldr	r3, [r5, r3]
 8003de2:	4798      	blx	r3
 8003de4:	3601      	adds	r6, #1
 8003de6:	e7f2      	b.n	8003dce <__libc_init_array+0x1e>
 8003de8:	08004034 	.word	0x08004034
 8003dec:	08004034 	.word	0x08004034
 8003df0:	08004034 	.word	0x08004034
 8003df4:	08004038 	.word	0x08004038

08003df8 <memcpy>:
 8003df8:	2300      	movs	r3, #0
 8003dfa:	b510      	push	{r4, lr}
 8003dfc:	429a      	cmp	r2, r3
 8003dfe:	d100      	bne.n	8003e02 <memcpy+0xa>
 8003e00:	bd10      	pop	{r4, pc}
 8003e02:	5ccc      	ldrb	r4, [r1, r3]
 8003e04:	54c4      	strb	r4, [r0, r3]
 8003e06:	3301      	adds	r3, #1
 8003e08:	e7f8      	b.n	8003dfc <memcpy+0x4>

08003e0a <memset>:
 8003e0a:	0003      	movs	r3, r0
 8003e0c:	1812      	adds	r2, r2, r0
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d100      	bne.n	8003e14 <memset+0xa>
 8003e12:	4770      	bx	lr
 8003e14:	7019      	strb	r1, [r3, #0]
 8003e16:	3301      	adds	r3, #1
 8003e18:	e7f9      	b.n	8003e0e <memset+0x4>
	...

08003e1c <_init>:
 8003e1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e1e:	46c0      	nop			; (mov r8, r8)
 8003e20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e22:	bc08      	pop	{r3}
 8003e24:	469e      	mov	lr, r3
 8003e26:	4770      	bx	lr

08003e28 <_fini>:
 8003e28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e2a:	46c0      	nop			; (mov r8, r8)
 8003e2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e2e:	bc08      	pop	{r3}
 8003e30:	469e      	mov	lr, r3
 8003e32:	4770      	bx	lr
